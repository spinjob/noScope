{
  "openapi": "3.0.1",
  "info": {
    "title": "Public API",
    "description": "# Overview\n\nThe API endpoints are developed around [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) principles secure via the OAuth2.0 protocol.\n\nBeyond the entry points, the API also provides a line of communication into your system via [webhooks](https://en.wikipedia.org/wiki/Webhook).\n\nFor testing purposes, we offer a staging environment. Also, more detailed information about the business rules and workflows can be found on the [**Documentation Section**](/docs/)\n\n## Versioning\nEach API is versioned individually, but we follow these rules:\n- Non breaking changes (eg: adding new fields) are added in the current version without previous communication\n- Breaking changes (fields removal, semantic changed or schema update) have the version incremented\n- Users will be notified about new versions and will be given time to migrate (the time will be set on a case by case)\n- Once users migrate to the new version, we will deprecate the old ones\n- Once there is a new version for an API, we won't accept new integrations targeting old versions\n\n## API General Definitions\nThe APIs use resource-oriented URLs communicating, primarily, via JSON and leveraging the HTTP headers, [response status codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status), and verbs.\n\nTo exemplify how the API is to be consumed, consider a fake GET resource endpoint invocation below:\n\n```\ncurl --request GET 'https://{{public-api-url}}/v1/resource/123' \\\n--header 'Authorization: Bearer 34fdabeeafds=' --header 'X-Store-Id: 321' --header 'X-Application-Id: e22f94b3-967c-4e26-bf39-9e364066b68b'\n```\n\n|      Header      | Description |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|`Authorization`   | Standard HTTP header is used to associate the request with the originating invoker. The content of this header is a `Bearer` token generated from you client_secret, defined in the [API Auth](#/section/Guides/API-Auth) guide.|\n|`X-Application-Id`| The plain-text `Application Id`, provided at onboarding. |\n|`X-Store-Id`      | The ID of the store in your system this call acts on behalf of. |\n\n_All resource endpoints expect the `Authorization` and `X-Application-Id` header, the remaining headers are explicitly stated in the individual endpoint documentation section._\n\nWith these headers, the system will:\n - Validate the client token, making sure the call is originating from a trusted source.\n - Validate that the Application has the permission to access the `v1/resource/{id}` resource via the Application's pre-configured scopes.\n - Translate your X-Store-Id to our internal store ID (e.g. `AAA`).\n - Validate and retrieve resource `AAA`, that is associated to your Application via store id `321`.\n\nPOST/PUT methods will look similiar to the GET calls, but they'll take in a body in the HTTP request (default to the application/json content-type).\n\n```\ncurl --location --request POST 'https://{{public-api-url}}/v1/resource' \\\n--header 'Authorization: Bearer 34fdabeeafds=' --header 'X-Store-Id: 321' --header 'X-Application-Id: e22f94b3-967c-4e26-bf39-9e364066b68b\"\n--data '{\"foo\": \"bar\"}'\n```\n\n## API Authentication/Authorization\n\n<SecurityDefinitions />\n\nThe **Authorization API** is based on the [OAuth2.0 protocol](https://tools.ietf.org/html/rfc6749), using the [client credentials grant](https://tools.ietf.org/html/rfc6749#section-4.4). Resources expect a valid token sent as a `Bearer` token in the HTTP `Authorization` header.\n\nTo generate the token, use the `Application ID` and `Client Secret` (provided during onboarding) to the [Token Auth endpoint](#operation/requestToken) endpoint. The result of this invocation is a token that is valid for a pre-determined time or until it is manually revoked.\n\nThe response of the following endpoints will return a token that will be sent as a `Bearer` value of the `Authorization` HTTP header, along with meta information such as expiry-date.\n\n_Note that the referred `client_id` is the `Application ID` because though we chose adhere to the OAuth2.0 standard for the auth APIs._\n\n### Request Examples\n\n#### URL Encoded Form\n\nThe API exposes a token generation endpoint expects your *client_id* and *client_secret* to be formatted as *application/x-www-form-urlencoded* content type.\n```\ncurl --location --request POST 'https://{{public-api-url}}/v1/auth/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'scope=ping' \\\n--data-urlencode 'grant_type=client_credentials' \\\n--data-urlencode 'client_id=[APPLICATION_ID]' \\\n--data-urlencode 'client_secret=[CLIENT_SECRET]'\n```\n\n#### HTTP Basic Auth\n\nAlternatively, the API also accepts a `Basic` Authorization header with the Base64 encoding of the `client_id` (`Application ID`) and `client_secret` joined by a single colon `:`.\n\n```\nBASE64_ENCODED_CREDENTIALS = base64_encode(client_id + \":\" + client_secret)\n```\n\n```\ncurl --location --request POST 'https://{{public-api-url}}/v1/auth/token' \\\n--header 'Authorization: Basic [BASE64_ENCODED_CREDENTIALS]' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'scope=ping' \\\n--data-urlencode 'grant_type=client_credentials'\n```\n\n## Webhook\n\nThe Public API is able to send notifications to your system via HTTP POST requests signed with an HMAC digest defined in the [Webhook AUTH section](#section/Guides/Webhook-Auth).\n_Please work with your Account Representative to setup your Application's Webhook configurations._\n\n```\nExample Base-URL = https://{{your-server-url}}/webhook\n```\n\n### Notification Schema\n\n| **Name**                | **Type** | **Description**                                                      |\n| ------------------------| ---------| -------------------------------------------------------------------- |\n| eventId                 | string   | Unique id of the event.                                              |\n| eventTime               | string   | The time the event occurred.                                         |\n| eventType               | string   | The type of event (e.g. create_order).                               |\n| metadata.storeId        | string   | Id of the store for which the event is being published.              |\n| metadata.applicationId  | string   | Id of the application for which the event is being published.        |\n| metadata.resourceId     | string   | The external identifier of the resource that this event refers to.   |\n| metadata.resourceHref   | string   | The endpoint to fetch the details of the resource.                   |\n| metadata.payload        | object   | The event object which will be detailed in each Webhook description. |\n\n### Notification Request Example\n\n```\ncurl --location --request POST 'https://{{your-server-url}}/webhook' \\\n--header 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36' \\\n--header 'Authorization: MAC <hash signature>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n   \"eventId\": \"123456\",\n   \"eventTime\": \"2020-10-10T20:06:02:123Z\",\n   \"eventType\": \"orders.new_order\",\n   \"metadata\": {\n      \"storeId\": \"755fd19a-7562-487a-b615-171a9f89d669\",\n      \"applicationId\": \"e22f94b3-967c-4e26-bf39-9e364066b68b\",\n      \"resourceHref\": \"https://{{public-api-url}}/v1/orders/bf9f1d81-f213-496e-a026-91b6af44996c\",\n      \"resourceId\": \"bf9f1d81-f213-496e-a026-91b6af44996c\",\n      \"payload\": {}\n   }\n}\n```\n\n## Expected Response\n\nThe partner application should return an HTTP 200 response code with an empty response body to acknowledge receipt of the webhook event.\n\n## Webhook Auth\n\nWebhooks use a standard HMAC signature for your system to validate that the inbound request is coming from our API.\n\nThe <hash signature> sent in the Authorization header should be used to validate that the payload was sent by us. The shared `client_secret` (configured during onboarding) is used to generate the digest:\n\nPython:\n\n```\n// payload_body = Body of the payload.\n// client_secret = The shared secret key.\nhash_signature = getHashSignatureFromAuthHeader() // hash_signature will be prefixed with \"MAC \"\nhash_signature_digest = hash_signature.split(\" \")[1]; // strip off the prefix \"MAC \"\nhash_signature_digest_decoded = Base64.decode(hash_signature_digest, UTF_8)\ndigester = hmac.new(client_secret, payload_body, \"HmacSHA1\");\nassert hash_signature_digest_decoded == digester.hexDigest()\n```\n\nJava:\n\n```\n// payloadBody = Body of the payload.\n// clientSecret = The shared secret key.\nString hashSignature = getHashSignatureFromAuthHeader(); // hash_signature will be prefixed with \"MAC \"\nString hashSignatureDigest = hashSignature.split(\" \")[1]; // strip off prefix \"MAC \"\nbyte[] hashSignatureDigestDecoded = Base64.getDecoder().decode(hashSignatureDigest);\nMac mac = Mac.getInstance(HMAC_SHA_1);\nmac.init(new SecretKeySpec(clientSecret.getBytes(Charsets.UTF_8), HMAC_SHA_1));\nassertArrayEquals(hashSignatureDigestDecoded, mac.doFinal(payloadBody.getBytes()));\n```\n\n## Api Usage Limits\nUsage of the API is rate-limited and the traffic is monitored to assure the thresholds are adequate for each partner profile based on typical intercommunication patterns.\nPlease reach out if you're being throttled (HTTP 429) and need specific settings for your integration.",
    "version": "v1",
    "license": {
      "name": "Proprietary"
    }
  },
  "servers": [
    {
      "url": "https://{{public-api-url}}",
      "description": "Staging server url"
    }
  ],
  "tags": [
    {
      "name": "ping_endpoints",
      "description": "Endpoints to ping and test system authentication.",
      "x-displayName": "Ping"
    },
    {
      "name": "orders_endpoints",
      "description": "Endpoints to manage orders for a store.",
      "x-displayName": "Orders"
    },
    {
      "name": "orders_webhooks",
      "description": "Webhooks from orders domains.",
      "x-displayName": "Orders Webhooks"
    },
    {
      "name": "callback_endpoints",
      "description": "Endpoints for callback management.",
      "x-displayName": "Callback"
    },
    {
      "name": "reports_endpoints",
      "description": "Endpoints to reports generation operations",
      "x-displayName": "Reports"
    },
    {
      "name": "reports_webhooks",
      "description": "Webhooks from the reports generation operations",
      "x-displayName": "Reports Webhooks"
    },
    {
      "name": "storefront_endpoints",
      "description": "Endpoints to manage storefront state",
      "x-displayName": "Storefront"
    },
    {
      "name": "storefront_webhooks",
      "description": "Webhooks from storefront domain.",
      "x-displayName": "Storefront Webhooks"
    },
    {
      "name": "menus_endpoints",
      "description": "Endpoints to manage menus.",
      "x-displayName": "Menus"
    },
    {
      "name": "menus_webhooks",
      "description": "Webhooks from menus domain.",
      "x-displayName": "Menus Webhooks"
    },
    {
      "name": "auth_endpoints",
      "description": "Endpoints to handle token management.",
      "x-displayName": "Auth"
    },
    {
      "name": "delivery_endpoints",
      "description": "Endpoints to manage delivery.",
      "x-displayName": "Delivery"
    },
    {
      "name": "delivery_webhooks",
      "description": "Webhooks from the delivery domain.",
      "x-displayName": "Delivery Webhooks"
    },
    {
      "name": "ping_webhooks",
      "description": "Webhooks to ping and test the system integration.",
      "x-displayName": "Ping Webhooks"
    }
  ],
  "webhooks": {
    "orderCreate": {
      "post": {
        "tags": [
          "orders_webhooks"
        ],
        "summary": "Order creation webhook",
        "operationId": "orderCreateWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/Order"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "intentToCancelOrder": {
      "post": {
        "tags": [
          "orders_webhooks"
        ],
        "summary": "Intent to cancel order webhook",
        "operationId": "intentToCancelOrderWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/IntentToCancelEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "orderStatusUpdate": {
      "post": {
        "tags": [
          "orders_webhooks"
        ],
        "summary": "Order status update webhook",
        "operationId": "orderStatusUpdateWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/OrderStatusHistory"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "menuPublish": {
      "post": {
        "tags": [
          "menus_webhooks"
        ],
        "summary": "Menu publish webhook",
        "operationId": "menuPublishWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/MenuPublishEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "sendMenu": {
      "post": {
        "tags": [
          "menus_webhooks"
        ],
        "summary": "Send menu webhook",
        "operationId": "sendMenuWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/NullEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "updateMenuEntitiesAvailabilities": {
      "post": {
        "tags": [
          "menus_webhooks"
        ],
        "summary": "Update menu entities availabilities webhook",
        "operationId": "updateMenuEntitiesAvailabilitiesWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/BulkUpdateItemStatus"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "upsertMenuHours": {
      "post": {
        "tags": [
          "menus_webhooks"
        ],
        "summary": "Upsert menu hours webhook",
        "operationId": "upsertMenuHoursWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/UpsertHoursEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "pauseStore": {
      "post": {
        "tags": [
          "storefront_webhooks"
        ],
        "summary": "Pause store webhook",
        "operationId": "pauseStoreWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/NullEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "unpauseStore": {
      "post": {
        "tags": [
          "storefront_webhooks"
        ],
        "summary": "Unpause store webhook",
        "operationId": "unpauseStoreWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/String"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "getStoreAvailability": {
      "post": {
        "tags": [
          "storefront_webhooks"
        ],
        "summary": "Get store availability webhook",
        "operationId": "getStoreAvailabilityWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/NullEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "getStoreHoursConfiguration": {
      "post": {
        "tags": [
          "storefront_webhooks"
        ],
        "summary": "Get store hours configuration webhook",
        "operationId": "getStoreHoursConfigurationWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/NullEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "deliveryStatusUpdate": {
      "post": {
        "tags": [
          "delivery_webhooks"
        ],
        "summary": "Update delivery status webhook",
        "operationId": "deliveryStatusUpdateWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/DeliveryStatusUpdateEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "requestDeliveryQuotes": {
      "post": {
        "tags": [
          "delivery_webhooks"
        ],
        "summary": "Request delivery quotes webhook",
        "operationId": "requestDeliveryQuotesWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/RequestDeliveryQuoteEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "acceptDelivery": {
      "post": {
        "tags": [
          "delivery_webhooks"
        ],
        "summary": "Accept delivery webhook",
        "operationId": "acceptDeliveryWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/AcceptDeliveryEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "cancelDelivery": {
      "post": {
        "tags": [
          "delivery_webhooks"
        ],
        "summary": "Cancel delivery webhook",
        "operationId": "cancelDeliveryWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/CancelDeliveryEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    },
    "reportGenerated": {
      "post": {
        "tags": [
          "reports_webhooks"
        ],
        "summary": "Report generated webhook",
        "operationId": "reportGeneratedWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/ReportGeneratedEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "ping": {
      "post": {
        "tags": [
          "ping_webhooks"
        ],
        "summary": "Ping webhook",
        "description": "Used to validate the integration without side effects",
        "operationId": "pingWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventNotification"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "payload": {
                            "$ref": "#/components/schemas/PingEvent"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "$ref": "#/components/responses/2XX"
          }
        }
      }
    }
  },
  "paths": {
    "/v1/orders/{orderId}/status": {
      "post": {
        "tags": [
          "orders_endpoints"
        ],
        "summary": "Update order status",
        "operationId": "updateOrderStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdOptionalHeader"
          },
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderStatusUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The order status was successfully accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "orders.update"
            ]
          }
        ]
      }
    },
    "/v1/orders/{orderId}/payments": {
      "put": {
        "tags": [
          "orders_endpoints"
        ],
        "summary": "Update order customer payment",
        "operationId": "updateOrderCustomerPayment",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCustomerPaymentUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The order payment information was successfully updated."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "orders.update"
            ]
          }
        ]
      }
    },
    "/v1/orders/posReInject": {
      "post": {
        "tags": [
          "orders_endpoints"
        ],
        "summary": "request order re-injection in POS",
        "operationId": "requestOrderReInjectionInPos",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSReInjectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The order reinjection request was successfully accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "orders.pos.operations"
            ]
          }
        ]
      }
    },
    "/v1/orders/{orderId}/{source}/pos": {
      "get": {
        "tags": [
          "orders_endpoints"
        ],
        "summary": "fetch order with POS Info",
        "operationId": "getPosOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/orderId"
          },
          {
            "$ref": "#/components/parameters/source"
          }
        ],
        "responses": {
          "200": {
            "description": "Order information was successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderWithPosInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "orders.pos.operations"
            ]
          }
        ]
      }
    },
    "/v1/orders/feed": {
      "get": {
        "tags": [
          "orders_endpoints"
        ],
        "summary": "fetch order feed for a store",
        "operationId": "getOrderFeed",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/token"
          }
        ],
        "responses": {
          "200": {
            "description": "Order feed was successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderFeed"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "orders.read"
            ]
          }
        ]
      }
    },
    "/v1/menus/publish": {
      "post": {
        "tags": [
          "menus_endpoints"
        ],
        "summary": "Notify the result of a Publish Menu event",
        "operationId": "menuPublishCallback",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertFullMenuEventCallback"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The Publish menu event result was successfully processed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "menus.publish"
            ]
          }
        ]
      }
    },
    "/v1/storefront/hours": {
      "post": {
        "tags": [
          "storefront_endpoints"
        ],
        "summary": "Notify about store hours configuration change",
        "operationId": "postStoreHoursConfigurationChange",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdOptionalHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreHoursConfigurationEventResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The store hours configuration change was successfully processed."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "storefront.store_hours_configuration"
            ]
          }
        ]
      }
    },
    "/v1/menus/jobs/{jobId}": {
      "get": {
        "tags": [
          "menus_endpoints"
        ],
        "summary": "Get the async menu job status.",
        "operationId": "getAsyncJobStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the job.",
              "example": "295f76b4-5725-4bf5-a8ab-97943dbdc3b4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The menu async job status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuAsynchronousJob"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "menus.async_job.read"
            ]
          }
        ]
      }
    },
    "/v1/menus": {
      "get": {
        "tags": [
          "menus_endpoints"
        ],
        "summary": "Get the menus for a store",
        "operationId": "getMenu",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The store's menu.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "menus.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "menus_endpoints"
        ],
        "summary": "Upsert menus for a store",
        "operationId": "upsertMenu",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenusUpsertRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The menu update will be processed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuAsynchronousJob"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "menus.upsert"
            ]
          }
        ]
      }
    },
    "/v1/storefront/unpause": {
      "post": {
        "tags": [
          "storefront_endpoints"
        ],
        "summary": "Notify the result of an unpause request event",
        "operationId": "postUnpauseStoreEventResult",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnpauseStoreEventResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The unpause store event result was successfully processed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "storefront.store_pause_unpause"
            ]
          }
        ]
      }
    },
    "/v1/menus/pos/publish": {
      "post": {
        "tags": [
          "menus_endpoints"
        ],
        "summary": "Publish menus to targets for a store",
        "operationId": "publishMenu",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MenuPublishRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The menu publish will be processed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuPublishResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "description": "Conflicting Menu targets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuPublishResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "menus.pos_publish"
            ]
          }
        ]
      }
    },
    "/v1/orders/{orderId}": {
      "put": {
        "tags": [
          "orders_endpoints"
        ],
        "summary": "updates an order",
        "operationId": "updateOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The order was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReference"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "orders.update"
            ]
          }
        ]
      }
    },
    "/v1/orders/status": {
      "post": {
        "tags": [
          "orders_endpoints"
        ],
        "summary": "Update order status",
        "operationId": "posUpdateOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdOptionalHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POSOrderStatusUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The order status was successfully accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "orders.pos.status_update"
            ]
          }
        ]
      }
    },
    "/v1/menus/current": {
      "post": {
        "tags": [
          "menus_endpoints"
        ],
        "summary": "Notify the result of a Send Menu event",
        "operationId": "menuSendCallback",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMenuEventCallback"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The Send Menu event result was successfully processed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "menus.get_current"
            ]
          }
        ]
      }
    },
    "/v1/menus/hours": {
      "post": {
        "tags": [
          "menus_endpoints"
        ],
        "summary": "Notify the receival of a Upsert Hours Menu event",
        "operationId": "menuUpsertHours",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "The Upsert Hours Menu event result was successfully processed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "menus.upsert_hours"
            ]
          }
        ]
      }
    },
    "/v1/storefront/pause": {
      "post": {
        "tags": [
          "storefront_endpoints"
        ],
        "summary": "Notify the result of a pause request event",
        "operationId": "postPauseStoreEventResult",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseStoreEventResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The pause store event result was successfully processed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "storefront.store_pause_unpause"
            ]
          }
        ]
      }
    },
    "/v1/orders/{orderId}/delivery": {
      "put": {
        "tags": [
          "orders_endpoints"
        ],
        "summary": "Update order delivery information",
        "operationId": "updateOrderDeliveryInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/orderId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDeliveryInfoUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The order delivery information was successfully accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "orders.update"
            ]
          }
        ]
      }
    },
    "/v1/orders": {
      "post": {
        "tags": [
          "orders_endpoints"
        ],
        "summary": "Create order",
        "operationId": "createOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The order was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReference"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "orders.create"
            ]
          }
        ]
      }
    },
    "/v1/delivery/{deliveryReferenceId}/quotes": {
      "post": {
        "tags": [
          "delivery_endpoints"
        ],
        "summary": "Request delivery quote event result callback endpoint",
        "operationId": "requestDeliveryQuoteCallback",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          },
          {
            "$ref": "#/components/parameters/deliveryReferenceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestDeliveryQuoteCallbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The event callback was successfully accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "delivery.provider"
            ]
          }
        ]
      }
    },
    "/v1/delivery/{deliveryReferenceId}/accept": {
      "post": {
        "tags": [
          "delivery_endpoints"
        ],
        "summary": "Accept delivery event result endpoint",
        "operationId": "acceptDeliveryCallback",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          },
          {
            "$ref": "#/components/parameters/deliveryReferenceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptDeliveryCallbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The event callback was successfully accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "delivery.provider"
            ]
          }
        ]
      }
    },
    "/v1/delivery/{deliveryReferenceId}/cancel": {
      "post": {
        "tags": [
          "delivery_endpoints"
        ],
        "summary": "Cancel delivery event result endpoint",
        "operationId": "cancelDeliveryCallback",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          },
          {
            "$ref": "#/components/parameters/deliveryReferenceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelDeliveryCallbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The event callback was successfully accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "delivery.provider"
            ]
          }
        ]
      }
    },
    "/v1/delivery/{deliveryReferenceId}/status": {
      "put": {
        "tags": [
          "delivery_endpoints"
        ],
        "summary": "Update delivery status endpoint",
        "operationId": "updateDeliveryStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/deliveryReferenceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryStatusUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The event callback was successfully accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "delivery.provider"
            ]
          }
        ]
      }
    },
    "/v1/delivery/callback/error": {
      "post": {
        "tags": [
          "delivery_endpoints"
        ],
        "summary": "Publishes a delivery callback error",
        "operationId": "deliveryCallbackError",
        "parameters": [
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCallbackError"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The callback error was successfully accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "callback.error.write"
            ]
          }
        ]
      }
    },
    "/v1/callback/error": {
      "post": {
        "tags": [
          "callback_endpoints"
        ],
        "summary": "Publishes a callback error",
        "operationId": "publishError",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCallbackError"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The callback error was successfully accepted."
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "callback.error.write"
            ]
          }
        ]
      }
    },
    "/v1/storefront/availability": {
      "post": {
        "tags": [
          "storefront_endpoints"
        ],
        "summary": "Notify about store availability change",
        "operationId": "postStoreAvailabilityChange",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdOptionalHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreAvailabilityEventResult"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The store availability change was successfully processed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "storefront.store_availability"
            ]
          }
        ]
      }
    },
    "/v1/ping": {
      "get": {
        "tags": [
          "ping_endpoints"
        ],
        "summary": "Ping the system",
        "operationId": "ping",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "name": "X-Echo-Error",
            "in": "header",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The error message to be returned by the endpoint, for testing purposes.",
              "example": "ping test error message"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ping was successfully received.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PongObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "description": "I am a teapot.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "ping"
            ]
          }
        ]
      }
    },
    "/v1/reports": {
      "post": {
        "tags": [
          "reports_endpoints"
        ],
        "summary": "Endpoint to request a business report for organization",
        "operationId": "generateReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The request was successfully processed and report is being generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateReportResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "reports.generate_report"
            ]
          }
        ]
      }
    },
    "/v1/menus/entity/availability/bulk": {
      "post": {
        "tags": [
          "menus_endpoints"
        ],
        "summary": "Notify the result of a Update Menu Entities Availabilities event",
        "operationId": "updateMenuEntitiesAvailabilitiesCallback",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The Update Menu Entities Availabilities menu entity event result was successfully processed"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "menus.entity_suspension"
            ]
          }
        ]
      }
    },
    "/v1/menus/pos/publish/targets": {
      "get": {
        "tags": [
          "menus_endpoints"
        ],
        "summary": "Get the MenuPublishTargets for a store",
        "operationId": "getMenuPublishTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/applicationIdHeader"
          },
          {
            "$ref": "#/components/parameters/storeIdHeader"
          },
          {
            "$ref": "#/components/parameters/eventIdOptionalHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The store's MenuPublishTargets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuPublishTargets"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "security": [
          {
            "OAuth2.0": [
              "menus.pos_publish"
            ]
          }
        ]
      }
    },
    "/v1/auth/token": {
      "post": {
        "tags": [
          "auth_endpoints"
        ],
        "summary": "Generate token",
        "description": "Client credentials in the request-body and HTTP Basic Auth are supported.",
        "operationId": "requestToken",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OAuthTokenGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The token was successfully generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HydraToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "OAuth2.0": {
        "type": "oauth2",
        "description": "The Authentication/Authorization API support OAuth2.0 protocol. Only Generate Token operation is supported.\n\n## Scopes\n\nScopes must be configured by our internal team to be enabled for an app. Each endpoint requires a given scope that can be verified on each endpoint documentation. When generating an OAuth2.0 token multiple scopes can be requested.\n\n## Generate Token\n\nUsed to generate an OAuth2.0 token that must be used to call all available endpoints.\nClient credentials in the request-body and HTTP Basic Auth are supported.\n\n### Request\n\nRequest body schema: application/x-www-form-urlencoded\n\n### Specification\n\n| **Field**                | **Type**        | **Description**                                                                       |\n| ------------------------ | --------------- | ------------------------------------------------------------------------------------- |\n| client_id                | string <uuid>   | The error description.                                                                |\n| client_secret            | string          | The secret of the client.                                                             |\n| grant_type               | string          | The OAuth2.0 grant types supported. Must be client_credentials.                    |\n| scope                    | string          | The scope to request, multiple scopes are passed delimited by a space character. |\n\n### Example\n\n```\ncurl --location --request POST 'https://{{public-api-url}}/v1/auth/token' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'scope=ping' \\\n  --data-urlencode 'grant_type=client_credentials' \\\n  --data-urlencode 'client_id=[APPLICATION_ID]' \\\n  --data-urlencode 'client_secret=[CLIENT_SECRET]'\n```\n\n### Response\n\nResponse body schema: application/json\n\n### Specification\n\n| **Field**                | **Type**        | **Description**                                                                   |\n| ------------------------ | --------------- | --------------------------------------------------------------------------------- |\n| access_token             | string          | The OAuth2.0 generated scope.                                                     |\n| expires_in               | integer         |   \n  Time for token expiration, in seconds.                                          |\n| scope                    | string          | Scopes available for the generated token.                                         |\n| token_type     .         | string          | The token type, value is always `bearer`.                                         |\n\n### Example\n\n```\n{\n  \"access_token\": \"oMahtBwBbnZeh4Q66mSuLFmk2V0_CLCKVt0aYcNJlcg.yditzjwCP7yp0PgR6AzQR3wQ1rTdCjkcPeAMuyfK-NU\",\n  \"expires_in\": 2627999,\n  \"scope\": \"ping orders.create\",\n  \"token_type\": \"bearer\"\n}\n```\n\n### Error Responses\n\nHTTP Status Code `400`: The request is malformed.\n\nHTTP Status Code `401`: Invalid Authorization.\n\nHTTP Status Code `422`: The request body is not valid.\n\n### Example\n\n```\n{\n  \"message\": \"Client Secret and Authorization header are null.\",\n  \"details\": []\n}\n```\n\n## Usage\n\nThe token provided in field `access_token` is used to authenticate when consuming the API endpoints. Send the token value in the `Authorization` header of every request. The token expiration time is represented in the field `expired_in`, in seconds. Currently, all tokens are valid for 30 days and should be stored and re-used while still valid.\n\n### Example\n\n```\ncurl --location --request GET 'https://{{public-api-url}}/v1/ping' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'X-Application-Id: <applicationId>' \\\n  --header 'X-Store-Id: <storeId>'\n```\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/v1/auth/token",
            "scopes": {
              "menus.publish": "Token has permission to notify the result of a publish menus operation for a given store.",
              "menus.get_current": "Token has permission to send the current state of a menu, after being requested by a webhook event.",
              "menus.upsert_hours": "Token has permission to notify the receival of the upsert hours menu event, after being requested by a webhook event.",
              "menus.pos_publish": "Token has permission to read available integration targets and to publish complete menus for selected integration targets.",
              "menus.async_job.read": "Token has permission to read the status of a menu upser job.",
              "menus.entity_suspension": "Token has permission to notify the result of a menu entity availability update, after being requested by a webhook event.",
              "menus.read": "Token has permission to read the current menus for a given store.",
              "menus.upsert": "Token has permission to create/update menus for a given store.",
              "orders.customer_payment_update": "Token has permission to update customer’s payment information for a previously created order for a given store.",
              "orders.delivery_info_update": "Token has permission to update delivery information for a previously created order.",
              "orders.status_update": "Token has permission to update the order status for a previously created order.",
              "orders.create": "Token has permission to create new order for a given store.",
              "orders.upsert": "Token has permission to create and / or update new order(s) for a given store.",
              "ping": "Token has permission to ping the system.",
              "reports.generate_report": "Token has permission to request reports for a given store and period of time.",
              "storefront.store_pause_unpause": "Token has permission to notify the result of a pause/unpause operation, after being requested by a webhook event.",
              "storefront.store_availability": "Token has permission to send the current state of store.",
              "storefront.store_hours_configuration": "Token has permission to send the current store hours configuration.",
              "delivery.provider": "Token has permission to send the delivery operation result.",
              "callback.error.write": "Token has permission to send failed webhook event results."
            }
          }
        }
      }
    },
    "parameters": {
      "applicationIdHeader": {
        "name": "X-Application-Id",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "description": "The plain-text Application Id, provided at onboarding.",
          "example": "295f76b4-5725-4bf5-a8ab-97943dbdc3b4"
        }
      },
      "storeIdHeader": {
        "name": "X-Store-Id",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "description": "The ID of the store in your system this call acts on behalf of.",
          "example": 1
        }
      },
      "eventIdOptionalHeader": {
        "name": "X-Event-Id",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "description": "Optional unique identifier of the event that this callback refers to.",
          "example": "cf0ce51b-d74e-40d3-b177-1925ab4edc0c"
        }
      },
      "orderId": {
        "name": "orderId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier of the order in a UUID format.",
          "example": "295f76b4-5725-4bf5-a8ab-97943dbdc3b4"
        }
      },
      "source": {
        "name": "source",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Describes the source of the order, typically from a food ordering marketplace.",
          "example": "ubereats"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Max number of orders to retrieve",
          "example": 5
        }
      },
      "token": {
        "name": "token",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "description": "Opaque token used for paging.",
          "example": "CgwI09+kjQYQwOvF2AM=/(urlencoded:CgwI09%2BkjQYQwOvF2AM%3D)"
        }
      },
      "eventIdHeader": {
        "name": "X-Event-Id",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Unique identifier of the event that this callback refers to.",
          "example": "cf0ce51b-d74e-40d3-b177-1925ab4edc0c"
        }
      },
      "deliveryReferenceId": {
        "name": "deliveryReferenceId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier of the delivery in a UUID format.",
          "example": "295f76b4-5725-4bf5-a8ab-97943dbdc3b4"
        }
      },
      "posFeedOrderId": {
        "name": "orderId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier of the order."
        }
      }
    },
    "schemas": {
      "OrderStatusUpdateRequest": {
        "required": [
          "orderStatus"
        ],
        "type": "object",
        "properties": {
          "orderStatus": {
            "type": "string",
            "description": "The requested status to transition the order to.",
            "enum": [
              "PREPARED",
              "CANCELED",
              "FULFILLED"
            ]
          }
        },
        "description": "The request to change an order status."
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "attribute": {
            "type": "string",
            "description": "The error attribute.",
            "example": "Order Currency Code"
          },
          "message": {
            "type": "string",
            "description": "The error detail description.",
            "example": "Order Currency Code must be exactly 3 characters"
          }
        },
        "description": "The error detail response object.",
        "example": "The error validation details."
      },
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The error description.",
            "example": "The request body is invalid."
          },
          "details": {
            "type": "array",
            "description": "The error details.",
            "example": "The error validation details.",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        },
        "description": "The error response object."
      },
      "OrderTotal": {
        "required": [
          "subtotal"
        ],
        "type": "object",
        "properties": {
          "subtotal": {
            "type": "number",
            "description": "The order's subtotal, as the sum of all item and modifier prices.",
            "example": 11.97
          },
          "claimedSubtotal": {
            "type": "number",
            "nullable": true,
            "description": "The order's claimed subtotal, without guaranteeing this will match calculated subtotal."
          },
          "discount": {
            "type": "number",
            "nullable": true,
            "description": "Any discount amount for the order.",
            "example": 1
          },
          "tax": {
            "type": "number",
            "nullable": true,
            "description": "Tax paid by the customer.",
            "example": 1.1
          },
          "tip": {
            "type": "number",
            "nullable": true,
            "description": "Tip paid by the customer.",
            "example": 2
          },
          "deliveryFee": {
            "type": "number",
            "nullable": true,
            "description": "Delivery fee.",
            "example": 5
          },
          "total": {
            "type": "number",
            "nullable": true,
            "description": "Order total including everything paid by the customer.",
            "example": 19.07
          },
          "couponCode": {
            "type": "string",
            "nullable": true,
            "description": "Coupon code applied to the order.",
            "example": "VWXYZ98765"
          }
        },
        "description": "Details about values of the order."
      },
      "CustomerPayment": {
        "required": [
          "paymentMethod",
          "processingStatus",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The portion of the overall amount that needs to be paid.",
            "example": 2
          },
          "processingStatus": {
            "type": "string",
            "description": "The processing status of the payment.",
            "enum": [
              "COLLECTABLE",
              "PROCESSED"
            ]
          },
          "paymentMethod": {
            "type": "string",
            "description": "The method of payment.",
            "enum": [
              "CASH",
              "CARD",
              "UNKNOWN",
              "OTHER",
              "CHEQUE"
            ]
          }
        }
      },
      "OrderCustomerPaymentUpdateRequest": {
        "required": [
          "currencyCode",
          "customerPayment",
          "orderTotal"
        ],
        "type": "object",
        "properties": {
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The 3-letter currency code (ISO 4217) to use for all monetary values in this order.",
            "example": "EUR"
          },
          "orderTotal": {
            "$ref": "#/components/schemas/OrderTotal"
          },
          "customerPayment": {
            "type": "array",
            "description": "The requested customer payment to transition the order to.",
            "items": {
              "$ref": "#/components/schemas/CustomerPayment"
            }
          }
        },
        "description": "The request to update customer payment for an order."
      },
      "OrderIdentifier": {
        "required": [
          "id",
          "source"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the order that was placed.",
            "example": "69f60a06-c335-46d9-b5a1-97f1a211c514"
          },
          "source": {
            "type": "string",
            "description": "Describes the source of the order, typically from a food ordering marketplace.",
            "example": "ubereats"
          }
        },
        "description": "The external identifiers of the order."
      },
      "POSReInjectionRequest": {
        "required": [
          "orderExternalIdentifiers"
        ],
        "type": "object",
        "properties": {
          "orderExternalIdentifiers": {
            "$ref": "#/components/schemas/OrderIdentifier"
          }
        },
        "description": "The request to change an order status."
      },
      "OrderExternalIdentifiers": {
        "required": [
          "friendlyId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the order that was placed.",
            "example": "69f60a06-c335-46d9-b5a1-97f1a211c514"
          },
          "friendlyId": {
            "type": "string",
            "description": "ID used for driver pickup and restaurant management.",
            "example": "ABCDE"
          },
          "source": {
            "type": "string",
            "nullable": true,
            "description": "Describes the source of the order, typically from a food ordering marketplace.",
            "example": "ubereats"
          }
        },
        "description": "The external identifiers."
      },
      "ItemModifier": {
        "required": [
          "quantity"
        ],
        "type": "object",
        "properties": {
          "skuPrice": {
            "type": "number",
            "nullable": true,
            "description": "The stored sku price of this item",
            "readOnly": true,
            "example": 1
          },
          "id": {
            "type": "string",
            "nullable": true,
            "description": "The unique ID of the modifier product.",
            "example": "d7a21692-9195-43aa-a58f-5395bba8a804"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the modifier as displayed to the customer.",
            "example": "Avocado"
          },
          "quantity": {
            "minimum": 1,
            "type": "integer",
            "description": "The number of times the modifier was applied to the given item.",
            "format": "int32",
            "example": 1
          },
          "price": {
            "type": "number",
            "nullable": true,
            "description": "The price of the sold modifier.",
            "example": 1
          },
          "groupName": {
            "type": "string",
            "nullable": true,
            "description": "The parent group of the modifier item",
            "example": "Add ons"
          },
          "groupId": {
            "type": "string",
            "nullable": true,
            "description": "The unique ID of the parent group",
            "example": "fb52b138-7ac4-42c1-bfd8-664d57113a41"
          },
          "modifiers": {
            "type": "array",
            "nullable": true,
            "description": "Nested modifiers applied to the item.",
            "items": {
              "$ref": "#/components/schemas/ItemModifier"
            }
          }
        }
      },
      "Item": {
        "required": [
          "quantity"
        ],
        "type": "object",
        "properties": {
          "skuPrice": {
            "type": "number",
            "nullable": true,
            "description": "The stored sku price of this item",
            "readOnly": true,
            "example": 5.9
          },
          "id": {
            "type": "string",
            "nullable": true,
            "description": "The unique ID of the item.",
            "example": "33e0418f-3d56-4360-ba03-18fc5f8844a3"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the item as displayed to the customer.",
            "example": "Juicy Cheeseburger"
          },
          "quantity": {
            "minimum": 1,
            "type": "integer",
            "description": "The quantity of the item ordered by the customer.",
            "format": "int32",
            "example": 1
          },
          "note": {
            "type": "string",
            "nullable": true,
            "description": "An optional item-level note provided by the customer.",
            "example": "Please cook to well done!"
          },
          "categoryId": {
            "type": "string",
            "nullable": true,
            "description": "The unique ID of the category of this item.",
            "example": "303de078-870d-4349-928b-946869d4d69b"
          },
          "categoryName": {
            "type": "string",
            "nullable": true,
            "description": "The name of the category of this item.",
            "example": "Burgers"
          },
          "price": {
            "type": "number",
            "nullable": true,
            "description": "The price of the sold item.",
            "example": 5.9
          },
          "modifiers": {
            "type": "array",
            "nullable": true,
            "description": "Modifiers to the base item.",
            "items": {
              "$ref": "#/components/schemas/ItemModifier"
            }
          }
        }
      },
      "PersonalIdentifiers": {
        "type": "object",
        "nullable": true,
        "properties": {
          "taxIdentificationNumber": {
            "type": "string",
            "nullable": true,
            "description": "Person tax identification number.",
            "example": 1234567890
          }
        },
        "description": "The person's personal identifiers (e.g. tax identification number)."
      },
      "Person": {
        "type": "object",
        "nullable": true,
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The person's name as it should be displayed.",
            "example": "Jane Doe"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "description": "The person's phone number.",
            "example": "+1-555-555-5555"
          },
          "phoneCode": {
            "type": "string",
            "nullable": true,
            "description": "A code or extension of the phone number.",
            "example": "111 11 111"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "The person's email address.",
            "example": "email@email.com"
          },
          "personalIdentifiers": {
            "$ref": "#/components/schemas/PersonalIdentifiers"
          }
        },
        "description": "The recipient information."
      },
      "Courier": {
        "required": [
          "name"
        ],
        "type": "object",
        "nullable": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "The person's name as it should be displayed.",
            "example": "Jane Doe"
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number.",
            "example": "+1-555-555-5555"
          },
          "phoneCode": {
            "type": "string",
            "nullable": true,
            "description": "A code or extension of the phone number.",
            "example": "111 11 111"
          },
          "email": {
            "type": "string",
            "description": "The person's email address.",
            "example": "email@email.com"
          },
          "personalIdentifiers": {
            "$ref": "#/components/schemas/PersonalIdentifiers"
          }
        },
        "description": "Details about the delivery courier."
      },
      "Location": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "nullable": true,
        "properties": {
          "latitude": {
            "type": "number",
            "description": "The latitude of the location.",
            "format": "double",
            "example": 38.8977
          },
          "longitude": {
            "type": "number",
            "description": "The longitude of the location.",
            "format": "double",
            "example": 77.0365
          }
        },
        "description": "Latitude and longitude of the address."
      },
      "Address": {
        "type": "object",
        "nullable": true,
        "properties": {
          "postalCode": {
            "type": "string",
            "description": "Postal code of the address.",
            "example": "20500"
          },
          "city": {
            "type": "string",
            "description": "The city/town portion of the address.",
            "example": "Washington"
          },
          "state": {
            "type": "string",
            "description": "Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, or a prefecture.",
            "example": "DC"
          },
          "countryCode": {
            "type": "string",
            "description": "CLDR country code. See http://cldr.unicode.org/",
            "example": "US"
          },
          "addressLines": {
            "type": "array",
            "nullable": true,
            "description": "Address lines (e.g. street, PO Box, or company name).",
            "example": [
              "1600 Pennsylvania Avenue NW"
            ],
            "items": {
              "type": "string"
            }
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "description": "Order delivery address."
      },
      "DeliveryInfo": {
        "type": "object",
        "nullable": true,
        "properties": {
          "courier": {
            "$ref": "#/components/schemas/Courier"
          },
          "destination": {
            "$ref": "#/components/schemas/Address"
          },
          "licensePlate": {
            "type": "string",
            "nullable": true,
            "description": "License plate of a vehicle used by the courier.",
            "example": "ABC 123"
          },
          "makeModel": {
            "type": "string",
            "nullable": true,
            "description": "Make and model of a vehicle used by the courier.",
            "example": "Honda CR-V"
          },
          "lastKnownLocation": {
            "$ref": "#/components/schemas/Location"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "description": "Special delivery instructions, if any.",
            "example": "Gate code 123"
          }
        },
        "description": "Information on order's delivery process."
      },
      "FulfillmentInfo": {
        "type": "object",
        "nullable": true,
        "properties": {
          "pickupTime": {
            "type": "string",
            "nullable": true,
            "description": "Estimated time (in UTC) that the courier or customer will pick up the order.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "deliveryTime": {
            "type": "string",
            "nullable": true,
            "description": "Estimated time (in UTC) when the order is expected to be delivered. This should be filled in if FulfillmentMode is delivery.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "fulfillmentMode": {
            "type": "string",
            "description": "How an order is expected to be fulfilled.",
            "default": "DELIVERY",
            "enum": [
              "DELIVERY",
              "RESTAURANT_DELIVERY",
              "PICKUP",
              "DINE_IN"
            ]
          },
          "schedulingType": {
            "type": "string",
            "nullable": true,
            "description": "Describes whether this order should be cooked as soon as possible, or some time in the future. Please use the pickupTime and/or deliveryTime to indicate when. If no scheduling type is provided, we assume the order should be prepared as soon as possible.",
            "enum": [
              "ASAP",
              "FIXED_TIME"
            ]
          },
          "courierStatus": {
            "type": "string",
            "nullable": true,
            "description": "The status of the courier.",
            "enum": [
              "COURIER_ASSIGNED",
              "COURIER_ON_ROUTE_TO_PICKUP",
              "COURIER_ARRIVED",
              "COURIER_PICKED_UP_FOOD",
              "COURIER_COMPLETED"
            ]
          }
        },
        "description": "Information on order fulfillment."
      },
      "Order": {
        "required": [
          "currencyCode",
          "externalIdentifiers",
          "orderTotal",
          "status"
        ],
        "type": "object",
        "properties": {
          "externalIdentifiers": {
            "$ref": "#/components/schemas/OrderExternalIdentifiers"
          },
          "items": {
            "type": "array",
            "description": "Items ordered.",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "orderedAt": {
            "type": "string",
            "nullable": true,
            "description": "The date (in UTC) when the order was placed by the customer.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The 3-letter currency code (ISO 4217) to use for all monetary values in this order.",
            "example": "EUR"
          },
          "customer": {
            "$ref": "#/components/schemas/Person"
          },
          "customerNote": {
            "type": "string",
            "nullable": true,
            "description": "An order-level note provided by the customer.",
            "example": "Please include extra napkins!"
          },
          "status": {
            "type": "string",
            "description": "The status of the order.",
            "enum": [
              "NEW_ORDER",
              "CONFIRMED",
              "PICKED_UP",
              "CANCELED",
              "FULFILLED",
              "PREPARED",
              "REJECTED",
              "UNKNOWN"
            ]
          },
          "deliveryInfo": {
            "$ref": "#/components/schemas/DeliveryInfo"
          },
          "orderTotal": {
            "$ref": "#/components/schemas/OrderTotal"
          },
          "customerPayments": {
            "type": "array",
            "nullable": true,
            "description": "Details about the payments made by the customer.",
            "items": {
              "$ref": "#/components/schemas/CustomerPayment"
            }
          },
          "fulfillmentInfo": {
            "$ref": "#/components/schemas/FulfillmentInfo"
          }
        },
        "description": "An order placed by a customer."
      },
      "PosOrderCancelDetails": {
        "required": [
          "cancelSource"
        ],
        "type": "object",
        "properties": {
          "cancelSource": {
            "type": "string",
            "description": "Source of the order cancellation",
            "enum": [
              "CANCEL_SOURCE_UNKNOWN",
              "CANCEL_SOURCE_OPERATOR",
              "CANCEL_SOURCE_SERVICE_PROVIDER"
            ]
          }
        },
        "description": "Details about a canceled Pos order"
      },
      "PosOrderIssue": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The specific issues with this item",
            "enum": [
              "ORDER_ISSUE_UNKNOWN",
              "ORDER_ISSUE_MENU_RESOLUTION_FAILED",
              "ORDER_ISSUE_NO_SUPPORTED_POS",
              "ORDER_ISSUE_VALIDATION_ONLY",
              "ORDER_ISSUE_POS_VENDOR_ERROR",
              "ORDER_ISSUE_ORDER_DOCUMENT_INCOMPLETE",
              "ORDER_ISSUE_STORELINK_MISSING",
              "ORDER_ISSUE_CANCEL_FAILED"
            ]
          },
          "description": {
            "type": "string",
            "description": "A friendly description describing what went wrong"
          }
        },
        "description": "Issue codes for issues encountered when processing a POS order"
      },
      "PosItemIssue": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The error code indicating the type of error",
            "enum": [
              "ITEM_ISSUE_UNKNOWN",
              "ITEM_ISSUE_CUSTOMER_ITEM_MISMATCH",
              "ITEM_ISSUE_MENU_IMPORT_INCOMPLETE",
              "ITEM_ISSUE_NO_MENU_ENTITY_PATH",
              "ITEM_ISSUE_MULTIPLE_ENTITY_PATHS",
              "ITEM_ISSUE_MISSING_EXTERNAL_DATA_FOR_POS",
              "ITEM_ISSUE_ENTITY_PATH_INVALID",
              "ITEM_ISSUE_CATEGORY_MISSING",
              "ITEM_ISSUE_EXTERNAL_MODIFIER_GROUP_MISSING",
              "ITEM_ISSUE_INTERNAL_MODIFIER_GROUP_MISSING"
            ]
          },
          "description": {
            "type": "string",
            "description": "A friendly description describing what went wrong"
          }
        },
        "description": "A detailed issue encountered with this item or modifier"
      },
      "PosItemIssues": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "External id of the item"
          },
          "posItemIssues": {
            "type": "array",
            "description": "The specific issues with this item",
            "items": {
              "$ref": "#/components/schemas/PosItemIssue"
            }
          }
        },
        "description": "POS item or modifier issues"
      },
      "PosOrderIssues": {
        "type": "object",
        "properties": {
          "posOrderIssues": {
            "type": "array",
            "description": "The specific issues with this order",
            "items": {
              "$ref": "#/components/schemas/PosOrderIssue"
            }
          },
          "posItemIssues": {
            "type": "array",
            "description": "The specific issues with individual items or modifiers on this orde",
            "items": {
              "$ref": "#/components/schemas/PosItemIssues"
            }
          }
        },
        "description": "POS Order issues"
      },
      "OrderWithPosInfo": {
        "required": [
          "order",
          "injectionState",
          "injectionEvent"
        ],
        "type": "object",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "injectionState": {
            "type": "string",
            "description": "Current Pos injection state",
            "enum": [
              "INJECTION_STATE_UNKNOWN",
              "INJECTION_PENDING",
              "INJECTION_SUCCEEDED",
              "INJECTION_FAILED_ATTEMPT",
              "INJECTION_MANUAL_INJECTION_SUCCEEDED",
              "INJECTION_MANUAL_INJECTION_REQUIRED",
              "INJECTION_SUCCEEDED_WITH_OPEN_ITEMS",
              "INJECTED_ORDER_CANCELED",
              "INJECTED_ORDER_CANCEL_FAILED",
              "INJECTED_ORDER_REJECTED",
              "INJECTED_ORDER_REJECT_FAILED",
              "RE_INJECTION_REQUESTED",
              "RE_INJECTION_PENDING"
            ]
          },
          "posOrderCancelDetails": {
            "nullable": true,
            "description": "If canceled - specific details about why this order was canceled",
            "$ref": "#/components/schemas/PosOrderCancelDetails"
          },
          "injectionEvent": {
            "type": "string",
            "description": "The order event that triggered order injection into Pos",
            "enum": [
              "INJECTION_EVENT_UNKNOWN",
              "INJECTION_EVENT_ORDER_CREATE",
              "INJECTION_EVENT_ORDER_ACCEPT",
              "INJECTION_EVENT_ORDER_IMPORT",
              "INJECTION_EVENT_ORDER_RE_INJECT"
            ]
          },
          "posOrderIssues": {
            "description": "Issues encountered with this Pos order",
            "$ref": "#/components/schemas/PosOrderIssues"
          }
        },
        "description": "An order placed by a customer with POS injection details"
      },
      "OrderFeed": {
        "required": [
          "orders"
        ],
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "description": "Array of Orders",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "offsetToken": {
            "type": "string",
            "description": "Opaque token used to fetch the following page. If not set, no more orders are available."
          }
        },
        "description": "An order feed response"
      },
      "UpsertFullMenuEventCallback": {
        "required": [
          "requestedToCreatedEntityIds"
        ],
        "type": "object",
        "properties": {
          "requestedToCreatedEntityIds": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "menuId",
              "type": "string"
            },
            "example": {
              "1ecd8573-c033-4a55-9d69-4e99bb0397b4": "ABCDEFGHIJK1234"
            },
            "description": "A map for entities created by the Upsert containing the IDs of the requested entities mapped to the IDs of entities created by the request. Our system will use the IDs returned in this map to send updates to these entities in future requests. **NOTE -** A empty map can be used on requestedToCreatedEntityIds to use the same menu IDs that were previously defined."
          }
        }
      },
      "Storefront_TimeRange": {
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "Start time of the range in 24 hour format.",
            "example": "08:00"
          },
          "endTime": {
            "type": "string",
            "description": "End time of the range in 24 hour format.",
            "example": "08:00"
          }
        },
        "description": "Time range in a given date."
      },
      "Storefront_RegularHours": {
        "required": [
          "dayOfWeek",
          "timeRanges"
        ],
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "type": "string",
            "description": "Day of the week.",
            "enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ]
          },
          "timeRanges": {
            "type": "array",
            "minItems": 1,
            "description": "Hours range applied to the provided day of the week",
            "items": {
              "$ref": "#/components/schemas/Storefront_TimeRange"
            }
          }
        },
        "description": "Describes the configuration of regular hours."
      },
      "Storefront_SpecialHours": {
        "required": [
          "date",
          "timeRanges",
          "specialHourType"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date the special hour configuration applies.",
            "format": "date",
            "example": "2021-10-01"
          },
          "timeRanges": {
            "type": "array",
            "minItems": 1,
            "description": "Hours range applied to configured date.",
            "items": {
              "$ref": "#/components/schemas/Storefront_TimeRange"
            }
          },
          "specialHourType": {
            "type": "string",
            "description": "Store state that should be applied during the configured special hour.",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          }
        },
        "description": "Describes the configuration of special store hours."
      },
      "StoreHours": {
        "type": "object",
        "nullable": true,
        "properties": {
          "regularHours": {
            "type": "array",
            "description": "List of regular hours configuration.",
            "items": {
              "$ref": "#/components/schemas/Storefront_RegularHours"
            }
          },
          "specialHours": {
            "type": "array",
            "nullable": true,
            "description": "List of special hours configuration.",
            "items": {
              "$ref": "#/components/schemas/Storefront_SpecialHours"
            }
          }
        },
        "description": "Represents store hours configuration with regular hours and special hours."
      },
      "StoreHoursConfiguration": {
        "required": [
          "timezone"
        ],
        "type": "object",
        "properties": {
          "deliveryHours": {
            "$ref": "#/components/schemas/StoreHours"
          },
          "pickupHours": {
            "$ref": "#/components/schemas/StoreHours"
          },
          "timezone": {
            "type": "string",
            "description": "The store time zone identifier. (e.g. America/New_York)"
          }
        },
        "description": "The current store hours configuration of a store."
      },
      "EventResultMetadata": {
        "type": "object",
        "nullable": true,
        "properties": {
          "operationStatus": {
            "type": "string",
            "description": "Status of the operation requested by an event.",
            "enum": [
              "SUCCEEDED",
              "INTERNAL_ERROR",
              "AUTHENTICATION_FAILURE",
              "AUTHORIZATION_FAILURE",
              "UNKNOWN_FAILURE",
              "INVALID_STORE_STATE",
              "INVALID_STORE_CONFIGURATION",
              "OPERATION_NOT_SUPPORTED",
              "IGNORED_ALREADY_IN_REQUESTED_STATE",
              "INVALID_REQUEST"
            ]
          },
          "additionalInformation": {
            "type": "string",
            "nullable": true,
            "description": "Additional details about the event result, if available."
          },
          "operationFinishedAt": {
            "type": "string",
            "description": "Time when the processing of the event finished.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Information about the result of a storefront event."
      },
      "StoreHoursConfigurationEventResult": {
        "type": "object",
        "properties": {
          "storeHoursConfiguration": {
            "$ref": "#/components/schemas/StoreHoursConfiguration"
          },
          "statusChangedAt": {
            "type": "string",
            "description": "The time when the store hours configuration changed.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "eventResultMetadata": {
            "$ref": "#/components/schemas/EventResultMetadata"
          }
        },
        "description": "The current store hours configuration."
      },
      "JobReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the job.",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "description": "The status of the job.",
            "enum": [
              "PENDING",
              "FAILED",
              "SUCCESS",
              "UNKNOWN"
            ]
          }
        },
        "description": "The job reference."
      },
      "MenuPublishJobState": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the menu publish.",
            "enum": [
              "PENDING",
              "FAILED",
              "SUCCESS",
              "UNKNOWN"
            ]
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "Only present if status is FAILED. Contains the error message returned by our menu systems."
          }
        },
        "description": "Only present if the MenuJobType is PUBLISH. Contains a map of MenuPublishTarget services to their corresponding statuses."
      },
      "MenuAsynchronousJob": {
        "type": "object",
        "properties": {
          "jobReference": {
            "$ref": "#/components/schemas/JobReference"
          },
          "jobType": {
            "type": "string",
            "description": "Type of job.",
            "enum": [
              "UPSERT",
              "PUBLISH",
              "UNKNOWN"
            ],
            "example": "PUBLISH"
          },
          "publishJobState": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "x-additionalPropertiesName": "menuPublishTarget",
              "$ref": "#/components/schemas/MenuPublishJobState"
            },
            "description": "Only present if the MenuJobType is PUBLISH. Contains a map of MenuPublishTarget services to their corresponding statuses.",
            "example": {
              "menuPublishTarget": {
                "status": "FAILED",
                "message": "Failed to publish menu due to error ..."
              }
            }
          }
        },
        "description": "The job created to process the menu request."
      },
      "HourInterval": {
        "type": "object",
        "properties": {
          "day": {
            "type": "string",
            "description": "Day of the week.",
            "example": "Monday",
            "enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ]
          },
          "fromHour": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer",
            "description": "Beginning hour of interval.",
            "format": "int32",
            "example": 8
          },
          "fromMinute": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer",
            "description": "Beginning minute of interval.",
            "format": "int32",
            "example": 0
          },
          "toHour": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer",
            "description": "Ending hour of interval.",
            "format": "int32",
            "example": 20
          },
          "toMinute": {
            "maximum": 59,
            "minimum": 0,
            "type": "integer",
            "description": "Ending minute of interval.",
            "format": "int32",
            "example": 45
          }
        },
        "description": "Represents the beginning and ending of operating time for a menu specific to a Day."
      },
      "Hours": {
        "required": [
          "intervals"
        ],
        "type": "object",
        "properties": {
          "intervals": {
            "type": "array",
            "minItems": 1,
            "description": "List of HourIntervals.",
            "items": {
              "$ref": "#/components/schemas/HourInterval"
            }
          }
        },
        "description": "Hours are represented as a list of HourIntervals."
      },
      "Menu_POS": {
        "title": "All Menus for the store, indexed by ID",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Menu.",
            "example": "Tasty BBQ"
          },
          "categoryIds": {
            "type": "array",
            "default": [],
            "description": "Identifiers of the categories within this Menu.",
            "items": {
              "type": "string"
            }
          },
          "fulfillmentModes": {
            "type": "array",
            "default": [],
            "description": "The ways in which this menu may be fulfilled. If no values are specified, it is assumed that all fulfillment types are allowed.",
            "items": {
              "type": "string",
              "description": "How an item from a menu is allowed to be fulfilled when ordered by a user.",
              "enum": [
                "DELIVERY",
                "PICK_UP",
                "DINE_IN"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "Internal identifier for Menu.",
            "example": "ff6dd693-5e55-4a92-a359-ea61b23ed423"
          },
          "description": {
            "type": "string",
            "description": "Description of the Menu.",
            "example": "Cooking up BBQ deliciousness from around the globe!"
          },
          "hours": {
            "$ref": "#/components/schemas/Hours"
          }
        },
        "description": "A menu for a store."
      },
      "ItemStatus": {
        "required": [
          "saleStatus"
        ],
        "type": "object",
        "properties": {
          "saleStatus": {
            "type": "string",
            "description": "The sale status of the item.",
            "example": "TEMPORARILY_NOT_FOR_SALE",
            "enum": [
              "FOR_SALE",
              "INDEFINITELY_NOT_FOR_SALE",
              "TEMPORARILY_NOT_FOR_SALE"
            ]
          },
          "suspendedUntil": {
            "type": "string",
            "nullable": true,
            "description": "ISO-8601 timestamp representing the time the saleStatus value is supposed to change to FOR_SALE. Set only when current saleStatus value is TEMPORARILY_NOT_FOR_SALE. E.g.: 2020-11-23T21:33:51Z, 2007-12-03T10:15:30+01:00",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Represents whether an Item is for sale, indefinitely not for sale, or not for sale until a specific time."
      },
      "Money": {
        "required": [
          "amount",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
            "example": "EUR"
          },
          "amount": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "number",
            "description": "Amount value.",
            "example": 25.21
          }
        },
        "description": "Money amount.",
        "example": 25.21
      },
      "OverrideRule": {
        "required": [
          "externalServiceSlug"
        ],
        "type": "object",
        "properties": {
          "externalServiceSlug": {
            "type": "string",
            "description": "The service slug for which this rule should apply. E.g.: If externalServiceSlug is UberEats, then the priceOverride should be applied to UberEats.",
            "example": "ubereats"
          }
        },
        "description": "Override rule for when to apply price overrides"
      },
      "ItemPriceOverride": {
        "required": [
          "amount",
          "currencyCode",
          "rules"
        ],
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "minItems": 1,
            "description": "Override rules for when this price override should be applied.",
            "items": {
              "$ref": "#/components/schemas/OverrideRule"
            }
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
            "example": "EUR"
          },
          "amount": {
            "type": "number",
            "description": "Amount the Item costs",
            "example": 25.21
          }
        },
        "description": "Price override for an item"
      },
      "MenuItem_POS": {
        "title": "All Items for the store, indexed by ID",
        "required": [
          "id",
          "name",
          "photoIds",
          "price",
          "status"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of this Item",
            "example": "Bagel"
          },
          "description": {
            "type": "string",
            "description": "Description of this Item",
            "example": "Delicious bagel!"
          },
          "modifierGroupIds": {
            "type": "array",
            "default": [],
            "description": "Identifiers of each ModifierGroup within this Item.",
            "items": {
              "type": "string",
              "example": "7152ee6e-e941-45c1-9008-2e306b479114"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ItemStatus"
          },
          "price": {
            "$ref": "#/components/schemas/Money"
          },
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "Internal identifier of this Item.",
            "example": "faa4c79f-480d-4de1-bc34-5fb74ef082ef"
          },
          "photoIds": {
            "type": "array",
            "description": "A list of Photo references associated with the Item.",
            "items": {
              "type": "string"
            }
          },
          "priceOverrides": {
            "type": "array",
            "nullable": true,
            "description": "Specify price overrides for different service slugs.",
            "items": {
              "$ref": "#/components/schemas/ItemPriceOverride"
            }
          }
        },
        "description": "Items are sold on the Menu. Modifiers to items are items themselves and their relationship is defined by ModifierGroup."
      },
      "Photo": {
        "title": "All photos for the store, indexed by ID",
        "required": [
          "contentType",
          "fileName",
          "id",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the photo.",
            "example": "https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png"
          },
          "fileName": {
            "type": "string",
            "description": "File name",
            "example": "image.jpg"
          },
          "id": {
            "type": "string",
            "description": "Identifier of the Photo.",
            "example": "e9174f75-a293-4908-bba7-9db69871ad81"
          },
          "contentType": {
            "type": "string",
            "description": "The MIME type of the file.",
            "example": "image/jpeg, image/png"
          }
        },
        "description": "All data required to represent a Photo for an entity in menus."
      },
      "Category": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Category.",
            "example": "Drinks"
          },
          "description": {
            "type": "string",
            "description": "Description of Category.",
            "example": "All drink items served up nice and fresh!"
          },
          "itemIds": {
            "type": "array",
            "default": [],
            "description": "All items in the category.",
            "items": {
              "type": "string"
            },
            "example": [
              "fa4f0192-4c4e-4455-9db8-61d428c34969"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier that exists in the third party system. During a menu publish event, uuidV4 ids will be generated for new entities that do not yet exist in the internal menu.",
            "example": "b01485b0-034a-47c5-8a0a-0eeca08bf994"
          }
        },
        "description": "Categories contain a list of Item references."
      },
      "ModifierGroup": {
        "title": "All ModifierGroups for the Store, indexed by ID",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of ModifierGroup.",
            "example": "Choose your type of bagel"
          },
          "minimumSelections": {
            "minimum": 0,
            "type": "integer",
            "description": "Minimum number of selections customers can make in this ModifierGroup. 0 means no min limits.",
            "format": "int32"
          },
          "maximumSelections": {
            "minimum": 0,
            "type": "integer",
            "description": "Maximum number of selections customers can make in this ModifierGroup. 0 means no max limits.",
            "format": "int32"
          },
          "maxPerModifierSelectionQuantity": {
            "minimum": 0,
            "default": 1,
            "type": "integer",
            "description": "Maximum number of selections customers can make for each modifier item in this ModifierGroup. 0 means there is no limit to how many times they can select a single modifier item. If not specified, a value of 1 will be used as the default value.",
            "format": "int32"
          },
          "itemIds": {
            "type": "array",
            "default": [],
            "description": "Identifiers of each Item within this ModifierGroup.",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "The identifier that exists in the third party system. During a menu publish event, uuidV4 ids will be generated for new entities that do not yet exist in the internal menu.",
            "example": "da0e4e94-5670-4175-897a-3b7dde45bed5"
          }
        },
        "description": "Items are sold on the menu. Modifiers to items are items themselves and their relationship is defined by ModifierGroup."
      },
      "Menus": {
        "required": [
          "categories",
          "modifierGroups",
          "photos"
        ],
        "type": "object",
        "properties": {
          "menus": {
            "title": "All Menus for the store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "menuId",
              "$ref": "#/components/schemas/Menu_POS"
            },
            "example": {
              "ff6dd693-5e55-4a92-a359-ea61b23ed423": {
                "id": "ff6dd693-5e55-4a92-a359-ea61b23ed423",
                "name": "Tasty BBQ",
                "categoryIds": [
                  "b01485b0-034a-47c5-8a0a-0eeca08bf994"
                ],
                "fulfillmentModes": [
                  "DELIVERY"
                ],
                "description": "Cooking up BBQ deliciousness from around the globe!",
                "hours": {
                  "intervals": [
                    {
                      "day": "MONDAY",
                      "fromHour": 7,
                      "fromMinute": 30,
                      "toHour": 22,
                      "toMinute": 0
                    }
                  ]
                }
              }
            }
          },
          "items": {
            "title": "All Items for the store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "itemId",
              "$ref": "#/components/schemas/MenuItem_POS"
            },
            "example": {
              "fa4f0192-4c4e-4455-9db8-61d428c34969": {
                "id": "fa4f0192-4c4e-4455-9db8-61d428c34969",
                "name": "Canned Coke",
                "description": "Best soda pop ever made",
                "price": {
                  "currencyCode": "USD",
                  "amount": 7.65
                },
                "status": {
                  "saleStatus": "FOR_SALE"
                },
                "modifierGroupIds": [
                  "f4c69056-3ae3-4517-9294-5ceec8df5f81"
                ],
                "photoIds": [
                  "c75d9460-5d48-423d-8d01-f825fd5b1672"
                ],
                "priceOverrides": [
                  {
                    "rules": [
                      {
                        "externalServiceSlug": "ubereats"
                      }
                    ],
                    "currencyCode": "USD",
                    "amount": 7
                  }
                ]
              }
            }
          },
          "photos": {
            "title": "All photos for the store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "photoId",
              "$ref": "#/components/schemas/Photo"
            },
            "example": {
              "c75d9460-5d48-423d-8d01-f825fd5b1672": {
                "id": "c75d9460-5d48-423d-8d01-f825fd5b1672",
                "fileName": "c75d9460-5d48-423d-8d01-f825fd5b1672.jpeg",
                "contentType": "image/jpeg",
                "url": "https://example.com/photos/c75d9460-5d48-423d-8d01-f825fd5b1672.jpeg"
              }
            }
          },
          "categories": {
            "title": "All Categories for the store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "categoryId",
              "$ref": "#/components/schemas/Category"
            },
            "example": {
              "b01485b0-034a-47c5-8a0a-0eeca08bf994": {
                "name": "Drinks",
                "description": "All drink items served up nice and fresh!",
                "id": "b01485b0-034a-47c5-8a0a-0eeca08bf994",
                "itemIds": [
                  "fa4f0192-4c4e-4455-9db8-61d428c34969"
                ]
              }
            }
          },
          "modifierGroups": {
            "title": "All ModifierGroups for the Store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "modifierGroupId",
              "$ref": "#/components/schemas/ModifierGroup"
            },
            "example": {
              "f4c69056-3ae3-4517-9294-5ceec8df5f81": {
                "id": "f4c69056-3ae3-4517-9294-5ceec8df5f81",
                "name": "Add Straw",
                "description": "Add Straw",
                "minimumSelections": 0,
                "maximumSelections": 1,
                "itemIds": [
                  "fa4f0192-4c4e-4455-9db8-61d428c34969"
                ]
              }
            }
          }
        },
        "description": "All menus associated with a store."
      },
      "ItemUpdateRequest": {
        "title": "All Items for the store, indexed by ID",
        "required": [
          "id",
          "name",
          "price",
          "status"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of this Item",
            "example": "Bagel"
          },
          "description": {
            "type": "string",
            "description": "Description of this Item",
            "example": "Delicious bagel!"
          },
          "modifierGroupIds": {
            "type": "array",
            "default": [],
            "description": "Identifiers of each ModifierGroup within this Item.",
            "items": {
              "type": "string",
              "example": "7152ee6e-e941-45c1-9008-2e306b479114"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ItemStatus"
          },
          "price": {
            "$ref": "#/components/schemas/Money"
          },
          "id": {
            "type": "string",
            "description": "Identifier of this Item.",
            "example": "faa4c79f-480d-4de1-bc34-5fb74ef082ef"
          },
          "priceOverrides": {
            "type": "array",
            "nullable": true,
            "description": "Specify price overrides for different service slugs.",
            "items": {
              "$ref": "#/components/schemas/ItemPriceOverride"
            }
          },
          "photoUrls": {
            "type": "array",
            "nullable": true,
            "description": "List of photoUrls to associate with the Item. This is used only for POST/PUT requests.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Items are sold on the Menu. Modifiers to items are items themselves and their relationship is defined by ModifierGroup."
      },
      "ModifierGroupUpdateRequest": {
        "title": "All ModifierGroups for the Store, indexed by ID",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of ModifierGroup.",
            "example": "Choose your type of bagel"
          },
          "minimumSelections": {
            "minimum": 0,
            "type": "integer",
            "description": "Minimum number of selections customers can make in this ModifierGroup. 0 means no min limits.",
            "format": "int32"
          },
          "maximumSelections": {
            "minimum": 0,
            "type": "integer",
            "description": "Maximum number of selections customers can make in this ModifierGroup. 0 means no max limits.",
            "format": "int32"
          },
          "maxPerModifierSelectionQuantity": {
            "minimum": 0,
            "type": "integer",
            "description": "Maximum number of selections customers can make for each modifier item in this ModifierGroup. 0 means there is no limit to how many times they can select a single modifier item. If not specified, a value of 1 will be used as the default value.",
            "format": "int32"
          },
          "itemIds": {
            "type": "array",
            "default": [],
            "description": "Identifiers of each Item within this ModifierGroup.",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "Identifier for ModifierGroup.",
            "example": "db5740de-429c-4f06-b264-3d41dce6d8c3"
          },
          "description": {
            "type": "string",
            "description": "Description for this ModifierGroup.",
            "example": "Choose any of these delicious types of bagels"
          }
        },
        "description": "Items are sold on the menu. Modifiers to items are items themselves and their relationship is defined by ModifierGroup."
      },
      "MenusUpsertRequest": {
        "required": [
          "categories",
          "menus",
          "modifierGroups"
        ],
        "type": "object",
        "properties": {
          "menus": {
            "title": "All Menus for the store, indexed by ID",
            "type": "object",
            "minProperties": 1,
            "additionalProperties": {
              "x-additionalPropertiesName": "menuId",
              "$ref": "#/components/schemas/Menu_POS"
            },
            "example": {
              "ff6dd693-5e55-4a92-a359-ea61b23ed423": {
                "id": "ff6dd693-5e55-4a92-a359-ea61b23ed423",
                "name": "Tasty BBQ",
                "categoryIds": [
                  "b01485b0-034a-47c5-8a0a-0eeca08bf994"
                ],
                "fulfillmentModes": [
                  "DELIVERY"
                ],
                "description": "Cooking up BBQ deliciousness from around the globe!",
                "hours": {
                  "intervals": [
                    {
                      "day": "MONDAY",
                      "fromHour": 7,
                      "fromMinute": 30,
                      "toHour": 22,
                      "toMinute": 0
                    }
                  ]
                }
              }
            }
          },
          "items": {
            "title": "All Items for the store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "itemId",
              "$ref": "#/components/schemas/ItemUpdateRequest"
            },
            "example": {
              "fa4f0192-4c4e-4455-9db8-61d428c34969": {
                "id": "fa4f0192-4c4e-4455-9db8-61d428c34969",
                "name": "Canned Coke",
                "description": "Best soda pop ever made",
                "price": {
                  "currencyCode": "USD",
                  "amount": 7.65
                },
                "status": {
                  "saleStatus": "FOR_SALE"
                },
                "modifierGroupIds": [
                  "f4c69056-3ae3-4517-9294-5ceec8df5f81"
                ],
                "photoUrls": [
                  "https://example.com/photos/c75d9460-5d48-423d-8d01-f825fd5b1672.jpeg"
                ],
                "priceOverrides": [
                  {
                    "rules": [
                      {
                        "externalServiceSlug": "ubereats"
                      }
                    ],
                    "currencyCode": "USD",
                    "amount": 7
                  }
                ]
              }
            }
          },
          "categories": {
            "title": "All Categories for the store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "categoryId",
              "$ref": "#/components/schemas/Category"
            },
            "example": {
              "b01485b0-034a-47c5-8a0a-0eeca08bf994": {
                "name": "Drinks",
                "description": "All drink items served up nice and fresh!",
                "id": "b01485b0-034a-47c5-8a0a-0eeca08bf994",
                "itemIds": [
                  "fa4f0192-4c4e-4455-9db8-61d428c34969"
                ]
              }
            }
          },
          "modifierGroups": {
            "title": "All ModifierGroups for the Store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "modifierGroupId",
              "$ref": "#/components/schemas/ModifierGroupUpdateRequest"
            },
            "example": {
              "f4c69056-3ae3-4517-9294-5ceec8df5f81": {
                "id": "f4c69056-3ae3-4517-9294-5ceec8df5f81",
                "name": "Add Straw",
                "description": "Add Straw",
                "minimumSelections": 0,
                "maximumSelections": 1,
                "itemIds": [
                  "fa4f0192-4c4e-4455-9db8-61d428c34969"
                ]
              }
            }
          }
        },
        "description": "All menus associated with a store."
      },
      "RequiredEventResultMetadata": {
        "type": "object",
        "properties": {
          "operationStatus": {
            "type": "string",
            "description": "Status of the operation requested by an event.",
            "enum": [
              "SUCCEEDED",
              "INTERNAL_ERROR",
              "AUTHENTICATION_FAILURE",
              "AUTHORIZATION_FAILURE",
              "UNKNOWN_FAILURE",
              "INVALID_STORE_STATE",
              "INVALID_STORE_CONFIGURATION",
              "OPERATION_NOT_SUPPORTED",
              "IGNORED_ALREADY_IN_REQUESTED_STATE",
              "INVALID_REQUEST"
            ]
          },
          "additionalInformation": {
            "type": "string",
            "nullable": true,
            "description": "Additional details about the event result, if available."
          },
          "operationFinishedAt": {
            "type": "string",
            "description": "Time when the processing of the event finished.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Information about the result of a storefront event."
      },
      "UnpauseStoreEventResult": {
        "type": "object",
        "properties": {
          "eventResultMetadata": {
            "$ref": "#/components/schemas/RequiredEventResultMetadata"
          }
        },
        "description": "Result of an event that requested to unpause a store."
      },
      "MenuPublishRequest": {
        "type": "object",
        "properties": {
          "menuPublishTargets": {
            "type": "array",
            "description": "MenuPublishTargets to publish to.",
            "example": [
              "doordash",
              "ubereats"
            ],
            "items": {
              "type": "string",
              "description": "MenuPublishTargets to publish to.",
              "example": "[\"doordash\",\"ubereats\"]"
            }
          }
        }
      },
      "MenuPublishTarget": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of a menu publish target.",
            "enum": [
              "READY",
              "PUBLISH_IN_PROGRESS",
              "ERROR"
            ]
          }
        },
        "description": "Map of MenuPublishTarget names to their targets. The target can only be published to if the status is READY."
      },
      "MenuPublishResponseMenuPublishTargets": {
        "type": "object",
        "nullable": true,
        "properties": {
          "menuPublishTargets": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "menuPublishTargetName",
              "$ref": "#/components/schemas/MenuPublishTarget"
            },
            "description": "Map of MenuPublishTarget names to their targets. The target can only be published to if the status is READY.",
            "example": {
              "menuPublishTargetName": {
                "status": "READY"
              }
            }
          }
        },
        "description": "Only present if the request fails. Meant to help debugging why the request failed."
      },
      "MenuPublishResponse": {
        "type": "object",
        "properties": {
          "requestSubmitted": {
            "type": "boolean",
            "description": "Whether the request was submitted or not."
          },
          "jobId": {
            "type": "string",
            "nullable": true,
            "description": "Only present if the request succeeds. Job ID to check on the status with the MenuAsyncJob endpoint.",
            "format": "uuid"
          },
          "menuPublishTargets": {
            "$ref": "#/components/schemas/MenuPublishResponseMenuPublishTargets"
          }
        }
      },
      "OrderReference": {
        "required": [
          "externalIdentifiers",
          "storeId"
        ],
        "type": "object",
        "properties": {
          "externalIdentifiers": {
            "$ref": "#/components/schemas/OrderExternalIdentifiers"
          },
          "storeId": {
            "type": "string",
            "description": "The identifier of the store."
          }
        },
        "description": "An order reference."
      },
      "POSOrderStatusUpdateRequest": {
        "required": [
          "orderExternalIdentifiers",
          "orderStatus"
        ],
        "type": "object",
        "properties": {
          "orderStatus": {
            "type": "string",
            "description": "The requested status to transition the order to.",
            "enum": [
              "CONFIRMED",
              "CANCELED"
            ]
          },
          "orderExternalIdentifiers": {
            "$ref": "#/components/schemas/OrderIdentifier"
          }
        },
        "description": "The request to change an order status."
      },
      "TimeRange": {
        "required": [
          "end",
          "start"
        ],
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "Start time of the range in 24 hour format.",
            "example": "08:00"
          },
          "end": {
            "type": "string",
            "description": "End time of the range in 24 hour format.",
            "example": "22:00"
          }
        },
        "description": "Time range in a given date."
      },
      "RegularHours": {
        "required": [
          "days",
          "timeRanges"
        ],
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "description": "The day of the week this configuration applies.",
            "items": {
              "type": "string",
              "description": "Day of the week.",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            }
          },
          "timeRanges": {
            "type": "array",
            "description": "Hours range applied to the provided day of the week",
            "items": {
              "$ref": "#/components/schemas/TimeRange"
            }
          }
        },
        "description": "Describes the configuration of regular hours."
      },
      "SpecialHours": {
        "required": [
          "date",
          "timeRanges",
          "type"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date the special hour configuration applies.",
            "format": "date",
            "example": "2021-10-01"
          },
          "timeRanges": {
            "type": "array",
            "minItems": 1,
            "description": "Hours range applied to configured date.",
            "items": {
              "$ref": "#/components/schemas/TimeRange"
            }
          },
          "type": {
            "type": "string",
            "description": "Store state that should be applied during the configured special hour.",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          }
        },
        "description": "Describes the configuration of special store hours."
      },
      "HoursData": {
        "required": [
          "regularHours",
          "specialHours",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "timeZone": {
            "type": "string",
            "description": "TimeZone of all times under it. (https://www.joda.org/joda-time/timezones.html)",
            "format": "timezone-id",
            "example": "America/Los_Angeles"
          },
          "regularHours": {
            "type": "array",
            "description": "List of regular hours configuration.",
            "items": {
              "$ref": "#/components/schemas/RegularHours"
            }
          },
          "specialHours": {
            "type": "array",
            "description": "List of special hours configuration, for occasions like Christmas, Thanksgiving, or any other holidays.",
            "items": {
              "$ref": "#/components/schemas/SpecialHours"
            }
          }
        },
        "description": "Represents hours configuration with regular hours and special hours."
      },
      "Menu_3PD": {
        "title": "All Menus for the store, indexed by ID",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Menu.",
            "example": "Tasty BBQ"
          },
          "categoryIds": {
            "type": "array",
            "default": [],
            "description": "Identifiers of the categories within this Menu.",
            "items": {
              "type": "string"
            }
          },
          "fulfillmentModes": {
            "type": "array",
            "default": [],
            "description": "The ways in which this menu may be fulfilled. If no values are specified, it is assumed that all fulfillment types are allowed.",
            "items": {
              "type": "string",
              "description": "How an item from a menu is allowed to be fulfilled when ordered by a user.",
              "enum": [
                "DELIVERY",
                "PICK_UP",
                "DINE_IN"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "The identifier that exists in the third party system. During a menu publish event, uuidV4 ids will be generated for new entities that do not yet exist in the internal menu.",
            "example": "da0e4e94-5670-4175-897a-3b7dde45bed5"
          },
          "hoursData": {
            "$ref": "#/components/schemas/HoursData"
          }
        },
        "description": "A Menu for a store."
      },
      "OverrideRule_3PD": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "Specification for rules to apply overrides (e.g. PriceOverride).",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "EntityPathOverrideRule": "#/components/schemas/EntityPathOverrideRule",
            "FulfillmentModeOverrideRule": "#/components/schemas/FulfillmentModeOverrideRule"
          }
        }
      },
      "EntityPathOverrideRule": {
        "required": [
          "entityIds"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OverrideRule_3PD"
          },
          {
            "type": "object",
            "properties": {
              "entityIds": {
                "type": "array",
                "description": "EntityPath for this rule.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "FulfillmentModeOverrideRule": {
        "required": [
          "fulfillmentMode"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OverrideRule_3PD"
          },
          {
            "type": "object",
            "properties": {
              "fulfillmentMode": {
                "type": "string",
                "description": "The fulfillment mode for which the override rule should apply."
              }
            }
          }
        ]
      },
      "PriceOverride": {
        "required": [
          "price",
          "rules"
        ],
        "type": "object",
        "properties": {
          "price": {
            "$ref": "#/components/schemas/Money"
          },
          "rules": {
            "type": "array",
            "minItems": 1,
            "description": "Override rules for when this price override should be applied.",
            "items": {
              "$ref": "#/components/schemas/OverrideRule_3PD"
            }
          }
        },
        "description": "Price override for an item"
      },
      "MenuItem_3PD": {
        "title": "All Items for the store, indexed by ID",
        "required": [
          "id",
          "name",
          "photoIds",
          "price",
          "priceOverrides",
          "status"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of this Item",
            "example": "Bagel"
          },
          "description": {
            "type": "string",
            "description": "Description of this Item",
            "example": "Delicious bagel!"
          },
          "modifierGroupIds": {
            "type": "array",
            "default": [],
            "description": "Identifiers of each ModifierGroup within this Item.",
            "items": {
              "type": "string",
              "example": "7152ee6e-e941-45c1-9008-2e306b479114"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ItemStatus"
          },
          "price": {
            "$ref": "#/components/schemas/Money"
          },
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "The identifier that exists in the third party system. During a menu publish event, uuidV4 ids will be generated for new entities that do not yet exist in the internal menu.",
            "example": "da0e4e94-5670-4175-897a-3b7dde45bed5"
          },
          "photoIds": {
            "type": "array",
            "description": "A list of Photo references associated with the Item.",
            "items": {
              "type": "string"
            }
          },
          "priceOverrides": {
            "type": "array",
            "description": "Specify price overrides.",
            "items": {
              "$ref": "#/components/schemas/PriceOverride"
            }
          }
        },
        "description": "Items are sold on the Menu. Modifiers to items are items themselves and their relationship is defined by ModifierGroup."
      },
      "MenuData": {
        "required": [
          "categories",
          "items",
          "menus",
          "modifierGroups",
          "photos"
        ],
        "type": "object",
        "properties": {
          "menus": {
            "title": "All Menus for the store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "menuId",
              "$ref": "#/components/schemas/Menu_3PD"
            },
            "example": {
              "ff6dd693-5e55-4a92-a359-ea61b23ed423": {
                "id": "ff6dd693-5e55-4a92-a359-ea61b23ed423",
                "name": "Tasty BBQ",
                "categoryIds": [
                  "b01485b0-034a-47c5-8a0a-0eeca08bf994"
                ],
                "fulfillmentModes": [
                  "DELIVERY"
                ],
                "description": "Cooking up BBQ deliciousness from around the globe!",
                "hoursData": {
                  "timeZone": "America/Los_Angeles",
                  "regularHours": [
                    {
                      "days": [
                        "MONDAY",
                        "TUESDAY",
                        "WEDNESDAY",
                        "THURSDAY",
                        "FRIDAY"
                      ],
                      "timeRanges": [
                        {
                          "start": "08:00",
                          "end": "22:00"
                        }
                      ]
                    }
                  ],
                  "specialHours": [
                    {
                      "date": "2021-12-31",
                      "timeRanges": [
                        {
                          "start": "08:00",
                          "end": "22:00"
                        }
                      ],
                      "type": "CLOSED"
                    }
                  ]
                }
              }
            }
          },
          "categories": {
            "title": "All Categories for the store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "categoryId",
              "$ref": "#/components/schemas/Category"
            },
            "example": {
              "b01485b0-034a-47c5-8a0a-0eeca08bf994": {
                "name": "Drinks",
                "description": "All drink items served up nice and fresh!",
                "id": "b01485b0-034a-47c5-8a0a-0eeca08bf994",
                "itemIds": [
                  "fa4f0192-4c4e-4455-9db8-61d428c34969"
                ]
              }
            }
          },
          "items": {
            "title": "All Items for the store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "itemId",
              "$ref": "#/components/schemas/MenuItem_3PD"
            },
            "example": {
              "fa4f0192-4c4e-4455-9db8-61d428c34969": {
                "id": "fa4f0192-4c4e-4455-9db8-61d428c34969",
                "name": "Canned Coke",
                "description": "Best soda pop ever made",
                "price": {
                  "currencyCode": "USD",
                  "amount": 7.65
                },
                "status": {
                  "saleStatus": "FOR_SALE"
                },
                "modifierGroupIds": [
                  "f4c69056-3ae3-4517-9294-5ceec8df5f81"
                ],
                "photoIds": [
                  "c75d9460-5d48-423d-8d01-f825fd5b1672"
                ],
                "priceOverrides": [
                  {
                    "rules": [
                      {
                        "externalServiceSlug": "ubereats"
                      }
                    ],
                    "currencyCode": "USD",
                    "amount": 7
                  }
                ]
              }
            }
          },
          "modifierGroups": {
            "title": "All ModifierGroups for the Store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "modifierGroupId",
              "$ref": "#/components/schemas/ModifierGroup"
            },
            "example": {
              "f4c69056-3ae3-4517-9294-5ceec8df5f81": {
                "id": "f4c69056-3ae3-4517-9294-5ceec8df5f81",
                "name": "Add Straw",
                "description": "Add Straw",
                "minimumSelections": 0,
                "maximumSelections": 1,
                "itemIds": [
                  "fa4f0192-4c4e-4455-9db8-61d428c34969"
                ]
              }
            }
          },
          "photos": {
            "title": "All photos for the store, indexed by ID",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "photoId",
              "$ref": "#/components/schemas/Photo"
            },
            "example": {
              "c75d9460-5d48-423d-8d01-f825fd5b1672": {
                "id": "c75d9460-5d48-423d-8d01-f825fd5b1672",
                "fileName": "c75d9460-5d48-423d-8d01-f825fd5b1672.jpeg",
                "contentType": "image/jpeg",
                "url": "https://example.com/photos/c75d9460-5d48-423d-8d01-f825fd5b1672.jpeg"
              }
            }
          }
        },
        "description": "MenuData contains all menu entities, and their relations."
      },
      "SendMenuEventCallback": {
        "required": [
          "menuData"
        ],
        "type": "object",
        "properties": {
          "menuData": {
            "$ref": "#/components/schemas/MenuData"
          }
        }
      },
      "PauseStoreEventResult": {
        "type": "object",
        "properties": {
          "closureId": {
            "type": "string",
            "description": "Id required to unpause a store, if available"
          },
          "eventResultMetadata": {
            "$ref": "#/components/schemas/RequiredEventResultMetadata"
          }
        },
        "description": "Result of an event that requested to pause a store."
      },
      "RequiredDeliveryInfo": {
        "type": "object",
        "properties": {
          "courier": {
            "$ref": "#/components/schemas/Courier"
          },
          "destination": {
            "$ref": "#/components/schemas/Address"
          },
          "licensePlate": {
            "type": "string",
            "nullable": true,
            "description": "License plate of a vehicle used by the courier.",
            "example": "ABC 123"
          },
          "makeModel": {
            "type": "string",
            "nullable": true,
            "description": "Make and model of a vehicle used by the courier.",
            "example": "Honda CR-V"
          },
          "lastKnownLocation": {
            "$ref": "#/components/schemas/Location"
          },
          "note": {
            "type": "string",
            "nullable": true,
            "description": "Special delivery instructions, if any.",
            "example": "Gate code 123"
          }
        },
        "description": "Information on order's delivery process."
      },
      "OrderDeliveryInfoUpdateRequest": {
        "required": [
          "deliveryInfo"
        ],
        "type": "object",
        "properties": {
          "deliveryInfo": {
            "$ref": "#/components/schemas/RequiredDeliveryInfo"
          }
        },
        "description": "The request to update an order delivery info status."
      },
      "Distance": {
        "type": "object",
        "nullable": true,
        "properties": {
          "unit": {
            "type": "string",
            "description": "Distance unit value.",
            "enum": [
              "KILOMETERS",
              "MILES"
            ]
          },
          "value": {
            "type": "number",
            "description": "Distance value."
          }
        },
        "description": "Delivery distance."
      },
      "DeliveryCost": {
        "type": "object",
        "properties": {
          "baseCost": {
            "type": "number",
            "format": "double",
            "description": "Base delivery cost value.",
            "example": 4.99
          },
          "extraCost": {
            "type": "number",
            "format": "double",
            "description": "Extra delivery cost value.",
            "example": 0.99
          }
        },
        "description": "Delivery cost details."
      },
      "FulfillmentPathEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Describes the entity name."
          },
          "type": {
            "type": "string",
            "description": "Type of entities in the fulfillment path.",
            "enum": [
              "FULFILLMENT_PROCESSOR",
              "INTERMEDIARY"
            ]
          }
        },
        "description": "Delivery distance."
      },
      "RequestDeliveryQuoteCallbackRequest": {
        "type": "object",
        "properties": {
          "minPickupDuration": {
            "type": "integer",
            "minimum": 0,
            "format": "int32",
            "description": "Minimum time required for courier to arrive at pickup location in minutes It is an estimation.",
            "example": 5
          },
          "maxPickupDuration": {
            "type": "integer",
            "nullable": true,
            "description": "Maximum time that the courier's arrival at pick up location can be delayed. If not provided, we will treat as if there is no limit. This value is an estimation and expressed in minutes.",
            "format": "int32",
            "example": 10
          },
          "deliveryDistance": {
            "$ref": "#/components/schemas/Distance"
          },
          "currencyCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
            "example": "EUR"
          },
          "cost": {
            "$ref": "#/components/schemas/DeliveryCost"
          },
          "provider": {
            "type": "string",
            "nullable": true,
            "description": "Delivery Service Provider Slug."
          },
          "fulfillmentPath": {
            "type": "array",
            "nullable": true,
            "description": "List of entities involved in the fulfillment processing path.",
            "items": {
              "$ref": "#/components/schemas/FulfillmentPathEntity"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "The time that the quote was create.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Delivery quote information."
      },
      "AcceptDeliveryCallbackRequest": {
        "type": "object",
        "properties": {
          "deliveryDistance": {
            "$ref": "#/components/schemas/Distance"
          },
          "currencyCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
            "example": "EUR"
          },
          "cost": {
            "$ref": "#/components/schemas/DeliveryCost"
          },
          "fulfillmentPath": {
            "type": "array",
            "nullable": true,
            "description": "List of entities involved in the fulfillment processing path.",
            "items": {
              "$ref": "#/components/schemas/FulfillmentPathEntity"
            }
          },
          "estimatedDeliveryTime": {
            "type": "string",
            "nullable": true,
            "description": "The time that the quote was create.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "estimatedPickupTime": {
            "type": "string",
            "nullable": true,
            "description": "The time that the quote was create.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "confirmedAt": {
            "type": "string",
            "description": "The time that the quote was create.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Delivery information."
      },
      "CancelDeliveryCallbackRequest": {
        "type": "object",
        "properties": {
          "canceledAt": {
            "type": "string",
            "description": "The time that the request was cancelled.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Cancellation result callback request."
      },
      "DeliveryStatus": {
        "type": "string",
        "description": "The status of the delivery.",
        "enum": [
          "REQUESTED",
          "ALLOCATED",
          "PICKED_UP",
          "COMPLETED",
          "CANCELED"
        ]
      },
      "DeliveryStatusUpdateRequest": {
        "type": "object",
        "properties": {
          "deliveryStatus": {
            "$ref": "#/components/schemas/DeliveryStatus"
          },
          "estimatedDeliveryTime": {
            "type": "string",
            "nullable": true,
            "description": "The time that the quote was create.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "estimatedPickupTime": {
            "type": "string",
            "nullable": true,
            "description": "The time that the quote was create.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "courier": {
            "$ref": "#/components/schemas/Person"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "createdAt": {
            "type": "string",
            "description": "The time that the quote was create.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Update delivery status request."
      },
      "EventCallbackError": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "Errors that occur processing the webhook, modeled after Google's gRPC error codes.",
            "enum": [
              "CANCELLED",
              "UNKNOWN",
              "INVALID_ARGUMENT",
              "FAILED_PRECONDITION",
              "DEADLINE_EXCEEDED",
              "NOT_FOUND",
              "PERMISSION_DENIED",
              "ALREADY_EXISTS",
              "RESOURCE_EXHAUSTED",
              "ABORTED",
              "OUT_OF_RANGE",
              "UNIMPLEMENTED",
              "INTERNAL",
              "UNAVAILABLE",
              "DATA_LOSS",
              "UNAUTHENTICATED"
            ]
          },
          "errorMessage": {
            "type": "string",
            "nullable": true,
            "description": "Additional information about the error."
          }
        },
        "description": "The error container for a processed callback."
      },
      "DeliveryQuote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "Delivery request ID."
          },
          "status": {
            "type": "string",
            "description": "Quote status.",
            "enum": [
              "AVAILABLE",
              "UNAVAILABLE"
            ]
          },
          "waitTimeOptions": {
            "type": "array",
            "nullable": true,
            "description": "Possible wait time durations in minutes",
            "items": {
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          "distance": {
            "$ref": "#/components/schemas/Distance"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
            "example": "USD"
          },
          "baseFee": {
            "type": "number",
            "nullable": true,
            "format": "double"
          },
          "extraFee": {
            "type": "number",
            "nullable": true,
            "format": "double"
          },
          "totalFee": {
            "type": "number",
            "nullable": true,
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/DeliveryCost"
          },
          "provider": {
            "type": "string",
            "nullable": true,
            "description": "Delivery Service Provider Slug."
          },
          "fulfillmentPath": {
            "type": "array",
            "nullable": true,
            "description": "List of entities involved in the fulfillment processing path.",
            "items": {
              "$ref": "#/components/schemas/FulfillmentPathEntity"
            }
          }
        },
        "description": "Delivery quote information."
      },
      "DeliveryQuoteOptions": {
        "type": "object",
        "properties": {
          "quotes": {
            "type": "array",
            "description": "List of currently available delivery quotes.",
            "items": {
              "$ref": "#/components/schemas/DeliveryQuote"
            }
          }
        },
        "description": "Available delivery quotes."
      },
      "AcceptDeliveryRequest": {
        "type": "object",
        "properties": {
          "quoteId": {
            "type": "string",
            "description": "Quote id from the requestQuote response."
          },
          "waitTime": {
            "type": "integer",
            "minimum": 0,
            "format": "int32",
            "description": "Wait time chosen for the delivery.",
            "example": 5
          }
        },
        "description": "Delivery acceptance details."
      },
      "POSFeedDelivery": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "nullable": true,
            "description": "Delivery Service Provider Slug."
          },
          "courier": {
            "$ref": "#/components/schemas/Courier"
          },
          "estimatedDeliveryTime": {
            "type": "string",
            "nullable": true,
            "description": "Estimated delivery time",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "estimatedPickupTime": {
            "type": "string",
            "nullable": true,
            "description": "Estimated pickup time",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "status": {
            "$ref": "#/components/schemas/DeliveryStatus"
          },
          "deliveryStatus": {
            "$ref": "#/components/schemas/DeliveryStatus"
          },
          "currencyCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
            "example": "EUR"
          },
          "baseFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "extraFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "totalFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "distance": {
            "$ref": "#/components/schemas/Distance"
          },
          "processedTime": {
            "type": "string",
            "nullable": true,
            "description": "Time that the delivery was accepted and confirmed.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Delivery information."
      },
      "CancelDeliveryResponse": {
        "type": "object",
        "properties": {
          "processedTime": {
            "type": "string",
            "nullable": true,
            "description": "Time that the delivery was canceled.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Details about a cancellation delivery request."
      },
      "StoreAvailabilityEventResult": {
        "type": "object",
        "properties": {
          "storeState": {
            "type": "string",
            "nullable": true,
            "description": "Represents the current state of a store.",
            "enum": [
              "OPEN",
              "OFF_HOUR",
              "SERVICE_PROVIDER_PAUSED",
              "OPERATOR_PAUSED",
              "SERVICE_PROVIDER_PAUSED_COURIERS_UNAVAILABLE",
              "STORE_UNAVAILABLE",
              "HOLIDAY_HOUR",
              "MENU_UNAVAILABLE",
              "SERVICE_PROVIDER_PAUSED_MISCONFIGURED",
              "OPEN_FOR_PICKUP_ONLY",
              "OPEN_FOR_DELIVERY_ONLY",
              "CLOSED_FOR_UNDETERMINED_REASON"
            ]
          },
          "statusChangedAt": {
            "type": "string",
            "nullable": true,
            "description": "The time when the store changed to the current state.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "eventResultMetadata": {
            "$ref": "#/components/schemas/EventResultMetadata"
          }
        },
        "description": "The current state of a store."
      },
      "PongObject": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string"
          },
          "currentTime": {
            "type": "string",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        }
      },
      "GenerateReportRequest": {
        "type": "object",
        "properties": {
          "reportType": {
            "type": "string",
            "description": "Type of report to generate",
            "example": "ORDER",
            "enum": [
              "ORDER"
            ]
          },
          "start": {
            "type": "string",
            "description": "Report start date",
            "format": "date",
            "example": "2021-10-01"
          },
          "end": {
            "type": "string",
            "description": "Report end date",
            "format": "date",
            "example": "2021-10-01"
          },
          "externalServiceSlugs": {
            "type": "array",
            "nullable": true,
            "description": "List of external service slugs to fetch orders from. Default to all services",
            "example": [
              "ubereats",
              "postmates"
            ],
            "items": {
              "type": "string",
              "description": "List of external service slugs to fetch orders from. Default to all services",
              "example": "[\"ubereats\",\"postmates\"]"
            }
          }
        },
        "description": "The request to generate a report."
      },
      "GenerateReportResponse": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string",
            "description": "id used to track the job created for generating report. Not used currently"
          }
        },
        "description": "The response to a generate report request"
      },
      "MenuPublishTargets": {
        "type": "object",
        "properties": {
          "menuPublishTargets": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "menuPublishTargetName",
              "$ref": "#/components/schemas/MenuPublishTarget"
            },
            "example": {
              "menuPublishTargetName": {
                "status": "READY"
              }
            },
            "description": "Map of MenuPublishTarget names to their targets. The target can only be published to if the status is READY."
          }
        }
      },
      "OAuthTokenGenerationRequest": {
        "required": [
          "grant_type",
          "scope"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "The ID of the client (also known as the Application ID).",
            "format": "uuid"
          },
          "client_secret": {
            "type": "string",
            "description": "The secret of the client."
          },
          "grant_type": {
            "type": "string",
            "description": "The OAuth2.0 grant types supported.",
            "enum": [
              "client_credentials"
            ]
          },
          "scope": {
            "type": "string",
            "description": "The scope to request, multiple scopes are passed delimited by a space character.",
            "example": "scope1 scope2"
          }
        },
        "description": "The entity to request a token, following the OAuth2.0 protocol."
      },
      "HydraToken": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "expires_in": {
            "type": "integer",
            "format": "int64"
          },
          "scope": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          }
        }
      },
      "MetadataObject": {
        "type": "object",
        "properties": {
          "storeId": {
            "type": "string",
            "description": "Identifier of the store."
          },
          "applicationId": {
            "type": "string",
            "description": "Identifier of the application."
          },
          "resourceId": {
            "type": "string",
            "description": "Identifier of the resource that this event refers to."
          },
          "payload": {
            "type": "object",
            "description": "Object containing details of the given event."
          },
          "resourceHref": {
            "type": "string",
            "description": "The full endpoint to fetch the details of the resource."
          }
        },
        "description": "Information about the event."
      },
      "EventNotification": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "Unique identifier of the event.",
            "format": "uuid"
          },
          "eventTime": {
            "type": "string",
            "description": "Date of event occurrence.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the event."
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataObject"
          }
        },
        "description": "Notification message sent on relevant events."
      },
      "IntentToCancelEvent": {
        "type": "object",
        "properties": {
          "externalIdentifiers": {
            "$ref": "#/components/schemas/OrderExternalIdentifiers"
          },
          "cancellationReason": {
            "type": "string",
            "description": "The reason for a cancellation.",
            "enum": [
              "REASON_UNKNOWN",
              "DUPLICATE_ORDER",
              "UNAVAILABLE_ITEM",
              "FRAUDULENT_EATER",
              "RESTAURANT_INTERNAL_ISSUE",
              "KITCHEN_CLOSED",
              "CUSTOMER_CALLED_TO_CANCEL",
              "CANNOT_COMPLETE_CUSTOMER_REQUEST",
              "RESTAURANT_TOO_BUSY",
              "UNACCEPTED_ORDER",
              "RESTAURANT_CANCELED",
              "AUTOMATICALLY_CANCELED",
              "LATE_DELIVERY",
              "COURIER_NOT_FOUND",
              "CUSTOMER_NOT_FOUND",
              "UNABLE_TO_DELIVER"
            ]
          }
        },
        "description": "Event that request the intent to cancel an order."
      },
      "OrderStatusEvent": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Events that represent updates on order status.",
            "enum": [
              "ORDER_ACCEPTED",
              "ORDER_FULFILLED",
              "ORDER_READY_TO_PICKUP"
            ]
          },
          "eventTime": {
            "type": "string",
            "description": "The time when this OrderStatusUpdateEvent occurred",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        }
      },
      "OrderStatusHistory": {
        "type": "object",
        "description": "The Order Status Update History and extra data.",
        "properties": {
          "orderStatusHistory": {
            "type": "array",
            "description": "Array of OrderStatusEvent",
            "items": {
              "$ref": "#/components/schemas/OrderStatusEvent"
            }
          },
          "orderAcceptedInfo": {
            "type": "object",
            "nullable": true,
            "description": "[NEW] Extra information added once the order was accepted by the restaurant. This field is nullable.",
            "properties": {
              "preparationTimeInMinutes": {
                "type": "integer",
                "description": "[NEW] The time in minutes the restaurant says it will take to prepare the order."
              }
            },
            "required": [
              "preparationTimeInMinutes"
            ]
          }
        }
      },
      "MenuPublishEvent": {
        "required": [
          "menuData"
        ],
        "type": "object",
        "properties": {
          "menuData": {
            "$ref": "#/components/schemas/MenuData"
          }
        },
        "description": "Event data containing the upserted MenuData."
      },
      "NullEvent": {
        "type": "object",
        "nullable": true,
        "description": "Empty event payload."
      },
      "ItemSelector": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the item."
          },
          "isModifier": {
            "type": "boolean",
            "description": "True, if the item is used as a modifier."
          }
        },
        "description": "Used to select a specific item."
      },
      "UpdateItemStatusEntry": {
        "required": [
          "selector",
          "status"
        ],
        "type": "object",
        "properties": {
          "selector": {
            "$ref": "#/components/schemas/ItemSelector"
          },
          "status": {
            "$ref": "#/components/schemas/ItemStatus"
          }
        },
        "description": "Update the status of an Item to the provided value."
      },
      "BulkUpdateItemStatus": {
        "required": [
          "updates"
        ],
        "type": "object",
        "properties": {
          "updates": {
            "type": "array",
            "minItems": 1,
            "description": "List of item status updates.",
            "items": {
              "$ref": "#/components/schemas/UpdateItemStatusEntry"
            }
          }
        },
        "description": "Event data containing list of item status updates."
      },
      "UpsertHoursEvent": {
        "required": [
          "menuHoursData"
        ],
        "type": "object",
        "properties": {
          "menuHoursData": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "menuId",
              "$ref": "#/components/schemas/HoursData"
            },
            "description": "Menu IDs to Hours",
            "example": {
              "da0e4e94-5670-4175-897a-3b7dde45bed5": {
                "timeZone": "America/Los_Angeles",
                "regularHours": [
                  {
                    "days": [
                      "MONDAY",
                      "TUESDAY",
                      "WEDNESDAY",
                      "THURSDAY",
                      "FRIDAY"
                    ],
                    "timeRanges": [
                      {
                        "start": "08:00",
                        "end": "22:00"
                      }
                    ]
                  }
                ],
                "specialHours": [
                  {
                    "date": "2021-12-31",
                    "timeRanges": [
                      {
                        "start": "08:00",
                        "end": "22:00"
                      }
                    ],
                    "type": "CLOSED"
                  }
                ]
              }
            }
          }
        },
        "description": "Event data containing all Menu Hours."
      },
      "String": {
        "type": "string"
      },
      "DeliveryStatusUpdateEvent": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "Describes the provider of the delivery."
          },
          "courier": {
            "$ref": "#/components/schemas/Courier"
          },
          "estimatedDeliveryTime": {
            "type": "string",
            "nullable": true,
            "description": "The expected delivery time.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "estimatedPickupTime": {
            "type": "string",
            "nullable": true,
            "description": "The expected pickup time.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "status": {
            "$ref": "#/components/schemas/DeliveryStatus"
          },
          "deliveryStatus": {
            "$ref": "#/components/schemas/DeliveryStatus"
          },
          "currencyCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
            "example": "EUR"
          },
          "baseFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "extraFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "totalFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "distance": {
            "$ref": "#/components/schemas/Distance"
          },
          "updatedTime": {
            "type": "string",
            "nullable": true,
            "description": "The time that the delivery status was updated.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Event that represent a status update for a delivery."
      },
      "RequiredAddress": {
        "type": "object",
        "properties": {
          "postalCode": {
            "type": "string",
            "description": "Postal code of the address.",
            "example": "20500"
          },
          "city": {
            "type": "string",
            "description": "The city/town portion of the address.",
            "example": "Washington"
          },
          "state": {
            "type": "string",
            "description": "Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, or a prefecture.",
            "example": "DC"
          },
          "countryCode": {
            "type": "string",
            "description": "CLDR country code. See http://cldr.unicode.org/",
            "example": "US"
          },
          "addressLines": {
            "type": "array",
            "nullable": true,
            "description": "Address lines (e.g. street, PO Box, or company name).",
            "example": [
              "1600 Pennsylvania Avenue NW"
            ],
            "items": {
              "type": "string"
            }
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        },
        "description": "Order delivery address."
      },
      "RequestDeliveryQuoteEvent": {
        "type": "object",
        "properties": {
          "deliveryReferenceId": {
            "type": "string",
            "description": "Generated delivery reference id."
          },
          "provider": {
            "type": "string",
            "description": "the pre-configured fulfillment provider slug in the onboarding process."
          },
          "preferredPickupDuration": {
            "type": "integer",
            "description": "Preferred time for courier to arrive to pick up order. Value expressed in minutes and is relative to time delivery request is made. If not provided, or if the value is 0, please treat it as an ASAP request.",
            "format": "int32"
          },
          "pickupAddress": {
            "$ref": "#/components/schemas/RequiredAddress"
          },
          "dropoffAddress": {
            "$ref": "#/components/schemas/RequiredAddress"
          },
          "destinationAddress": {
            "$ref": "#/components/schemas/RequiredAddress"
          }
        }
      },
      "RequiredPerson": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The person's name as it should be displayed.",
            "example": "Jane Doe"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "description": "The person's phone number.",
            "example": "+1-555-555-5555"
          },
          "phoneCode": {
            "type": "string",
            "nullable": true,
            "description": "A code or extension of the phone number.",
            "example": "111 11 111"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "The person's email address.",
            "example": "email@email.com"
          },
          "personalIdentifiers": {
            "$ref": "#/components/schemas/PersonalIdentifiers"
          }
        },
        "description": "Details about the customer who placed the order."
      },
      "AcceptDeliveryEvent": {
        "type": "object",
        "properties": {
          "deliveryReferenceId": {
            "type": "string",
            "description": "Generated delivery reference id."
          },
          "provider": {
            "type": "string",
            "description": "the pre-configured fulfillment provider slug in the onboarding process."
          },
          "preferredPickupTime": {
            "type": "string",
            "description": "Preferred time for courier to arrive to pick up order. If not provided or if the timestamp is in the past, treat it as an ASAP request.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "pickupOrderId": {
            "type": "string",
            "description": "An identifier used for picking up order from pickup address."
          },
          "pickupNote": {
            "type": "string",
            "nullable": true,
            "description": "Additional information to instruct couriers how to pickup the order."
          },
          "pickupAddress": {
            "$ref": "#/components/schemas/RequiredAddress"
          },
          "dropoffNote": {
            "type": "string",
            "nullable": true,
            "description": "Additional information to instruct couriers how to dropoff the order."
          },
          "dropoffAddress": {
            "$ref": "#/components/schemas/RequiredAddress"
          },
          "customer": {
            "$ref": "#/components/schemas/RequiredPerson"
          },
          "customerPayments": {
            "type": "array",
            "nullable": true,
            "description": "Payments need to be collected by customers.",
            "items": {
              "$ref": "#/components/schemas/CustomerPayment"
            }
          },
          "currencyCode": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
            "example": "KRW"
          }
        }
      },
      "CancelDeliveryEvent": {
        "type": "object",
        "properties": {
          "deliveryReferenceId": {
            "type": "string",
            "description": "Generated delivery reference id."
          }
        }
      },
      "ReportGeneratedEvent": {
        "type": "object",
        "properties": {
          "reportUrl": {
            "type": "string",
            "description": "Public URL to download generated report"
          }
        },
        "description": "Event data containing metadata of the generated report"
      },
      "PingEvent": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Hello World"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "The request is malformed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "401": {
        "description": "Invalid authorization.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "403": {
        "description": "Authorization not valid for the requested resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "404": {
        "description": "Resource not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "422": {
        "description": "The request body is not valid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "2XX": {
        "description": "Return any 2XX status to indicate that the data was received successfully"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Endpoints",
      "tags": [
        "auth_endpoints",
        "callback_endpoints",
        "delivery_endpoints",
        "menus_endpoints",
        "orders_endpoints",
        "ping_endpoints",
        "reports_endpoints",
        "storefront_endpoints"
      ]
    },
    {
      "name": "Webhooks",
      "tags": [
        "delivery_webhooks",
        "menus_webhooks",
        "orders_webhooks",
        "reports_webhooks",
        "storefront_webhooks",
        "ping_webhooks"
      ]
    }
  ]
}