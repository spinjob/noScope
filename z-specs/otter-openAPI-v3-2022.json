{
    "openapi": "3.0.1",
    "info": {
      "title": "Required API",
      "description": "# Overview\n\nThe API endpoints are developed around [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) principles secure via the OAuth2.0 protocol.\n\nBeyond the entry points, the API also provides a line of communication into your system via [webhooks](https://en.wikipedia.org/wiki/Webhook).\n\nFor testing purposes, we offer a staging environment. Also, more detailed information about the business rules and workflows can be found on the [**Documentation Section**](/docs/)\n\n## Versioning\nEach API is versioned individually, but we follow these rules:\n- Non breaking changes (eg: adding new fields) are added in the current version without previous communication\n- Breaking changes (fields removal, semantic changed or schema update) have the version incremented\n- Users will be notified about new versions and will be given time to migrate (the time will be set on a case by case)\n- Once users migrate to the new version, we will deprecate the old ones\n- Once there is a new version for an API, we won't accept new integrations targeting old versions\n\n## API General Definitions\nThe APIs use resource-oriented URLs communicating, primarily, via JSON and leveraging the HTTP headers, [response status codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status), and verbs.\n\nTo exemplify how the API is to be consumed, consider a fake GET resource endpoint invocation below:\n\n```\ncurl --request GET 'https://{{public-api-url}}/v1/resource/123' \\\n--header 'Authorization: Bearer 34fdabeeafds=' --header 'X-Store-Id: 321'\n```\n\n|      Header      | Description |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|`Authorization`   | Standard HTTP header is used to associate the request with the originating invoker. The content of this header is a `Bearer` token generated from you client_secret, defined in the [API Auth](#/section/Guides/API-Auth) guide.|\n|`X-Store-Id`      | The ID of the store in your system this call acts on behalf of. |\n\n_All resource endpoints expect the `Authorization` header, the remaining headers are explicitly stated in the individual endpoint documentation section._\n\nWith these headers, the system will:\n - Validate the client token, making sure the call is originating from a trusted source.\n - Validate that the Application has the permission to access the `v1/resource/{id}` resource via the Application's pre-configured scopes.\n - Translate your X-Store-Id to our internal store ID (e.g. `AAA`).\n - Validate and retrieve resource `AAA`, that is associated to your Application via store id `321`.\n\nPOST/PUT methods will look similar to the GET calls, but they'll take in a body in the HTTP request (default to the application/json content-type).\n\n```\ncurl --location --request POST 'https://{{public-api-url}}/v1/resource' \\\n--header 'Authorization: Bearer 34fdabeeafds=' --header 'X-Store-Id: 321'\n--data '{\"foo\": \"bar\"}'\n```\n\n## API Authentication/Authorization\n\n<SecurityDefinitions />\n\nThe **Authorization API** is based on the [OAuth2.0 protocol](https://tools.ietf.org/html/rfc6749), using the [client credentials grant](https://tools.ietf.org/html/rfc6749#section-4.4). Resources expect a valid token sent as a `Bearer` token in the HTTP `Authorization` header.\n\nTo generate the token, use the `Application ID` and `Client Secret` (provided during onboarding) to the [Token Auth endpoint](#operation/requestToken) endpoint. The result of this invocation is a token that is valid for a pre-determined time or until it is manually revoked.\n\nThe response of the following endpoints will return a token that will be sent as a `Bearer` value of the `Authorization` HTTP header, along with meta information such as expiry-date.\n\n_Note that the referred `client_id` is the `Application ID` because though we chose adhere to the OAuth2.0 standard for the auth APIs._\n\n### Request Examples\n\n#### URL Encoded Form\n\nThe API exposes a token generation endpoint expects your *client_id* and *client_secret* to be formatted as *application/x-www-form-urlencoded* content type.\n```\ncurl --location --request POST 'https://{{public-api-url}}/v1/auth/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'scope=ping' \\\n--data-urlencode 'grant_type=client_credentials' \\\n--data-urlencode 'client_id=[APPLICATION_ID]' \\\n--data-urlencode 'client_secret=[CLIENT_SECRET]'\n```\n\n#### HTTP Basic Auth\n\nAlternatively, the API also accepts a `Basic` Authorization header with the Base64 encoding of the `client_id` (`Application ID`) and `client_secret` joined by a single colon `:`.\n\n```\nBASE64_ENCODED_CREDENTIALS = base64_encode(client_id + \":\" + client_secret)\n```\n\n```\ncurl --location --request POST 'https://{{public-api-url}}/v1/auth/token' \\\n--header 'Authorization: Basic [BASE64_ENCODED_CREDENTIALS]' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'scope=ping' \\\n--data-urlencode 'grant_type=client_credentials'\n```\n\n## Webhook\n\nThe Public API is able to send notifications to your system via HTTP POST requests.\n\nEvery webhook is signed using HMAC-SHA256 that is present in the header `X-HMAC-SHA256`, and you can also authenticate the requests using Basic Auth, Bearer Token or HMAC-SHA1 (legacy). Please, refer to [**Webhook Authentication Guide**](/docs/guides-webhook-authentication/) for more details.\n\n_Please work with your Account Representative to setup your Application's Webhook configurations._\n\n```\nExample Base-URL = https://{{your-server-url}}/webhook\n```\n\n### Notification Schema\n\n| **Name**                | **Type** | **Description**                                                      |\n| ------------------------| ---------| -------------------------------------------------------------------- |\n| eventId                 | string   | Unique id of the event.                                              |\n| eventTime               | string   | The time the event occurred.                                         |\n| eventType               | string   | The type of event (e.g. create_order).                               |\n| metadata.storeId        | string   | Id of the store for which the event is being published.              |\n| metadata.applicationId  | string   | Id of the application for which the event is being published.        |\n| metadata.resourceId     | string   | The external identifier of the resource that this event refers to.   |\n| metadata.resourceHref   | string   | The endpoint to fetch the details of the resource.                   |\n| metadata.payload        | object   | The event object which will be detailed in each Webhook description. |\n\n### Notification Request Example\n\n```\ncurl --location --request POST 'https://{{your-server-url}}/webhook' \\\n--header 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36' \\\n--header 'Authorization: MAC <hash signature>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n   \"eventId\": \"123456\",\n   \"eventTime\": \"2020-10-10T20:06:02:123Z\",\n   \"eventType\": \"orders.new_order\",\n   \"metadata\": {\n      \"storeId\": \"755fd19a-7562-487a-b615-171a9f89d669\",\n      \"applicationId\": \"e22f94b3-967c-4e26-bf39-9e364066b68b\",\n      \"resourceHref\": \"https://{{public-api-url}}/v1/orders/bf9f1d81-f213-496e-a026-91b6af44996c\",\n      \"resourceId\": \"bf9f1d81-f213-496e-a026-91b6af44996c\",\n      \"payload\": {}\n   }\n}\n```\n\n## Expected Response\n\nThe partner application should return an HTTP 200 response code with an empty response body to acknowledge receipt of the webhook event.\n## Rate Limiting\nPlease, refer to [**Rate Limiting Guide**](/docs/guides-rate-limiting/) for more details.",
      "version": "v1",
      "license": {
        "name": "Proprietary"
      }
    },
    "servers": [
      {
        "url": "https://{{public-api-url}}",
        "description": "Staging server url"
      }
    ],
    "tags": [
      {
        "name": "ping_endpoints",
        "description": "Endpoints to ping and test system authentication.",
        "x-displayName": "Ping"
      },
      {
        "name": "manager_order_endpoints",
        "description": "Endpoints for applications managing order related data and operations.",
        "x-displayName": "Manager Order"
      },
      {
        "name": "orders_endpoints",
        "description": "Endpoints to manage orders for a store.",
        "x-displayName": "Orders"
      },
      {
        "name": "orders_webhooks",
        "description": "Webhooks from orders domains.",
        "x-displayName": "Orders Webhooks"
      },
      {
        "name": "manager_orders_webhooks",
        "description": "Webhooks from manager orders domain.",
        "x-displayName": "Manager Orders Webhooks"
      },
      {
        "name": "callback_endpoints",
        "description": "Endpoints for callback management.",
        "x-displayName": "Callback"
      },
      {
        "name": "reports_endpoints",
        "description": "Endpoints to reports generation operations",
        "x-displayName": "Reports"
      },
      {
        "name": "reports_webhooks",
        "description": "Webhooks from the reports generation operations",
        "x-displayName": "Reports Webhooks"
      },
      {
        "name": "storefront_endpoints",
        "description": "Endpoints to manage storefront state",
        "x-displayName": "Storefront"
      },
      {
        "name": "storefront_webhooks",
        "description": "Webhooks from storefront domain.",
        "x-displayName": "Storefront Webhooks"
      },
      {
        "name": "manager_menu_endpoints",
        "description": "Endpoints for applications managing menus related data and operations.",
        "x-displayName": "Manager Menu"
      },
      {
        "name": "menus_endpoints",
        "description": "Endpoints to manage menus.",
        "x-displayName": "Menus"
      },
      {
        "name": "menus_webhooks",
        "description": "Webhooks from menus domain.",
        "x-displayName": "Menus Webhooks"
      },
      {
        "name": "auth_endpoints",
        "description": "Endpoints to handle token management.",
        "x-displayName": "Auth"
      },
      {
        "name": "delivery_endpoints",
        "description": "Endpoints to manage delivery.",
        "x-displayName": "Delivery"
      },
      {
        "name": "delivery_webhooks",
        "description": "Webhooks from the delivery domain.",
        "x-displayName": "Delivery Webhooks"
      },
      {
        "name": "ping_webhooks",
        "description": "Webhooks to ping and test the system integration.",
        "x-displayName": "Ping Webhooks"
      },
      {
        "name": "storelinks_endpoints",
        "description": "Endpoints to pair accounts between platforms for onboarding and offboarding purposes.",
        "x-displayName": "Stores Endpoints"
      },
      {
        "name": "storelinks_webhooks",
        "description": "Webhooks to manage the store onboarding process.",
        "x-displayName": "Stores Webhooks"
      },
      {
        "name": "finance_endpoints",
        "description": "Endpoints to handle financial data.",
        "x-displayName": "Finance"
      },
      {
        "name": "utils_endpoints",
        "description": "Endpoints to provide access to integration utilities.",
        "x-displayName": "Integration Utilities"
      },
      {
        "name": "account_pairing_endpoints",
        "description": "Endpoints to manage store onboarding and status",
        "x-displayName": "Account Pairing"
      },
      {
        "name": "stores_webhooks",
        "description": "Webhooks to manage store onboarding and status",
        "x-displayName": "Account Pairing Webhooks"
      }
    ],
    "x-webhooks": {
      "orderCreate": {
        "post": {
          "tags": [
            "manager_orders_webhooks"
          ],
          "summary": "Order creation webhook",
          "operationId": "orderCreateWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/Order"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "orders.new_order"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "intentToCancelOrder": {
        "post": {
          "tags": [
            "orders_webhooks"
          ],
          "summary": "Intent to cancel order webhook",
          "operationId": "intentToCancelOrderWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/IntentToCancelEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "orders.cancel_order"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "orderStatusUpdate": {
        "post": {
          "tags": [
            "orders_webhooks"
          ],
          "summary": "Order status update webhook",
          "operationId": "orderStatusUpdateWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/OrderStatusHistory"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "orders.order_status_update"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "orderReady": {
        "post": {
          "tags": [
            "manager_orders_webhooks"
          ],
          "summary": "Order Ready status notification webhook",
          "operationId": "orderReady",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/OrderReadyEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "orders.order_ready"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "orderHandedOff": {
        "post": {
          "tags": [
            "manager_orders_webhooks"
          ],
          "summary": "Order Handed Off status notification webhook",
          "operationId": "orderHandedOff",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/OrderHandedOffEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "orders.order_handed_off"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "orderFulfilled": {
        "post": {
          "tags": [
            "manager_orders_webhooks"
          ],
          "summary": "Order Fulfilled status notification webhook",
          "operationId": "orderFulfilled",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/OrderFulfilledEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "orders.order_fulfilled"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "menuPublish": {
        "post": {
          "tags": [
            "menus_webhooks"
          ],
          "summary": "Menu publish webhook",
          "operationId": "menuPublishWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/MenuPublishEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "menus.menu_publish"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "sendMenu": {
        "post": {
          "tags": [
            "menus_webhooks"
          ],
          "summary": "Send menu webhook",
          "operationId": "sendMenuWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/NullEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "menus.send_menu"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "updateMenuEntitiesAvailabilities": {
        "post": {
          "tags": [
            "menus_webhooks"
          ],
          "summary": "Update menu entities availabilities webhook",
          "operationId": "updateMenuEntitiesAvailabilitiesWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/BulkUpdateItemStatus"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "menus.update_menu_entities_availabilities"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "upsertMenuHours": {
        "post": {
          "tags": [
            "menus_webhooks"
          ],
          "summary": "Upsert menu hours webhook",
          "operationId": "upsertMenuHoursWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/UpsertHoursEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "menus.upsert_hours"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "pauseStore": {
        "post": {
          "tags": [
            "storefront_webhooks"
          ],
          "summary": "Pause store webhook",
          "operationId": "pauseStoreWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/NullEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "storefront.pause_store"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "unpauseStore": {
        "post": {
          "tags": [
            "storefront_webhooks"
          ],
          "summary": "Unpause store webhook",
          "operationId": "unpauseStoreWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/UnpauseStoreEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "storefront.unpause_store"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "getStoreAvailability": {
        "post": {
          "tags": [
            "storefront_webhooks"
          ],
          "summary": "Get store availability webhook",
          "operationId": "getStoreAvailabilityWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/NullEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "storefront.get_store_availability"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "getStoreHoursConfiguration": {
        "post": {
          "tags": [
            "storefront_webhooks"
          ],
          "summary": "Get store hours configuration webhook",
          "operationId": "getStoreHoursConfigurationWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/NullEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "storefront.get_store_hours"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "deliveryStatusUpdate": {
        "post": {
          "tags": [
            "delivery_webhooks"
          ],
          "summary": "Update delivery status webhook",
          "operationId": "deliveryStatusUpdateWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/DeliveryStatusUpdateEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "delivery.delivery_status_update"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "requestDeliveryQuotes": {
        "post": {
          "tags": [
            "delivery_webhooks"
          ],
          "summary": "Request delivery quotes webhook",
          "operationId": "requestDeliveryQuotesWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/RequestDeliveryQuoteEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "delivery.request_quote"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "acceptDelivery": {
        "post": {
          "tags": [
            "delivery_webhooks"
          ],
          "summary": "Accept delivery webhook",
          "operationId": "acceptDeliveryWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/AcceptDeliveryEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "delivery.accept"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "cancelDelivery": {
        "post": {
          "tags": [
            "delivery_webhooks"
          ],
          "summary": "Cancel delivery webhook",
          "operationId": "cancelDeliveryWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/CancelDeliveryEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "delivery.cancel"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "updateDeliveryRequest": {
        "post": {
          "tags": [
            "delivery_webhooks"
          ],
          "summary": "Update delivery request webhook",
          "operationId": "updateDeliveryRequestWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/UpdateDeliveryRequestEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "delivery.update_request"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "reportGenerated": {
        "post": {
          "tags": [
            "reports_webhooks"
          ],
          "summary": "Report generated webhook",
          "operationId": "reportGeneratedWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/ReportGeneratedEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "reports.report_generated"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "ping": {
        "post": {
          "tags": [
            "ping_webhooks"
          ],
          "summary": "Ping webhook",
          "description": "Used to validate the integration without side effects",
          "operationId": "pingWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/PingEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "ping.ping"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "2XX": {
              "$ref": "#/components/responses/2XX"
            }
          }
        }
      },
      "upsertStore": {
        "post": {
          "tags": [
            "stores_webhooks"
          ],
          "summary": "Upsert Store",
          "description": "Sent when a store is created or updated in `Public API` internal systems.<br/> If metadata contains a `Store ID`, it means a request to update an existent store, otherwise, it's a creation operation.<br/> It provides the store and credentials data needed to validate the store and create a new `Store ID` in the partner application.<br/>      At this point, the  store is in `onboarding state` waiting the partner application to finish the onboarding process by providing the validated `Store ID`.",
          "operationId": "upsertStorelinkWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotification"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "payload": {
                              "$ref": "#/components/schemas/UpsertStorelinkEvent"
                            }
                          }
                        }
                      }
                    },
                    {
                      "example": {
                        "eventType": "stores.upsert"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "409": {
              "description": "The provided credentials already exists in another store.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "422": {
              "description": "The provided credentials are not compatible with the provided schema version.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            },
            "2XX": {
              "description": "The provided credentials are compatible with the provided schema version, successfully saved in the partner application database and available for the validation process (establishing a connection with the service related to the Application ID, e.g.: UberEats)."
            }
          }
        }
      },
      "fetchCredentials": {
        "post": {
          "tags": [
            "stores_webhooks"
          ],
          "summary": "Fetch Credentials (synchronously)",
          "description": "Synchronously returns the last version of the credentials schema needed to create and validate a store in the partner application. If the request contains the `Store ID`, it also returns the saved store credentials corresponding to the provided `Store ID`.",
          "operationId": "fetchCredentialsWebhook",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EventNotificationNoPayload"
                    },
                    {
                      "$ref": "#/components/schemas/OptionalStoreIdInMetadata"
                    },
                    {
                      "example": {
                        "eventType": "stores.fetch_credentials"
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "The credentials schema and, if the request contains the Store ID, the correspondent store credentials.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ViewCredentialsArray"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            }
          }
        }
      }
    },
    "paths": {
      "/v1/orders": {
        "post": {
          "tags": [
            "orders_endpoints"
          ],
          "summary": "Create order",
          "description": "`RATE LIMIT: 32 per minute`\n",
          "operationId": "createOrder",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The order was successfully created.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderReference"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "orders.create"
              ]
            }
          ]
        }
      },
      "/v1/orders/{orderId}": {
        "put": {
          "tags": [
            "orders_endpoints"
          ],
          "summary": "Update order",
          "description": "`RATE LIMIT: 32 per minute`\n",
          "operationId": "updateOrder",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/orderId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The order was successfully updated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderReference"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "orders.update"
              ]
            }
          ]
        }
      },
      "/v1/orders/{orderId}/status": {
        "post": {
          "tags": [
            "orders_endpoints"
          ],
          "summary": "Update order status",
          "description": "`RATE LIMIT: 32 per minute`\n",
          "operationId": "updateOrderStatus",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdOptionalHeader"
            },
            {
              "$ref": "#/components/parameters/orderId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatusUpdateRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The order status was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "orders.update"
              ]
            }
          ]
        }
      },
      "/v1/orders/{orderId}/payments": {
        "put": {
          "tags": [
            "orders_endpoints"
          ],
          "summary": "Update order customer payment",
          "description": "`RATE LIMIT: 8 per minute`\n\nNotice that this operation do not completely replace the existent customer payment, instead, it overwrites the field if the latest update is a non-null value. If the update value is null, the existent value will continue to be used.\n",
          "operationId": "updateOrderCustomerPayment",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/orderId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCustomerPaymentUpdateRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The order payment information was successfully updated."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "orders.update"
              ]
            }
          ]
        }
      },
      "/v1/orders/{orderId}/delivery": {
        "put": {
          "tags": [
            "orders_endpoints"
          ],
          "summary": "Update order delivery information",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "updateOrderDeliveryInfo",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/orderId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDeliveryInfoUpdateRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The order delivery information was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "orders.update"
              ]
            }
          ]
        }
      },
      "/v1/orders/past-orders": {
        "post": {
          "tags": [
            "orders_endpoints"
          ],
          "summary": "Upload past orders",
          "description": "`RATE LIMIT: 32 per minute`; orders must have a status of FULFILLED, REJECTED, or CANCELED\n",
          "operationId": "uploadPastOrders",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadPastOrdersRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The orders was successfully uploaded.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UploadPastOrdersResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "orders.create"
              ]
            }
          ]
        }
      },
      "/v1/orders/status": {
        "post": {
          "tags": [
            "orders_endpoints"
          ],
          "summary": "DEPRECATED - Update order status",
          "description": "`RATE LIMIT: 32 per minute`\n\n'DEPRECATED: use /manager/order/v1/sources/{source}/orders/{orderId}/{confirm|cancel}. '\n",
          "operationId": "posUpdateOrder",
          "deprecated": true,
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdOptionalHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POSOrderStatusUpdateRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The order status was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "orders.pos.status_update"
              ]
            }
          ]
        }
      },
      "/v1/orders/feed": {
        "get": {
          "tags": [
            "orders_endpoints"
          ],
          "summary": "DEPRECATED - Fetch order feed for a store",
          "description": "`RATE LIMIT: 2 per minute`\n\n'DEPRECATED: use /manager/order/v1/orders. '\n",
          "operationId": "getOrderFeed",
          "deprecated": true,
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/limit"
            },
            {
              "$ref": "#/components/parameters/token"
            },
            {
              "$ref": "#/components/parameters/minDateTime"
            },
            {
              "$ref": "#/components/parameters/maxDateTime"
            }
          ],
          "responses": {
            "200": {
              "description": "Order feed was successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderFeed"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "orders.read"
              ]
            }
          ]
        }
      },
      "/v1/orders/{orderId}/{source}/pos": {
        "get": {
          "tags": [
            "orders_endpoints"
          ],
          "summary": "DEPRECATED - Fetch order with POS Info",
          "description": "DEPRECATED: use /manager/order/v1/sources/{source}/orders/{orderId}.",
          "operationId": "getPosOrder",
          "deprecated": true,
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/orderId"
            },
            {
              "$ref": "#/components/parameters/source"
            }
          ],
          "responses": {
            "200": {
              "description": "Order information was successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderWithPosInfo"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "orders.pos.operations"
              ]
            }
          ]
        }
      },
      "/manager/order/v1/orders": {
        "get": {
          "tags": [
            "manager_order_endpoints"
          ],
          "summary": "Fetch order feed for a store",
          "operationId": "managerGetOrderFeed",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/limit"
            },
            {
              "$ref": "#/components/parameters/token"
            },
            {
              "$ref": "#/components/parameters/minDateTime"
            },
            {
              "$ref": "#/components/parameters/maxDateTime"
            }
          ],
          "responses": {
            "200": {
              "description": "Order feed was successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderFeed"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.orders"
              ]
            }
          ]
        }
      },
      "/manager/order/v1/sources/{source}/orders/{orderId}": {
        "get": {
          "tags": [
            "manager_order_endpoints"
          ],
          "summary": "Fetch order with Manager Info",
          "operationId": "getManagerOrder",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/orderId"
            },
            {
              "$ref": "#/components/parameters/source"
            }
          ],
          "responses": {
            "200": {
              "description": "Order information was successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrderWithManagerInfo"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.orders"
              ]
            }
          ]
        }
      },
      "/manager/order/v1/sources/{source}/orders/{orderId}/re-inject": {
        "post": {
          "tags": [
            "manager_order_endpoints"
          ],
          "summary": "Request order re-injection",
          "description": "`RATE LIMIT: 32 per minute`\n",
          "operationId": "requestOrderReInjection",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/source"
            },
            {
              "$ref": "#/components/parameters/orderId"
            }
          ],
          "responses": {
            "202": {
              "description": "The order reinjection request was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.orders"
              ]
            }
          ]
        }
      },
      "/manager/order/v1/sources/{source}/orders/{orderId}/confirm": {
        "post": {
          "tags": [
            "manager_order_endpoints"
          ],
          "summary": "Request order confirmation",
          "description": "`RATE LIMIT: 32 per minute`\n",
          "operationId": "requestOrderConfirmation",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/source"
            },
            {
              "$ref": "#/components/parameters/orderId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerConfirmOrderRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "202": {
              "description": "The order confirmation request was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.orders"
              ]
            }
          ]
        }
      },
      "/manager/order/v1/sources/{source}/orders/{orderId}/cancel": {
        "post": {
          "tags": [
            "manager_order_endpoints"
          ],
          "summary": "Request order cancelation",
          "description": "`RATE LIMIT: 32 per minute`\n",
          "operationId": "requestOrderCancelation",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/source"
            },
            {
              "$ref": "#/components/parameters/orderId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagerCancelOrderRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The order cancelation request was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.orders"
              ]
            }
          ]
        }
      },
      "/manager/order/v1/sources/{source}/orders/{orderId}/ready-to-pickup": {
        "post": {
          "tags": [
            "manager_order_endpoints"
          ],
          "summary": "Mark an order as ready to pickup",
          "description": "`RATE LIMIT: 32 per minute`\n",
          "operationId": "markAsReadyToPickup",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/source"
            },
            {
              "$ref": "#/components/parameters/orderId"
            }
          ],
          "responses": {
            "202": {
              "description": "The order was successfully marked as ready to pickup."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.orders"
              ]
            }
          ]
        }
      },
      "/manager/order/v1/sources/{source}/orders/{orderId}/fulfill": {
        "post": {
          "tags": [
            "manager_order_endpoints"
          ],
          "summary": "Mark an order as fulfilled",
          "description": "`RATE LIMIT: 32 per minute`\n",
          "operationId": "markAsFulfilled",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/source"
            },
            {
              "$ref": "#/components/parameters/orderId"
            }
          ],
          "responses": {
            "202": {
              "description": "The order was successfully marked as fulfilled."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.orders"
              ]
            }
          ]
        }
      },
      "/v1/menus": {
        "get": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "Get the menus for a store",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "getMenu",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "responses": {
            "200": {
              "description": "The store's menu.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Menus"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.read"
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "Upsert menus for a store",
          "description": "`RATE LIMIT: 2 per minute`\n",
          "operationId": "upsertMenu",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenusUpsertRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The menu update will be processed.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuAsynchronousJob"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.upsert"
              ]
            }
          ]
        }
      },
      "/v1/menus/jobs/{jobId}": {
        "get": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "Get the async menu job status",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "getAsyncJobStatus",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "name": "jobId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the job.",
                "example": "295f76b4-5725-4bf5-a8ab-97943dbdc3b4"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The menu async job status.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuAsynchronousJob"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.async_job.read"
              ]
            }
          ]
        }
      },
      "/v1/menus/publish": {
        "post": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "Notify the result of a Publish Menu event",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "menuPublishCallback",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertFullMenuEventCallback"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The Publish menu event result was successfully processed"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.publish"
              ]
            }
          ]
        }
      },
      "/v1/menus/current": {
        "post": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "Notify the result of a Send Menu event",
          "description": "`RATE LIMIT: 4 per minute`\n",
          "operationId": "menuSendCallback",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendMenuEventCallback"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The Send Menu event result was successfully processed"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.get_current"
              ]
            }
          ]
        }
      },
      "/v1/menus/hours": {
        "post": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "Notify the receival of a Upsert Hours Menu event",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "menuUpsertHours",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            }
          ],
          "responses": {
            "204": {
              "description": "The Upsert Hours Menu event result was successfully processed"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.upsert_hours"
              ]
            }
          ]
        }
      },
      "/v1/menus/entity/availability/bulk": {
        "post": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "Notify the result of a Update Menu Entities Availabilities event",
          "description": "`RATE LIMIT: 32 per minute`\n",
          "operationId": "updateMenuEntitiesAvailabilitiesCallback",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            }
          ],
          "responses": {
            "204": {
              "description": "The Update Menu Entities Availabilities menu entity event result was successfully processed"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.entity_suspension"
              ]
            }
          ]
        }
      },
      "/v1/menus/pos/publish": {
        "post": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "DEPRECATED - Publish menus to targets for a store",
          "description": "`RATE LIMIT: 2 per minute`\n\n'DEPRECATED: use /manager/menu/v1/menus/publish.'\n",
          "operationId": "publishMenu",
          "deprecated": true,
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuPublishRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The menu publish will be processed.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuPublishResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "409": {
              "description": "Conflicting Menu targets.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuPublishResponse"
                  }
                }
              }
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.pos_publish"
              ]
            }
          ]
        }
      },
      "/v1/menus/pos/entity/availability/suspend": {
        "post": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "DEPRECATED - Suspend menu entities targets for a store",
          "description": "DEPRECATED: use /manager/menu/v1/menus/entities/availability/suspend.",
          "operationId": "suspendMenuEntities",
          "deprecated": true,
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuspendItemsRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The suspend menu entities will be processed.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuAsynchronousJob"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.entity_suspension"
              ]
            }
          ]
        }
      },
      "/v1/menus/pos/entity/availability/unsuspend": {
        "post": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "DEPRECATED - Unsuspend menu entities targets for a store",
          "description": "DEPRECATED: use /manager/menu/v1/menus/entities/availability/unsuspend. ",
          "operationId": "unsuspendMenuEntities",
          "deprecated": true,
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsuspendItemsRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The suspend menu entities will be processed.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuAsynchronousJob"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.entity_suspension"
              ]
            }
          ]
        }
      },
      "/v1/menus/pos/publish/targets": {
        "get": {
          "tags": [
            "menus_endpoints"
          ],
          "summary": "DEPRECATED - Get the MenuPublishTargets for a store",
          "description": "`RATE LIMIT: 2 per minute`\n\n'DEPRECATED: use /manager/menu/v1/menus/publish-targets.'\n",
          "operationId": "getMenuPublishTargets",
          "deprecated": true,
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdOptionalHeader"
            }
          ],
          "responses": {
            "200": {
              "description": "The store's MenuPublishTargets.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuPublishTargets"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "menus.pos_publish"
              ]
            }
          ]
        }
      },
      "/manager/menu/v1/menus/publish-targets": {
        "get": {
          "tags": [
            "manager_menu_endpoints"
          ],
          "summary": "Get the publish-targets for a store",
          "description": "`RATE LIMIT: 2 per minute`\n",
          "operationId": "managerGetMenuPublishTargets",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "responses": {
            "200": {
              "description": "The store's menu publish-targets.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuPublishTargets"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.menus"
              ]
            }
          ]
        }
      },
      "/manager/menu/v1/menus/publish": {
        "post": {
          "tags": [
            "manager_menu_endpoints"
          ],
          "summary": "Publish menus to targets for a store",
          "description": "`RATE LIMIT: 2 per minute`\n",
          "operationId": "managerPublishMenu",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuPublishRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The menu publish will be processed.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuPublishResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "409": {
              "description": "Conflicting Menu targets.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuPublishResponse"
                  }
                }
              }
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.menus"
              ]
            }
          ]
        }
      },
      "/manager/menu/v1/menus/entities/availability/suspend": {
        "post": {
          "tags": [
            "manager_menu_endpoints"
          ],
          "summary": "Suspend menu entities targets for a store",
          "description": "`RATE LIMIT: 2 per minute`\n",
          "operationId": "managerSuspendMenuEntities",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuspendItemsRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The suspend menu entities will be processed.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuAsynchronousJob"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.menus"
              ]
            }
          ]
        }
      },
      "/manager/menu/v1/menus/entities/availability/unsuspend": {
        "post": {
          "tags": [
            "manager_menu_endpoints"
          ],
          "summary": "Unsuspend menu entities targets for a store",
          "description": "`RATE LIMIT: 2 per minute`\n",
          "operationId": "managerUnsuspendMenuEntities",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsuspendItemsRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The suspend menu entities will be processed.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuAsynchronousJob"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "manager.menus"
              ]
            }
          ]
        }
      },
      "/v1/storefront/availability": {
        "post": {
          "tags": [
            "storefront_endpoints"
          ],
          "summary": "Notify about store availability change",
          "description": "`RATE LIMIT: 16 per minute`\n",
          "operationId": "postStoreAvailabilityChange",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdOptionalHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreAvailabilityEventResult"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The store availability change was successfully processed"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "storefront.store_availability"
              ]
            }
          ]
        }
      },
      "/v1/storefront/hours": {
        "post": {
          "tags": [
            "storefront_endpoints"
          ],
          "summary": "Notify about store hours configuration change",
          "description": "`RATE LIMIT: 16 per minute`\n",
          "operationId": "postStoreHoursConfigurationChange",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdOptionalHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreHoursConfigurationEventResult"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The store hours configuration change was successfully processed."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "storefront.store_hours_configuration"
              ]
            }
          ]
        }
      },
      "/v1/storefront/pause": {
        "post": {
          "tags": [
            "storefront_endpoints"
          ],
          "summary": "Notify the result of a pause request event",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "postPauseStoreEventResult",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PauseStoreEventResult"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The pause store event result was successfully processed"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "storefront.store_pause_unpause"
              ]
            }
          ]
        }
      },
      "/v1/storefront/unpause": {
        "post": {
          "tags": [
            "storefront_endpoints"
          ],
          "summary": "Notify the result of an unpause request event",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "postUnpauseStoreEventResult",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnpauseStoreEventResult"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The unpause store event result was successfully processed"
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "storefront.store_pause_unpause"
              ]
            }
          ]
        }
      },
      "/v1/delivery/{deliveryReferenceId}/status": {
        "put": {
          "tags": [
            "delivery_endpoints"
          ],
          "summary": "Update delivery status",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "updateDeliveryStatus",
          "parameters": [
            {
              "$ref": "#/components/parameters/deliveryReferenceId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryStatusUpdateRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The event callback was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "delivery.provider"
              ]
            }
          ]
        }
      },
      "/v1/delivery/{deliveryReferenceId}/quotes": {
        "post": {
          "tags": [
            "delivery_endpoints"
          ],
          "summary": "Notify the result of a request delivery quote event",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "requestDeliveryQuoteCallback",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            },
            {
              "$ref": "#/components/parameters/deliveryReferenceId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDeliveryQuoteCallbackRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The event callback was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "delivery.provider"
              ]
            }
          ]
        }
      },
      "/v1/delivery/{deliveryReferenceId}/accept": {
        "post": {
          "tags": [
            "delivery_endpoints"
          ],
          "summary": "Notify the result of an accept delivery event",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "acceptDeliveryCallback",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            },
            {
              "$ref": "#/components/parameters/deliveryReferenceId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptDeliveryCallbackRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The event callback was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "delivery.provider"
              ]
            }
          ]
        }
      },
      "/v1/delivery/{deliveryReferenceId}/cancel": {
        "post": {
          "tags": [
            "delivery_endpoints"
          ],
          "summary": "Notify the result of a cancel delivery event",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "cancelDeliveryCallback",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            },
            {
              "$ref": "#/components/parameters/deliveryReferenceId"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelDeliveryCallbackRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The event callback was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "delivery.provider"
              ]
            }
          ]
        }
      },
      "/v1/delivery/callback/error": {
        "post": {
          "tags": [
            "delivery_endpoints"
          ],
          "summary": "Publish delivery callback error",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "deliveryCallbackError",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventCallbackError"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The callback error was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "callback.error.write"
              ]
            }
          ]
        }
      },
      "/v1/callback/error": {
        "post": {
          "tags": [
            "callback_endpoints"
          ],
          "summary": "Publish callback error",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "publishError",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventCallbackError"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The callback error was successfully accepted."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "callback.error.write"
              ]
            }
          ]
        }
      },
      "/v1/ping": {
        "get": {
          "tags": [
            "ping_endpoints"
          ],
          "summary": "Ping the system",
          "description": "`RATE LIMIT: 8 per minute`\n",
          "operationId": "ping",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            },
            {
              "name": "X-Echo-Error",
              "in": "header",
              "required": false,
              "allowEmptyValue": true,
              "schema": {
                "type": "string",
                "description": "The error message to be returned by the endpoint, for testing purposes.",
                "example": "ping test error message"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The ping was successfully received.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PongObject"
                  }
                }
              }
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "418": {
              "description": "I am a teapot.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorMessage"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "ping"
              ]
            }
          ]
        }
      },
      "/v1/reports": {
        "post": {
          "tags": [
            "reports_endpoints"
          ],
          "summary": "Request a business report for an organization",
          "description": "`RATE LIMIT: 2 per minute`\n",
          "operationId": "generateReport",
          "deprecated": true,
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateReportRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The request was successfully processed and report is being generated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GenerateReportResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "reports.generate_report"
              ]
            }
          ]
        }
      },
      "/v1/reports/{jobId}": {
        "get": {
          "tags": [
            "reports_endpoints"
          ],
          "summary": "Request status of the report using jobId",
          "description": "`RATE LIMIT: 2 per minute`\n",
          "operationId": "getReportStatus",
          "parameters": [
            {
              "$ref": "#/components/parameters/jobId"
            }
          ],
          "responses": {
            "200": {
              "description": "Report is found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetReportStatusResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "reports.generate_report"
              ]
            }
          ]
        }
      },
      "/v1/reports/generate": {
        "post": {
          "tags": [
            "reports_endpoints"
          ],
          "summary": "Request a business report for multiple stores",
          "operationId": "generateReportMulti",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateReportMultiRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The request was successfully processed and report is being generated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GenerateReportResponse"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "reports.generate_report"
              ]
            }
          ]
        }
      },
      "/v1/auth/token": {
        "post": {
          "tags": [
            "auth_endpoints"
          ],
          "summary": "Generate token",
          "description": "Client credentials in the request-body and HTTP Basic Auth are supported.",
          "operationId": "requestToken",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthTokenGenerationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The token was successfully generated.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HydraToken"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          }
        }
      },
      "/v1/stores": {
        "post": {
          "tags": [
            "account_pairing_endpoints"
          ],
          "summary": "Complete Store Onboarding",
          "description": "`RATE LIMIT: 2 per minute`\n\nThe asynchronous callback of the Upsert Store Webhook. The partner application will use this endpoint  to inform if the store data and credentials provided through the `Upsert Store Webhook` were enough to  create/update and validate the store. If informing success, the `Store ID` must be provided to  complete the store onboarding process. If informing failure, use the `Error Message` field to provide  details about the problem.\n",
          "operationId": "upsertStorelinkEventResultEndpoint",
          "parameters": [
            {
              "$ref": "#/components/parameters/applicationIdHeader"
            },
            {
              "$ref": "#/components/parameters/eventIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStorelinkEventResultRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "If informing success, it means the store onboarding process is complete. If informing failure, it means new credentials need to be provided through the Upsert Store Webhook."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "stores.manage"
              ]
            }
          ]
        }
      },
      "/v1/stores/status": {
        "put": {
          "tags": [
            "account_pairing_endpoints"
          ],
          "summary": "Update Store Status",
          "description": "`RATE LIMIT: 2 per minute`\n\nThe partner application should call this endpoint when needing to change the status of a store that already completed the onboarding process.\n",
          "operationId": "updateStoreStatusEndpoint",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStorelinkStatusRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "The store status was successfully updated."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "stores.manage"
              ]
            }
          ]
        }
      },
      "/finance/v1/financial-transactions": {
        "post": {
          "tags": [
            "finance_endpoints"
          ],
          "summary": "Post financial transactions",
          "operationId": "postFinancialTransactions",
          "description": "Post financial data related to a given order.",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialTransaction"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The financial transaction for the order was successfully processed."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "finance"
              ]
            }
          ]
        }
      },
      "/finance/v1/financial-invoices": {
        "post": {
          "tags": [
            "finance_endpoints"
          ],
          "summary": "Post a financial invoice",
          "operationId": "postFinancialInvoice",
          "description": "Post a financial invoice containing payout and financial data for orders in a given period of time.",
          "parameters": [
            {
              "$ref": "#/components/parameters/storeIdHeader"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialInvoice"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "The financial transaction for the order was successfully processed."
            },
            "400": {
              "$ref": "#/components/responses/400"
            },
            "401": {
              "$ref": "#/components/responses/401"
            },
            "403": {
              "$ref": "#/components/responses/403"
            },
            "404": {
              "$ref": "#/components/responses/404"
            },
            "422": {
              "$ref": "#/components/responses/422"
            }
          },
          "security": [
            {
              "OAuth2.0": [
                "finance"
              ]
            }
          ]
        }
      }
    },
    "components": {
      "securitySchemes": {
        "OAuth2.0": {
          "type": "oauth2",
          "description": "The Authentication/Authorization API support OAuth2.0 protocol. Only Generate Token operation is supported.\n\n## Scopes\n\nScopes must be configured by our internal team to be enabled for an app. Each endpoint requires a given scope that can be verified on each endpoint documentation. When generating an OAuth2.0 token multiple scopes can be requested.\n\n## Generate Token\n\nUsed to generate an OAuth2.0 token that must be used to call all available endpoints.\nClient credentials in the request-body and HTTP Basic Auth are supported.\n\n### Request\n\nRequest body schema: application/x-www-form-urlencoded\n\n### Specification\n\n| **Field**                | **Type**        | **Description** |\n| ------------------------ | --------------- | ------------------------------------------------------------------------------------- |\n| client_id                | string <uuid>   | The error description. |\n| client_secret            | string          | The secret of the client.                                                             |\n| grant_type               | string          | The OAuth2.0 grant types supported. Must be client_credentials.                    |\n| scope                    | string          | The scope to request, multiple scopes are passed delimited by a space character. |\n\n### Example\n\n```\ncurl --location --request POST 'https://{{public-api-url}}/v1/auth/token' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'scope=ping' \\\n  --data-urlencode 'grant_type=client_credentials' \\\n  --data-urlencode 'client_id=[APPLICATION_ID]' \\\n  --data-urlencode 'client_secret=[CLIENT_SECRET]'\n```\n\n### Response\n\nResponse body schema: application/json\n\n### Specification\n\n| **Field**                | **Type**        | **Description** |\n| ------------------------ | --------------- | --------------------------------------------------------------------------------- |\n| access_token             | string          | The OAuth2.0 generated token.                                                   |\n| expires_in               | integer         | Time for token expiration, in seconds.                                              |\n| scope                    | string          | Scopes available for the generated token.                                         |\n| token_type               | string          | The token type, value is always `bearer`.                                         |\n\n### Example\n\n```\n{\n  \"access_token\": \"oMahtBwBbnZeh4Q66mSuLFmk2V0_CLCKVt0aYcNJlcg.yditzjwCP7yp0PgR6AzQR3wQ1rTdCjkcPeAMuyfK-NU\",\n  \"expires_in\": 2627999,\n  \"scope\": \"ping orders.create\",\n  \"token_type\": \"bearer\"\n}\n```\n\n### Error Responses\n\nHTTP Status Code `400`: The request is malformed.\n\nHTTP Status Code `401`: Invalid Authorization.\n\nHTTP Status Code `422`: The request body is not valid.\n\n### Example\n\n```\n{\n  \"message\": \"Client Secret and Authorization header are null.\",\n  \"details\": []\n}\n```\n\n## Usage\n\nThe token provided in field `access_token` is used to authenticate when consuming the API endpoints. Send the token value in the `Authorization` header of every request. The token expiration time is represented in the field `expired_in`, in seconds. Currently, all tokens are valid for 30 days and should be stored and re-used while still valid.\n\n### Example\n\n```\ncurl --location --request GET 'https://{{public-api-url}}/v1/ping' \\\n  --header 'Authorization: Bearer <access_token>' \\\n  --header 'X-Store-Id: <storeId>'\n```\n",
          "flows": {
            "clientCredentials": {
              "tokenUrl": "/v1/auth/token",
              "scopes": {
                "menus.publish": "Token has permission to notify the result of a publish menus operation for a given store.",
                "menus.get_current": "Token has permission to send the current state of a menu, after being requested by a webhook event.",
                "menus.upsert_hours": "Token has permission to notify the receiving of the upsert hours menu event, after being requested by a webhook event.",
                "menus.pos_publish": "Token has permission to read available integration targets and to publish complete menus for selected integration targets.",
                "menus.async_job.read": "Token has permission to read the status of a menu upsert job.",
                "menus.entity_suspension": "Token has permission to notify the result of a menu entity availability update, after being requested by a webhook event.",
                "menus.read": "Token has permission to read the current menus for a given store.",
                "menus.upsert": "Token has permission to create/update menus for a given store.",
                "orders.customer_payment_update": "Token has permission to update customer’s payment information for a previously created order for a given store.",
                "orders.delivery_info_update": "Token has permission to update delivery information for a previously created order.",
                "orders.status_update": "Token has permission to update the order status for a previously created order.",
                "orders.create": "Token has permission to create new order for a given store.",
                "orders.update": "Token has permission to create and update new orders for a given store.",
                "ping": "Token has permission to ping the system.",
                "reports.generate_report": "Token has permission to request reports for given store(s) and period of time.",
                "storefront.store_pause_unpause": "Token has permission to notify the result of a pause/unpause operation, after being requested by a webhook event.",
                "storefront.store_availability": "Token has permission to send the current state of store.",
                "storefront.store_hours_configuration": "Token has permission to send the current store hours configuration.",
                "delivery.provider": "Token has permission to send the delivery operation result.",
                "callback.error.write": "Token has permission to send failed webhook event results.",
                "stores.manage": "Allow the use of stores' endpoints and webhooks."
              }
            }
          }
        }
      },
      "schemas": {
        "StoreId": {
          "type": "string",
          "description": "The unique identifier of the store in the partner application. This ID, along with the `Application ID`, will be used to match the correct store when performing operations. It cannot be longer than 255 characters and must only contain printable ASCII characters.",
          "example": "partner-store-unique-identifier"
        },
        "SourceExternalIdentifiers": {
          "type": "object",
          "nullable": true,
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique ID for the order that was placed.",
              "example": "69f60a06-c335-46d9-b5a1-97f1a211c514"
            },
            "friendlyId": {
              "type": "string",
              "description": "ID used for driver pickup and restaurant management.",
              "example": "ABCDE"
            },
            "source": {
              "type": "string",
              "description": "Describes the source of the order, typically from a food ordering marketplace.",
              "example": "ubereats"
            },
            "sourceType": {
              "type": "string",
              "description": "source type of the order",
              "enum": [
                "POINT_OF_SALE",
                "ORDERING_MARKETPLACE",
                "AGGREGATOR"
              ]
            },
            "sourceExternalIdentifiers": {
              "nullable": true,
              "$ref": "#/components/schemas/SourceExternalIdentifiers"
            }
          },
          "description": "The external identifiers."
        },
        "OrderExternalIdentifiers": {
          "required": [
            "friendlyId",
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique ID for the order that was placed.",
              "example": "69f60a06-c335-46d9-b5a1-97f1a211c514"
            },
            "friendlyId": {
              "type": "string",
              "description": "ID used for driver pickup and restaurant management.",
              "example": "ABCDE"
            },
            "source": {
              "type": "string",
              "nullable": true,
              "description": "Describes the source of the order, typically from a food ordering marketplace.",
              "example": "ubereats"
            },
            "sourceType": {
              "type": "string",
              "nullable": true,
              "description": "source type of the order",
              "enum": [
                "POINT_OF_SALE",
                "ORDERING_MARKETPLACE",
                "AGGREGATOR"
              ]
            },
            "sourceExternalIdentifiers": {
              "nullable": true,
              "$ref": "#/components/schemas/SourceExternalIdentifiers"
            }
          },
          "description": "The external identifiers."
        },
        "ItemModifier": {
          "required": [
            "quantity"
          ],
          "type": "object",
          "properties": {
            "quantity": {
              "minimum": 1,
              "maximum": 1000,
              "type": "integer",
              "description": "The number of times the modifier was applied to the given item.",
              "format": "int32",
              "example": 1
            },
            "skuPrice": {
              "type": "number",
              "nullable": true,
              "description": "The stored sku price of this item",
              "readOnly": true,
              "example": 1
            },
            "id": {
              "type": "string",
              "nullable": true,
              "description": "The unique ID of the modifier product.",
              "example": "d7a21692-9195-43aa-a58f-5395bba8a804"
            },
            "name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the modifier as displayed to the customer.",
              "example": "Avocado"
            },
            "price": {
              "type": "number",
              "nullable": true,
              "description": "The price of the sold modifier.",
              "example": 1
            },
            "groupName": {
              "type": "string",
              "nullable": true,
              "description": "The parent group of the modifier item",
              "example": "Add ons"
            },
            "groupId": {
              "type": "string",
              "nullable": true,
              "description": "The unique ID of the parent group",
              "example": "fb52b138-7ac4-42c1-bfd8-664d57113a41"
            },
            "modifiers": {
              "type": "array",
              "nullable": true,
              "description": "Nested modifiers applied to the item.",
              "maxItems": 50,
              "items": {
                "$ref": "#/components/schemas/ItemModifier"
              }
            }
          }
        },
        "Item": {
          "required": [
            "quantity"
          ],
          "type": "object",
          "properties": {
            "quantity": {
              "minimum": 1,
              "maximum": 1000,
              "type": "integer",
              "description": "The quantity of the item ordered by the customer.",
              "format": "int32",
              "example": 1
            },
            "skuPrice": {
              "type": "number",
              "nullable": true,
              "description": "The stored sku price of this item",
              "readOnly": true,
              "example": 5.9
            },
            "id": {
              "type": "string",
              "nullable": true,
              "description": "The unique ID of the item.",
              "example": "33e0418f-3d56-4360-ba03-18fc5f8844a3"
            },
            "name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the item as displayed to the customer.",
              "example": "Juicy Cheeseburger"
            },
            "note": {
              "type": "string",
              "nullable": true,
              "description": "An optional item-level note provided by the customer.",
              "example": "Please cook to well done!"
            },
            "categoryId": {
              "type": "string",
              "nullable": true,
              "description": "The unique ID of the category of this item.",
              "example": "303de078-870d-4349-928b-946869d4d69b"
            },
            "categoryName": {
              "type": "string",
              "nullable": true,
              "description": "The name of the category of this item.",
              "example": "Burgers"
            },
            "price": {
              "type": "number",
              "nullable": true,
              "description": "The price of the sold item.",
              "example": 5.9
            },
            "modifiers": {
              "type": "array",
              "nullable": true,
              "description": "Modifiers to the base item.",
              "maxItems": 50,
              "items": {
                "$ref": "#/components/schemas/ItemModifier"
              }
            }
          }
        },
        "PersonalIdentifiers": {
          "type": "object",
          "nullable": true,
          "properties": {
            "taxIdentificationNumber": {
              "type": "string",
              "nullable": true,
              "description": "Person tax identification number.",
              "example": 1234567890
            }
          },
          "description": "The person's personal identifiers (e.g. tax identification number)."
        },
        "Person": {
          "type": "object",
          "nullable": true,
          "properties": {
            "name": {
              "type": "string",
              "nullable": true,
              "description": "The person's name as it should be displayed.",
              "example": "Jane Doe"
            },
            "phone": {
              "type": "string",
              "nullable": true,
              "description": "The person's phone number.",
              "example": "+1-555-555-5555"
            },
            "phoneCode": {
              "type": "string",
              "nullable": true,
              "description": "A code or extension of the phone number.",
              "example": "111 11 111"
            },
            "email": {
              "type": "string",
              "nullable": true,
              "description": "The person's email address.",
              "example": "email@email.com"
            },
            "personalIdentifiers": {
              "$ref": "#/components/schemas/PersonalIdentifiers"
            }
          },
          "description": "The recipient information."
        },
        "Courier": {
          "type": "object",
          "nullable": true,
          "properties": {
            "name": {
              "type": "string",
              "description": "The person's name as it should be displayed.",
              "nullable": true,
              "example": "Jane Doe"
            },
            "phone": {
              "type": "string",
              "description": "The person's phone number.",
              "nullable": true,
              "example": "+1-555-555-5555"
            },
            "phoneCode": {
              "type": "string",
              "nullable": true,
              "description": "A code or extension of the phone number.",
              "example": "111 11 111"
            },
            "email": {
              "type": "string",
              "description": "The person's email address.",
              "nullable": true,
              "example": "email@email.com"
            },
            "personalIdentifiers": {
              "$ref": "#/components/schemas/PersonalIdentifiers"
            }
          },
          "description": "Details about the delivery courier."
        },
        "Location": {
          "required": [
            "latitude",
            "longitude"
          ],
          "type": "object",
          "nullable": true,
          "properties": {
            "latitude": {
              "type": "number",
              "description": "The latitude of the location.",
              "format": "double",
              "example": 38.8977
            },
            "longitude": {
              "type": "number",
              "description": "The longitude of the location.",
              "format": "double",
              "example": 77.0365
            }
          },
          "description": "Latitude and longitude of the address."
        },
        "Address": {
          "type": "object",
          "nullable": true,
          "properties": {
            "fullAddress": {
              "type": "string",
              "nullable": true,
              "description": "Full, human comprehensible address. It is usually formatted in the order appropriate for your locale.",
              "example": "123 Sample Street Ste 100, San Francisco, CA 94103"
            },
            "postalCode": {
              "type": "string",
              "description": "Postal code of the address.",
              "example": "20500"
            },
            "city": {
              "type": "string",
              "description": "The city/town portion of the address.",
              "example": "Washington"
            },
            "state": {
              "type": "string",
              "description": "Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, or a prefecture.",
              "example": "DC"
            },
            "countryCode": {
              "type": "string",
              "description": "CLDR country code. See http://cldr.unicode.org/",
              "example": "US"
            },
            "addressLines": {
              "type": "array",
              "nullable": true,
              "description": "Address lines (e.g. street, PO Box, or company name) or the full single line address (e.g. street, city, state, country, zip).",
              "example": [
                "1600 Pennsylvania Avenue NW",
                "123 Sample Street Ste 100, San Francisco, CA 94103"
              ],
              "items": {
                "type": "string"
              }
            },
            "linesOfAddress": {
              "type": "array",
              "nullable": true,
              "deprecated": true,
              "description": "Deprecated: use addressLines. Address lines (e.g. street, PO Box, or company name) or the full single line address (e.g. street, city, state, country, zip).",
              "example": [
                "1600 Pennsylvania Avenue NW",
                "123 Sample Street Ste 100, San Francisco, CA 94103"
              ],
              "items": {
                "type": "string"
              }
            },
            "location": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "description": "Order delivery address."
        },
        "DeliveryInfo": {
          "type": "object",
          "nullable": true,
          "properties": {
            "courier": {
              "$ref": "#/components/schemas/Courier"
            },
            "destination": {
              "$ref": "#/components/schemas/Address"
            },
            "licensePlate": {
              "type": "string",
              "nullable": true,
              "description": "License plate of a vehicle used by the courier.",
              "example": "ABC 123"
            },
            "makeModel": {
              "type": "string",
              "nullable": true,
              "description": "Make and model of a vehicle used by the courier.",
              "example": "Honda CR-V"
            },
            "lastKnownLocation": {
              "$ref": "#/components/schemas/Location"
            },
            "note": {
              "type": "string",
              "nullable": true,
              "description": "Special delivery instructions, if any.",
              "example": "Gate code 123"
            }
          },
          "description": "Information on order's delivery process."
        },
        "OrderTotal": {
          "required": [
            "subtotal"
          ],
          "type": "object",
          "properties": {
            "subtotal": {
              "type": "number",
              "description": "The order's subtotal, as the sum of all item and modifier prices.",
              "example": 11.97
            },
            "claimedSubtotal": {
              "type": "number",
              "nullable": true,
              "description": "The order's claimed subtotal, without guaranteeing this will match calculated subtotal."
            },
            "discount": {
              "type": "number",
              "nullable": true,
              "description": "Any discount amount for the order.",
              "example": 1
            },
            "tax": {
              "type": "number",
              "nullable": true,
              "description": "Tax paid by the customer.",
              "example": 1.1
            },
            "tip": {
              "type": "number",
              "nullable": true,
              "description": "Tip paid by the customer.",
              "example": 2
            },
            "deliveryFee": {
              "type": "number",
              "nullable": true,
              "description": "Delivery fee.",
              "example": 5
            },
            "total": {
              "type": "number",
              "nullable": true,
              "description": "Order total including everything paid by the customer.",
              "example": 19.07
            },
            "couponCode": {
              "type": "string",
              "nullable": true,
              "description": "Coupon code applied to the order.",
              "example": "VWXYZ98765"
            }
          },
          "description": "Details about values of the order."
        },
        "SimpleFinanceLine": {
          "required": [
            "subType",
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "subType": {
              "type": "string",
              "nullable": false,
              "enum": [
                "VALUE",
                "TAX",
                "VALUE_WITH_TAX",
                "VAT"
              ],
              "description": "type of the finance line."
            },
            "name": {
              "type": "string",
              "nullable": false,
              "description": "name of the finance line.",
              "example": "sales tax."
            },
            "value": {
              "type": "number",
              "nullable": false,
              "description": "money amount.",
              "example": 3.4
            }
          },
          "description": "simple finance line."
        },
        "CompositeFinanceLine": {
          "required": [
            "breakdown"
          ],
          "type": "object",
          "properties": {
            "breakdown": {
              "type": "array",
              "minItems": 1,
              "description": "Breakdown values for the finance line.",
              "items": {
                "$ref": "#/components/schemas/SimpleFinanceLine"
              }
            }
          },
          "description": "composite finance line can represent a value, tax and VAT for a given line as a list of SimpleFinanceLine objects"
        },
        "FinancialData": {
          "required": [
            "foodSales"
          ],
          "type": "object",
          "properties": {
            "foodSales": {
              "nullable": false,
              "description": "Breakdown of the total value of items within the order.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "feeForRestaurantProvidedDelivery": {
              "nullable": true,
              "description": "Extra charge to the customer when order is delivered by the store itself.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "restaurantFundedDiscount": {
              "nullable": true,
              "description": "Discount funded by the restaurant.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "tipForRestaurant": {
              "nullable": true,
              "description": "Tip for the restaurant.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "adjustments": {
              "nullable": true,
              "description": "Any adjustments that may happen to the order total value.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "packingFee": {
              "nullable": true,
              "description": "Fee charged to the customer for the process of packing and fulfilling the order.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "bagFee": {
              "nullable": true,
              "description": "Fee charged to the customer for providing bags for the order.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "serviceProviderDiscount": {
              "nullable": true,
              "description": "Discount funded by the service provider (order source).",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "tipForServiceProviderCourier": {
              "nullable": true,
              "description": "Tip for the courier from the service provider.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "feeForServiceProviderDelivery": {
              "nullable": true,
              "description": "Fee charged to the customer for a delivery provided by the service provider.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "smallOrderFee": {
              "nullable": true,
              "description": "Fee charged to the customer when the order value is less than the minimum value.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "serviceFee": {
              "nullable": true,
              "description": "Any service fees charged by the service provider to the customer.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "otherFee": {
              "nullable": true,
              "description": "All the extra costs that the customer has to pay, are different from tips, delivery fees, bag fees, packing fees, and service fees.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "netPayout": {
              "nullable": true,
              "description": "The net payout received by the store.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CompositeFinanceLine"
                }
              ]
            },
            "couponCodes": {
              "nullable": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Any codes entered by the customer at order checkout.",
              "example": [
                "TACOWED5OFF"
              ]
            }
          },
          "description": "Breakdown of order values. Represents total values, fees, discounts, and any possible adjustments that may happen in the order value.\n\nBreakdown lists can be used to represent aggregate values (e.g. order total value) or, when available, can accurately represent the values of each item/fee/tax/charges related to the order.\n\nAll objects in breakdown lists have a required property \"subType\". Allowed values are:\n\n**VALUE**: represent the net value of the order/item/fee. Should be used in the following cases:\n - when the amount does not contain taxes or VAT\n - when tax/VAT is a known value, in that case, the list must contain an object with subtype TAX or VAT representing this value.\n\n**TAX**: represent the tax value for the order/item/fee. Should be used when tax amount is available, in that case, this information should be part of the breakdown list with the \"VALUE\" as the net amount, example below:\n\n\n  ```\n    \"breakdown\": [\n        {\n            \"name\": \"Item 1\",\n            \"value\": 10,\n            \"subType\": \"VALUE\"\n        },\n        {\n            \"name\": \"Item 1 - Tax\",\n            \"value\": 2,\n            \"subType\": \"TAX\"\n        }\n    ]\n  ```\n\n\n**VAT**: represents the amount for value-added tax. Should be used when the order/item/fee contains VAT. In that case,  this information should be part of the breakdown list with the \"VALUE\" as net amount, example below:\n\n\n  ```\n    \"breakdown\": [\n        {\n            \"name\": \"Item 1\",\n            \"value\": 12,\n            \"subType\": \"VALUE\"\n        },\n        {\n            \"name\": \"Item 1 - Tax\",\n            \"value\": 2,\n            \"subType\": \"VAT\"\n        }\n    ]\n  ```\n\n\n**VALUE_WITH_TAX**: represents the gross value of the order/item/fee. Should be used when the value includes tax/VAT and values related to taxation are not available.\n\n\n  ```\n    \"breakdown\": [\n        {\n            \"name\": \"Item 1\",\n            \"value\": 12,\n            \"subType\": \"VALUE_WITH_TAX\"\n        }\n    ]\n  ```"
        },
        "CustomerPaymentV2": {
          "type": "object",
          "nullable": true,
          "properties": {
            "customerPaymentDue": {
              "type": "number",
              "nullable": true,
              "description": "The portion of the overall order cost that will be collected when the order is delivered, or when picked up by the customer at the store. This field should not be set if the order was pre-paid.",
              "example": 1
            },
            "customerPrepayment": {
              "type": "number",
              "nullable": true,
              "description": "The portion of the overall order cost that was paid upfront by the customer (online payment), with the remaining portion in the customerPaymentDue. In most cases the order value will be covered entirely by prepayment or entirely by payment_due. But in some cases mixing is allowed.",
              "example": 1
            },
            "customerAmountToReturn": {
              "type": "number",
              "nullable": true,
              "description": "Change (cash back) to be returned to the customer by the courier or store when the order has payment due value.\n\n Scenario:\n 1. Customer places an order for $7.50.\n 2. In the service app, after selecting Cash as payment type, the customer is presented with an additional field to indicate that order will be paid with a single $20 bill.\n 3. When the order is delivered, the courier should have $12.50 in cash on hand to complete the transaction.\n",
              "example": 1
            },
            "paymentDueToRestaurant": {
              "type": "number",
              "nullable": true,
              "description": "The portion of the overall order cost that was received directly by restaurant/store when the order is delivered or picked up. Should be used when customerPaymentDue is set. If payment due is entirely received by the store, customerPaymentDue and paymentDueToRestaurant will have the same value.",
              "example": 1
            }
          },
          "description": "Details about customer payment."
        },
        "Payout": {
          "type": "object",
          "nullable": true,
          "properties": {
            "payoutFromServiceProvider": {
              "type": "number",
              "nullable": true,
              "description": "Payout amount that will be received from service provider (usually the order source).",
              "example": 1
            },
            "payoutFrom3rdParty": {
              "type": "number",
              "nullable": true,
              "description": "Payout amount that will be received from any 3rd party organization involved.",
              "example": 1
            },
            "cashPayout": {
              "type": "number",
              "nullable": true,
              "description": "Payout amount received from orders paid in cash directly to the store.",
              "example": 1
            }
          },
          "description": "Details on payout."
        },
        "OrderTotalV2": {
          "required": [
            "customerTotal"
          ],
          "type": "object",
          "nullable": true,
          "properties": {
            "customerTotal": {
              "nullable": false,
              "allOf": [
                {
                  "$ref": "#/components/schemas/FinancialData"
                }
              ]
            },
            "customerPayment": {
              "nullable": true,
              "description": "The customer perspective, each price field in this model is meant to represent the values the customer paid/received and how. Values must match amounts and payment methods described in customerPayments.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CustomerPaymentV2"
                }
              ]
            },
            "payout": {
              "nullable": true,
              "description": "Breakdown of net payout received by the store. Optional object, should be provided when payout information is available during the order lifecycle.",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Payout"
                }
              ]
            }
          },
          "description": "V2 for details about values of the order, provides richer objects allowing to capture taxes, misc charges, payments more precisely."
        },
        "CustomerPayment": {
          "required": [
            "paymentMethod",
            "processingStatus",
            "value"
          ],
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "description": "The portion of the overall amount that needs to be paid.",
              "example": 2
            },
            "processingStatus": {
              "type": "string",
              "description": "The processing status of the payment.",
              "enum": [
                "COLLECTABLE",
                "PROCESSED"
              ]
            },
            "paymentMethod": {
              "type": "string",
              "description": "The method of payment.",
              "enum": [
                "CASH",
                "CARD",
                "UNKNOWN",
                "OTHER",
                "CHEQUE"
              ]
            }
          }
        },
        "FulfillmentInfo": {
          "type": "object",
          "nullable": true,
          "properties": {
            "pickupTime": {
              "type": "string",
              "nullable": true,
              "description": "Estimated time (in UTC) that the courier or customer will pick up the order.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "deliveryTime": {
              "type": "string",
              "nullable": true,
              "description": "Estimated time (in UTC) when the order is expected to be delivered. This should be filled in if FulfillmentMode is delivery.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "fulfillmentMode": {
              "type": "string",
              "description": "How an order is expected to be fulfilled.",
              "default": "DELIVERY",
              "enum": [
                "DELIVERY",
                "RESTAURANT_DELIVERY",
                "PICKUP",
                "DINE_IN"
              ]
            },
            "schedulingType": {
              "type": "string",
              "nullable": true,
              "description": "Describes whether this order should be cooked as soon as possible, or some time in the future. Please use the pickupTime and/or deliveryTime to indicate when. If no scheduling type is provided, we assume the order should be prepared as soon as possible.",
              "enum": [
                "ASAP",
                "FIXED_TIME"
              ]
            },
            "courierStatus": {
              "type": "string",
              "nullable": true,
              "description": "The status of the courier.",
              "enum": [
                "COURIER_ASSIGNED",
                "COURIER_ON_ROUTE_TO_PICKUP",
                "COURIER_ARRIVED",
                "COURIER_PICKED_UP_FOOD",
                "COURIER_COMPLETED"
              ]
            }
          },
          "description": "Information on order fulfillment."
        },
        "Order": {
          "required": [
            "currencyCode",
            "externalIdentifiers",
            "status"
          ],
          "type": "object",
          "properties": {
            "externalIdentifiers": {
              "$ref": "#/components/schemas/OrderExternalIdentifiers"
            },
            "currencyCode": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values in this order.",
              "example": "EUR"
            },
            "status": {
              "type": "string",
              "description": "The status of the order.",
              "enum": [
                "NEW_ORDER",
                "CONFIRMED",
                "PICKED_UP",
                "CANCELED",
                "FULFILLED",
                "PREPARED",
                "REJECTED",
                "UNKNOWN"
              ]
            },
            "items": {
              "type": "array",
              "description": "Items ordered.",
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/Item"
              }
            },
            "orderedAt": {
              "type": "string",
              "nullable": true,
              "description": "The date (in UTC) when the order was placed by the customer.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "customer": {
              "$ref": "#/components/schemas/Person"
            },
            "customerNote": {
              "type": "string",
              "nullable": true,
              "description": "An order-level note provided by the customer.",
              "example": "Please include extra napkins!"
            },
            "deliveryInfo": {
              "$ref": "#/components/schemas/DeliveryInfo"
            },
            "orderTotal": {
              "nullable": true,
              "$ref": "#/components/schemas/OrderTotal"
            },
            "orderTotalV2": {
              "nullable": true,
              "$ref": "#/components/schemas/OrderTotalV2"
            },
            "customerPayments": {
              "type": "array",
              "nullable": true,
              "description": "Details about the payments made by the customer.",
              "items": {
                "$ref": "#/components/schemas/CustomerPayment"
              }
            },
            "fulfillmentInfo": {
              "$ref": "#/components/schemas/FulfillmentInfo"
            }
          },
          "description": "An order placed by a customer."
        },
        "OrderReference": {
          "required": [
            "externalIdentifiers",
            "storeId"
          ],
          "type": "object",
          "properties": {
            "externalIdentifiers": {
              "$ref": "#/components/schemas/OrderExternalIdentifiers"
            },
            "storeId": {
              "type": "string",
              "description": "The identifier of the store.",
              "example": "ckdss-store-id"
            }
          },
          "description": "An order reference."
        },
        "ErrorDetail": {
          "type": "object",
          "properties": {
            "attribute": {
              "type": "string",
              "description": "The error attribute.",
              "example": "Order Currency Code"
            },
            "message": {
              "type": "string",
              "description": "The error detail description.",
              "example": "Order Currency Code must be exactly 3 characters"
            }
          },
          "description": "The error detail response object."
        },
        "ErrorMessage": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "The error description.",
              "example": "The request body is invalid."
            },
            "details": {
              "type": "array",
              "description": "The error details.",
              "items": {
                "$ref": "#/components/schemas/ErrorDetail"
              }
            }
          },
          "description": "The error response object."
        },
        "OrderStatusUpdateRequest": {
          "required": [
            "orderStatus"
          ],
          "type": "object",
          "properties": {
            "orderStatus": {
              "type": "string",
              "description": "The requested status to transition the order to.",
              "enum": [
                "PREPARED",
                "CANCELED",
                "FULFILLED"
              ]
            }
          },
          "description": "The request to change an order status."
        },
        "OrderCustomerPaymentUpdateRequest": {
          "required": [
            "currencyCode",
            "customerPayment"
          ],
          "type": "object",
          "properties": {
            "currencyCode": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values in this order.",
              "example": "EUR"
            },
            "customerPayment": {
              "type": "array",
              "description": "The requested customer payment to transition the order to.",
              "items": {
                "$ref": "#/components/schemas/CustomerPayment"
              }
            },
            "orderTotal": {
              "nullable": true,
              "$ref": "#/components/schemas/OrderTotal"
            },
            "orderTotalsV2": {
              "nullable": true,
              "$ref": "#/components/schemas/OrderTotalV2"
            }
          },
          "description": "The request to update customer payment for an order."
        },
        "RequiredDeliveryInfo": {
          "type": "object",
          "properties": {
            "courier": {
              "$ref": "#/components/schemas/Courier"
            },
            "destination": {
              "$ref": "#/components/schemas/Address"
            },
            "licensePlate": {
              "type": "string",
              "nullable": true,
              "description": "License plate of a vehicle used by the courier.",
              "example": "ABC 123"
            },
            "makeModel": {
              "type": "string",
              "nullable": true,
              "description": "Make and model of a vehicle used by the courier.",
              "example": "Honda CR-V"
            },
            "lastKnownLocation": {
              "$ref": "#/components/schemas/Location"
            },
            "note": {
              "type": "string",
              "nullable": true,
              "description": "Special delivery instructions, if any.",
              "example": "Gate code 123"
            }
          },
          "description": "Information on order's delivery process."
        },
        "OrderDeliveryInfoUpdateRequest": {
          "required": [
            "deliveryInfo"
          ],
          "type": "object",
          "properties": {
            "deliveryInfo": {
              "$ref": "#/components/schemas/RequiredDeliveryInfo"
            }
          },
          "description": "The request to update an order delivery info status."
        },
        "UploadPastOrdersRequest": {
          "required": [
            "orders"
          ],
          "type": "object",
          "properties": {
            "orders": {
              "type": "array",
              "description": "The past orders you are trying to upload",
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "description": "The request to create past orders (read only)."
        },
        "UploadPastOrdersResponse": {
          "required": [
            "orderReferences"
          ],
          "type": "object",
          "properties": {
            "orderReferences": {
              "type": "array",
              "description": "References for orders that were successfully uploaded.",
              "items": {
                "$ref": "#/components/schemas/OrderReference"
              }
            }
          },
          "description": "The response to create a past order (read only)."
        },
        "OrderIdentifier": {
          "required": [
            "id",
            "source"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique ID for the order that was placed.",
              "example": "69f60a06-c335-46d9-b5a1-97f1a211c514"
            },
            "source": {
              "type": "string",
              "description": "Describes the source of the order, typically from a food ordering marketplace.",
              "example": "ubereats"
            }
          },
          "description": "The external identifiers of the order."
        },
        "POSReInjectionRequest": {
          "required": [
            "orderExternalIdentifiers"
          ],
          "type": "object",
          "properties": {
            "orderExternalIdentifiers": {
              "$ref": "#/components/schemas/OrderIdentifier"
            }
          },
          "description": "The request to change an order status."
        },
        "POSConfirmOrderRequest": {
          "required": [
            "orderExternalIdentifiers"
          ],
          "type": "object",
          "properties": {
            "orderExternalIdentifiers": {
              "$ref": "#/components/schemas/OrderIdentifier"
            },
            "estimatedPrepTimeMinutes": {
              "type": "integer",
              "nullable": true,
              "description": "Estimated order preparation time in minutes.",
              "example": 15
            }
          },
          "description": "The request to confirm an order."
        },
        "POSCancelOrderRequest": {
          "required": [
            "orderExternalIdentifiers",
            "cancellationReason"
          ],
          "type": "object",
          "properties": {
            "orderExternalIdentifiers": {
              "$ref": "#/components/schemas/OrderIdentifier"
            },
            "cancellationReason": {
              "type": "string",
              "description": "The reason for cancellation.",
              "enum": [
                "REASON_UNKNOWN",
                "DUPLICATE_ORDER",
                "UNAVAILABLE_ITEM",
                "FRAUDULENT_EATER",
                "RESTAURANT_INTERNAL_ISSUE",
                "KITCHEN_CLOSED",
                "CUSTOMER_CALLED_TO_CANCEL",
                "RESTAURANT_TOO_BUSY",
                "CANNOT_COMPLETE_CUSTOMER_REQUEST",
                "UNACCEPTED_ORDER",
                "RESTAURANT_CANCELED",
                "AUTOMATICALLY_CANCELED",
                "LATE_DELIVERY",
                "COURIER_NOT_FOUND",
                "CUSTOMER_NOT_FOUND",
                "UNABLE_TO_DELIVER",
                "ALL_ITEMS_OUT_OF_STOCK",
                "ALL_ITEMS_EXPIRED",
                "ALL_ITEMS_DAMAGED",
                "LABOR_UNAVAILABLE",
                "REASON_OTHER"
              ]
            },
            "cancelingParty": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "description": "The request to cancel an order."
        },
        "POSOrderStatusUpdateRequest": {
          "required": [
            "orderExternalIdentifiers",
            "orderStatus"
          ],
          "type": "object",
          "properties": {
            "orderStatus": {
              "type": "string",
              "description": "The requested status to transition the order to.",
              "enum": [
                "CONFIRMED",
                "CANCELED"
              ]
            },
            "orderExternalIdentifiers": {
              "$ref": "#/components/schemas/OrderIdentifier"
            }
          },
          "description": "The request to change an order status."
        },
        "OrderFeed": {
          "required": [
            "orders"
          ],
          "type": "object",
          "properties": {
            "orders": {
              "type": "array",
              "description": "Array of Orders",
              "items": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "offsetToken": {
              "type": "string",
              "description": "Opaque token used to fetch the following page. If not set, no more orders are available.",
              "example": "H12MAF2fFaFFFa"
            }
          },
          "description": "An order feed response"
        },
        "PosOrderCancelDetails": {
          "required": [
            "cancelSource"
          ],
          "type": "object",
          "properties": {
            "cancelSource": {
              "type": "string",
              "description": "Source of the order cancellation",
              "enum": [
                "CANCEL_SOURCE_UNKNOWN",
                "CANCEL_SOURCE_OPERATOR",
                "CANCEL_SOURCE_SERVICE_PROVIDER"
              ]
            }
          },
          "description": "Details about a canceled Pos order"
        },
        "PosOrderIssue": {
          "required": [
            "code"
          ],
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The specific issues with this item",
              "enum": [
                "ORDER_ISSUE_UNKNOWN",
                "ORDER_ISSUE_MENU_RESOLUTION_FAILED",
                "ORDER_ISSUE_NO_SUPPORTED_POS",
                "ORDER_ISSUE_VALIDATION_ONLY",
                "ORDER_ISSUE_POS_VENDOR_ERROR",
                "ORDER_ISSUE_ORDER_DOCUMENT_INCOMPLETE",
                "ORDER_ISSUE_STORELINK_MISSING",
                "ORDER_ISSUE_CANCEL_FAILED"
              ]
            },
            "description": {
              "type": "string",
              "description": "A friendly description describing what went wrong"
            }
          },
          "description": "Issue codes for issues encountered when processing a POS order"
        },
        "PosItemIssue": {
          "required": [
            "code"
          ],
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The error code indicating the type of error",
              "enum": [
                "ITEM_ISSUE_UNKNOWN",
                "ITEM_ISSUE_CUSTOMER_ITEM_MISMATCH",
                "ITEM_ISSUE_MENU_IMPORT_INCOMPLETE",
                "ITEM_ISSUE_NO_MENU_ENTITY_PATH",
                "ITEM_ISSUE_MULTIPLE_ENTITY_PATHS",
                "ITEM_ISSUE_MISSING_EXTERNAL_DATA_FOR_POS",
                "ITEM_ISSUE_ENTITY_PATH_INVALID",
                "ITEM_ISSUE_CATEGORY_MISSING",
                "ITEM_ISSUE_EXTERNAL_MODIFIER_GROUP_MISSING",
                "ITEM_ISSUE_INTERNAL_MODIFIER_GROUP_MISSING"
              ]
            },
            "description": {
              "type": "string",
              "description": "A friendly description describing what went wrong"
            }
          },
          "description": "A detailed issue encountered with this item or modifier"
        },
        "PosItemIssues": {
          "type": "object",
          "properties": {
            "externalId": {
              "type": "string",
              "description": "External id of the item",
              "example": "external-item-id"
            },
            "posItemIssues": {
              "type": "array",
              "description": "The specific issues with this item",
              "items": {
                "$ref": "#/components/schemas/PosItemIssue"
              }
            }
          },
          "description": "POS item or modifier issues"
        },
        "PosOrderIssues": {
          "type": "object",
          "properties": {
            "posOrderIssues": {
              "type": "array",
              "description": "The specific issues with this order",
              "items": {
                "$ref": "#/components/schemas/PosOrderIssue"
              }
            },
            "posItemIssues": {
              "type": "array",
              "description": "The specific issues with individual items or modifiers on this orde",
              "items": {
                "$ref": "#/components/schemas/PosItemIssues"
              }
            }
          },
          "description": "POS Order issues"
        },
        "OrderWithPosInfo": {
          "required": [
            "order",
            "injectionState",
            "injectionEvent"
          ],
          "type": "object",
          "properties": {
            "order": {
              "$ref": "#/components/schemas/Order"
            },
            "injectionState": {
              "type": "string",
              "description": "Current Pos injection state",
              "enum": [
                "INJECTION_STATE_UNKNOWN",
                "INJECTION_PENDING",
                "INJECTION_SUCCEEDED",
                "INJECTION_FAILED_ATTEMPT",
                "INJECTION_MANUAL_INJECTION_SUCCEEDED",
                "INJECTION_MANUAL_INJECTION_REQUIRED",
                "INJECTION_SUCCEEDED_WITH_OPEN_ITEMS",
                "INJECTED_ORDER_CANCELED",
                "INJECTED_ORDER_CANCEL_FAILED",
                "INJECTED_ORDER_REJECTED",
                "INJECTED_ORDER_REJECT_FAILED",
                "RE_INJECTION_REQUESTED",
                "RE_INJECTION_PENDING"
              ]
            },
            "posOrderCancelDetails": {
              "nullable": true,
              "description": "If canceled - specific details about why this order was canceled",
              "$ref": "#/components/schemas/PosOrderCancelDetails"
            },
            "injectionEvent": {
              "type": "string",
              "description": "The order event that triggered order injection into Pos",
              "enum": [
                "INJECTION_EVENT_UNKNOWN",
                "INJECTION_EVENT_ORDER_CREATE",
                "INJECTION_EVENT_ORDER_ACCEPT",
                "INJECTION_EVENT_ORDER_IMPORT",
                "INJECTION_EVENT_ORDER_RE_INJECT"
              ]
            },
            "posOrderIssues": {
              "description": "Issues encountered with this Pos order",
              "$ref": "#/components/schemas/PosOrderIssues"
            }
          },
          "description": "An order placed by a customer with POS injection details"
        },
        "ManagerOrderCancelDetails": {
          "required": [
            "cancelSource"
          ],
          "type": "object",
          "properties": {
            "cancelSource": {
              "type": "string",
              "description": "Source of the order cancellation",
              "enum": [
                "UNKNOWN",
                "OPERATOR",
                "SERVICE_PROVIDER"
              ]
            }
          },
          "description": "Details about a canceled manager order"
        },
        "ManagerOrderIssue": {
          "required": [
            "code"
          ],
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The specific issues with this item",
              "enum": [
                "UNKNOWN",
                "MENU_RESOLUTION_FAILED",
                "NO_SUPPORTED_POS",
                "VALIDATION_ONLY",
                "POS_VENDOR_ERROR",
                "INTERNAL_ERROR",
                "MISCONFIGURED_INTEGRATION",
                "CANCEL_FAILED"
              ],
              "example": "MENU_RESOLUTION_FAILED"
            },
            "description": {
              "type": "string",
              "description": "A friendly description describing what went wrong",
              "example": "Order contains unreconciled items"
            }
          },
          "description": "Issue codes for issues encountered when processing a manager order"
        },
        "ManagerItemIssue": {
          "required": [
            "code"
          ],
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The error code indicating the type of error",
              "enum": [
                "UNKNOWN",
                "ITEM_MISMATCH",
                "INCOMPLETE_MENU",
                "NO_PARENT_ENTITY",
                "MULTIPLE_PARENT_ENTITIES",
                "MISCONFIGURED_INTEGRATION",
                "INVALID_PARENT_ENTITY_SETUP",
                "CATEGORY_MISSING",
                "EXTERNAL_MODIFIER_GROUP_MISSING",
                "INTERNAL_MODIFIER_GROUP_MISSING"
              ],
              "example": "ITEM_MISMATCH"
            },
            "description": {
              "type": "string",
              "description": "A friendly description describing what went wrong",
              "example": "Item not found"
            }
          },
          "description": "A detailed issue encountered with this item or modifier"
        },
        "ManagerItemIssues": {
          "type": "object",
          "properties": {
            "externalId": {
              "type": "string",
              "description": "External id of the item",
              "example": "external-item-id"
            },
            "itemIssues": {
              "type": "array",
              "description": "The specific issues with this item",
              "items": {
                "$ref": "#/components/schemas/ManagerItemIssue"
              }
            }
          },
          "description": "Manager item or modifier issues"
        },
        "ManagerOrderIssues": {
          "type": "object",
          "properties": {
            "orderIssues": {
              "type": "array",
              "description": "The specific issues with this order",
              "items": {
                "$ref": "#/components/schemas/ManagerOrderIssue"
              }
            },
            "itemIssues": {
              "type": "array",
              "description": "The specific issues with individual items or modifiers on this order",
              "items": {
                "$ref": "#/components/schemas/ManagerItemIssues"
              }
            }
          },
          "description": "Manager order issues"
        },
        "OrderWithManagerInfo": {
          "required": [
            "order",
            "injectionState",
            "injectionEvent"
          ],
          "type": "object",
          "properties": {
            "order": {
              "$ref": "#/components/schemas/Order"
            },
            "injectionState": {
              "type": "string",
              "description": "Current Manager injection state",
              "enum": [
                "UNKNOWN",
                "PENDING",
                "SUCCEEDED",
                "FAILED_ATTEMPT",
                "MANUAL_INJECTION_SUCCEEDED",
                "MANUAL_INJECTION_REQUIRED",
                "SUCCEEDED_WITH_UNLINKED_ITEM",
                "ORDER_CANCELED",
                "ORDER_CANCEL_FAILED",
                "ORDER_REJECTED",
                "ORDER_REJECT_FAILED",
                "RE_INJECTION_REQUESTED",
                "RE_INJECTION_PENDING"
              ]
            },
            "orderCancelDetails": {
              "nullable": true,
              "description": "If canceled - specific details about why this order was canceled",
              "$ref": "#/components/schemas/ManagerOrderCancelDetails"
            },
            "injectionEvent": {
              "type": "string",
              "description": "The order event that triggered order injection into manager",
              "enum": [
                "UNKNOWN",
                "ORDER_CREATE",
                "ORDER_ACCEPT",
                "ORDER_IMPORT",
                "ORDER_RE_INJECT"
              ]
            },
            "orderIssues": {
              "description": "Issues encountered with this manager order",
              "$ref": "#/components/schemas/ManagerOrderIssues"
            }
          },
          "description": "An order placed by a customer with manager injection details"
        },
        "ManagerConfirmOrderRequest": {
          "type": "object",
          "properties": {
            "estimatedPrepTimeMinutes": {
              "type": "integer",
              "nullable": true,
              "description": "Estimated order preparation time in minutes.",
              "example": 15
            }
          },
          "description": "The request to confirm an order."
        },
        "ManagerCancelOrderRequest": {
          "required": [
            "cancellationReason"
          ],
          "type": "object",
          "properties": {
            "cancellationReason": {
              "type": "string",
              "description": "The reason for cancellation.",
              "enum": [
                "REASON_UNKNOWN",
                "DUPLICATE_ORDER",
                "UNAVAILABLE_ITEM",
                "FRAUDULENT_EATER",
                "RESTAURANT_INTERNAL_ISSUE",
                "KITCHEN_CLOSED",
                "CUSTOMER_CALLED_TO_CANCEL",
                "RESTAURANT_TOO_BUSY",
                "CANNOT_COMPLETE_CUSTOMER_REQUEST",
                "UNACCEPTED_ORDER",
                "RESTAURANT_CANCELED",
                "AUTOMATICALLY_CANCELED",
                "LATE_DELIVERY",
                "COURIER_NOT_FOUND",
                "CUSTOMER_NOT_FOUND",
                "UNABLE_TO_DELIVER",
                "ALL_ITEMS_OUT_OF_STOCK",
                "ALL_ITEMS_EXPIRED",
                "ALL_ITEMS_DAMAGED",
                "LABOR_UNAVAILABLE",
                "REASON_OTHER"
              ]
            },
            "cancelingParty": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "description": "The request to cancel an order."
        },
        "Photo": {
          "title": "All photos for the store, indexed by ID",
          "required": [
            "contentType",
            "fileName",
            "id",
            "url"
          ],
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "URL of the photo.",
              "example": "https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png"
            },
            "fileName": {
              "type": "string",
              "description": "File name",
              "example": "image.jpg"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the Photo.",
              "example": "e9174f75-a293-4908-bba7-9db69871ad81"
            },
            "contentType": {
              "type": "string",
              "description": "The MIME type of the file.",
              "example": "image/jpeg, image/png"
            }
          },
          "description": "All data required to represent a Photo for an entity in menus."
        },
        "Category": {
          "required": [
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier that exists in the third party system. During a menu publish event, uuidV4 ids will be generated for new entities that do not yet exist in the internal menu.",
              "example": "b01485b0-034a-47c5-8a0a-0eeca08bf994"
            },
            "name": {
              "type": "string",
              "description": "Name of Category.",
              "example": "Drinks"
            },
            "description": {
              "type": "string",
              "description": "Description of Category.",
              "example": "All drink items served up nice and fresh!"
            },
            "itemIds": {
              "type": "array",
              "default": [],
              "description": "All items in the category.",
              "items": {
                "type": "string"
              },
              "example": [
                "fa4f0192-4c4e-4455-9db8-61d428c34969"
              ]
            }
          },
          "description": "Categories contain a list of Item references."
        },
        "ModifierGroup": {
          "title": "All ModifierGroups for the Store, indexed by ID",
          "required": [
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier that exists in the third party system. During a menu publish event, uuidV4 ids will be generated for new entities that do not yet exist in the internal menu.",
              "example": "da0e4e94-5670-4175-897a-3b7dde45bed5"
            },
            "name": {
              "type": "string",
              "description": "Name of ModifierGroup.",
              "example": "Choose your type of bagel"
            },
            "minimumSelections": {
              "minimum": 0,
              "type": "integer",
              "description": "Minimum number of selections customers can make in this ModifierGroup. 0 means no min limits.",
              "format": "int32"
            },
            "maximumSelections": {
              "minimum": 0,
              "type": "integer",
              "description": "Maximum number of selections customers can make in this ModifierGroup. 0 means no max limits.",
              "format": "int32"
            },
            "maxPerModifierSelectionQuantity": {
              "minimum": 0,
              "default": 1,
              "type": "integer",
              "description": "Maximum number of selections customers can make for each modifier item in this ModifierGroup. 0 means there is no limit to how many times they can select a single modifier item. If not specified, a value of 1 will be used as the default value.",
              "format": "int32"
            },
            "itemIds": {
              "type": "array",
              "default": [],
              "description": "Identifiers of each Item within this ModifierGroup.",
              "items": {
                "type": "string"
              }
            },
            "description": {
              "type": "string",
              "description": "The description for this modifier group.",
              "example": "Choose any of these delicious types of bagels"
            }
          },
          "description": "Items are sold on the menu. Modifiers to items are items themselves and their relationship is defined by ModifierGroup."
        },
        "HourInterval": {
          "type": "object",
          "properties": {
            "day": {
              "type": "string",
              "description": "Day of the week.",
              "example": "Monday",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            },
            "fromHour": {
              "maximum": 23,
              "minimum": 0,
              "type": "integer",
              "description": "Beginning hour of interval.",
              "format": "int32",
              "example": 8
            },
            "fromMinute": {
              "maximum": 59,
              "minimum": 0,
              "type": "integer",
              "description": "Beginning minute of interval.",
              "format": "int32",
              "example": 0
            },
            "toHour": {
              "maximum": 23,
              "minimum": 0,
              "type": "integer",
              "description": "Ending hour of interval.",
              "format": "int32",
              "example": 20
            },
            "toMinute": {
              "maximum": 59,
              "minimum": 0,
              "type": "integer",
              "description": "Ending minute of interval.",
              "format": "int32",
              "example": 45
            }
          },
          "description": "Represents the beginning and ending of operating time for a menu specific to a Day."
        },
        "Hours": {
          "required": [
            "intervals"
          ],
          "type": "object",
          "properties": {
            "intervals": {
              "type": "array",
              "minItems": 1,
              "description": "List of HourIntervals.",
              "items": {
                "$ref": "#/components/schemas/HourInterval"
              }
            }
          },
          "description": "Hours are represented as a list of HourIntervals."
        },
        "Money": {
          "required": [
            "amount",
            "currencyCode"
          ],
          "type": "object",
          "properties": {
            "currencyCode": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "EUR"
            },
            "amount": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "number",
              "description": "Amount value.",
              "example": 25.21
            }
          },
          "description": "Money amount.",
          "example": 25.21
        },
        "PercentageValue": {
          "required": [
            "decimalValue"
          ],
          "type": "object",
          "properties": {
            "decimalValue": {
              "minimum": 0,
              "type": "number",
              "description": "Percentage value in decimal format.",
              "example": 0.513
            }
          },
          "description": "Percentage value in decimal format.",
          "example": "A decimalValue of 0.513 will equate to 51.3%"
        },
        "AdditionalCharge": {
          "required": [
            "chargeType"
          ],
          "type": "object",
          "properties": {
            "chargeType": {
              "type": "string",
              "description": "The type of the additional charge.",
              "enum": [
                "PACKAGING_CHARGE"
              ]
            },
            "flatCharge": {
              "$ref": "#/components/schemas/Money"
            },
            "percentageCharge": {
              "$ref": "#/components/schemas/PercentageValue"
            }
          },
          "description": "Additional charge to apply. Exactly one of either flatCharge or percentageCharge should be provided."
        },
        "Menu_POS": {
          "title": "All Menus for the store, indexed by ID",
          "required": [
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Internal identifier for Menu.",
              "example": "ff6dd693-5e55-4a92-a359-ea61b23ed423"
            },
            "name": {
              "type": "string",
              "description": "Name of the Menu.",
              "example": "Tasty BBQ"
            },
            "categoryIds": {
              "type": "array",
              "default": [],
              "description": "Identifiers of the categories within this Menu.",
              "items": {
                "type": "string"
              }
            },
            "fulfillmentModes": {
              "type": "array",
              "default": [],
              "description": "The ways in which this menu may be fulfilled. If no values are specified, it is assumed that all fulfillment types are allowed.",
              "items": {
                "type": "string",
                "description": "How an item from a menu is allowed to be fulfilled when ordered by a user.",
                "enum": [
                  "DELIVERY",
                  "PICK_UP",
                  "DINE_IN"
                ]
              }
            },
            "description": {
              "type": "string",
              "description": "Description of the Menu.",
              "example": "Cooking up BBQ deliciousness from around the globe!"
            },
            "hours": {
              "$ref": "#/components/schemas/Hours"
            },
            "additionalCharges": {
              "type": "array",
              "nullable": true,
              "description": "Additional charges to apply for this menu. All additional charges specified on a menu will only be applied once per order.",
              "items": {
                "$ref": "#/components/schemas/AdditionalCharge"
              }
            }
          },
          "description": "A menu for a store."
        },
        "ItemStatus": {
          "required": [
            "saleStatus"
          ],
          "type": "object",
          "properties": {
            "saleStatus": {
              "type": "string",
              "description": "The sale status of the item.",
              "example": "TEMPORARILY_NOT_FOR_SALE",
              "enum": [
                "FOR_SALE",
                "INDEFINITELY_NOT_FOR_SALE",
                "TEMPORARILY_NOT_FOR_SALE"
              ]
            },
            "suspendedUntil": {
              "type": "string",
              "nullable": true,
              "description": "ISO-8601 timestamp representing the time the saleStatus value is supposed to change to FOR_SALE. Set only when current saleStatus value is TEMPORARILY_NOT_FOR_SALE. E.g.: 2020-11-23T21:33:51Z, 2007-12-03T10:15:30+01:00",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            }
          },
          "description": "Represents whether an Item is for sale, indefinitely not for sale, or not for sale until a specific time."
        },
        "OverrideRule": {
          "required": [
            "externalServiceSlug"
          ],
          "type": "object",
          "properties": {
            "externalServiceSlug": {
              "type": "string",
              "description": "The service slug for which this rule should apply. E.g.: If externalServiceSlug is UberEats, then the priceOverride should be applied to UberEats.",
              "example": "ubereats"
            }
          },
          "description": "Override rule for when to apply price overrides"
        },
        "ItemPriceOverride": {
          "required": [
            "amount",
            "currencyCode",
            "rules"
          ],
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "minItems": 1,
              "description": "Override rules for when this price override should be applied.",
              "items": {
                "$ref": "#/components/schemas/OverrideRule"
              }
            },
            "currencyCode": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "EUR"
            },
            "amount": {
              "type": "number",
              "description": "Amount the Item costs",
              "example": 25.21
            }
          },
          "description": "Price override for an item"
        },
        "SkuBarcode": {
          "type": "object",
          "properties": {
            "barcodeType": {
              "type": "string",
              "description": "The type of the barcode.",
              "enum": [
                "UPC",
                "GTIN",
                "ASIN",
                "INTERNAL"
              ]
            },
            "value": {
              "type": "string",
              "description": "The value of the barcode.",
              "example": "049000028904 (UPC)"
            }
          },
          "description": "A barcode for the product which may be common types like UPC, GTIN, ASIN or an internal type."
        },
        "DietaryClassification": {
          "type": "object",
          "properties": {
            "tag": {
              "type": "string",
              "description": "The type of dietary classification.",
              "enum": [
                "VEGAN",
                "VEGETARIAN",
                "NON_VEGETARIAN",
                "EGG",
                "KOSHER",
                "HALAL"
              ]
            }
          },
          "description": "Dietary classification information."
        },
        "AllergenClassification": {
          "type": "object",
          "properties": {
            "tag": {
              "type": "string",
              "description": "The type of allergen classification.",
              "enum": [
                "GLUTEN",
                "DAIRY"
              ]
            },
            "containsAllergen": {
              "type": "boolean",
              "description": "Indication of whether or not the product contains this allergen. If the status of the allergen is unknown, a classification should not be provided for this product."
            }
          },
          "description": "Allergen classification information."
        },
        "EnergyKcal": {
          "type": "object",
          "properties": {
            "low": {
              "type": "number",
              "description": "The minimum calorie value for an item.",
              "example": 1
            },
            "high": {
              "type": "number",
              "description": "The maximum calorie value for an item.",
              "example": 100
            }
          },
          "description": "The calorie range of the item. If only one calorie value is known, set both low and high to that value."
        },
        "NutritionalInfo": {
          "type": "object",
          "properties": {
            "energyKcal": {
              "$ref": "#/components/schemas/EnergyKcal"
            }
          },
          "description": "The nutritional information of an item."
        },
        "Servings": {
          "type": "object",
          "properties": {
            "min": {
              "type": "integer",
              "description": "The minimum value of servings.",
              "example": 1
            },
            "max": {
              "type": "integer",
              "description": "The maximum value of servings.",
              "example": 2
            }
          },
          "description": "The number of people an item serves. If only one serving value is known, set both min and max to that value."
        },
        "SkuDetails": {
          "type": "object",
          "properties": {
            "skuSlug": {
              "type": "string",
              "description": "A system-unique, human-readable identifier for the product.",
              "example": "russet-potato-fries-200g"
            },
            "barcodes": {
              "type": "array",
              "description": "Barcodes of this product.",
              "items": {
                "$ref": "#/components/schemas/SkuBarcode"
              }
            },
            "dietaryClassifications": {
              "type": "array",
              "description": "All dietary classifications for the product",
              "items": {
                "$ref": "#/components/schemas/DietaryClassification"
              }
            },
            "allergenClassifications": {
              "type": "array",
              "description": "All allergen classifications for the product",
              "items": {
                "$ref": "#/components/schemas/AllergenClassification"
              }
            },
            "containsAlcohol": {
              "type": "boolean",
              "description": "Indicates whether or not this product contains alcohol."
            },
            "nutritionalInfo": {
              "$ref": "#/components/schemas/NutritionalInfo",
              "description": "The nutritional information for the product"
            },
            "servings": {
              "$ref": "#/components/schemas/Servings",
              "description": "The number of servings for the product."
            }
          },
          "description": "Details of the product being prepared or a pre-packaged good being sold. Includes information such as UPC barcode, unique identifiers, or classification information."
        },
        "ItemTax": {
          "required": [
            "percentageValue",
            "isValueAddedTax"
          ],
          "type": "object",
          "properties": {
            "percentageValue": {
              "$ref": "#/components/schemas/PercentageValue",
              "description": "Specify the percentage value of the tax."
            },
            "isValueAddedTax": {
              "type": "boolean",
              "description": "Whether this tax is a value-added tax."
            }
          },
          "description": "The tax configuration."
        },
        "MenuItem_POS": {
          "title": "All Items for the store, indexed by ID",
          "required": [
            "id",
            "name",
            "photoIds",
            "price",
            "status"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "minLength": 1,
              "description": "Internal identifier of this Item.",
              "example": "faa4c79f-480d-4de1-bc34-5fb74ef082ef"
            },
            "name": {
              "type": "string",
              "description": "Name of this Item",
              "example": "Bagel"
            },
            "photoIds": {
              "type": "array",
              "description": "A list of Photo references associated with the Item.",
              "items": {
                "type": "string"
              }
            },
            "price": {
              "$ref": "#/components/schemas/Money"
            },
            "status": {
              "$ref": "#/components/schemas/ItemStatus"
            },
            "description": {
              "type": "string",
              "description": "Description of this Item",
              "example": "Delicious bagel!"
            },
            "modifierGroupIds": {
              "type": "array",
              "default": [],
              "description": "Identifiers of each ModifierGroup within this Item.",
              "items": {
                "type": "string",
                "example": "7152ee6e-e941-45c1-9008-2e306b479114"
              }
            },
            "priceOverrides": {
              "type": "array",
              "nullable": true,
              "description": "Specify price overrides for different service slugs.",
              "items": {
                "$ref": "#/components/schemas/ItemPriceOverride"
              }
            },
            "skuDetails": {
              "$ref": "#/components/schemas/SkuDetails"
            },
            "additionalCharges": {
              "type": "array",
              "nullable": true,
              "description": "Additional charges to apply for this item. Additional charges will be applied for every instance of this item within an order.",
              "items": {
                "$ref": "#/components/schemas/AdditionalCharge"
              }
            },
            "tax": {
              "$ref": "#/components/schemas/ItemTax",
              "description": "The tax configuration for the menu item."
            }
          },
          "description": "Items are sold on the Menu. Modifiers to items are items themselves and their relationship is defined by ModifierGroup."
        },
        "Menus": {
          "required": [
            "categories",
            "modifierGroups",
            "photos"
          ],
          "type": "object",
          "properties": {
            "photos": {
              "title": "All photos for the store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "photoId",
                "$ref": "#/components/schemas/Photo"
              },
              "example": {
                "c75d9460-5d48-423d-8d01-f825fd5b1672": {
                  "id": "c75d9460-5d48-423d-8d01-f825fd5b1672",
                  "fileName": "c75d9460-5d48-423d-8d01-f825fd5b1672.jpeg",
                  "contentType": "image/jpeg",
                  "url": "https://example.com/photos/c75d9460-5d48-423d-8d01-f825fd5b1672.jpeg"
                }
              }
            },
            "categories": {
              "title": "All Categories for the store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "categoryId",
                "$ref": "#/components/schemas/Category"
              },
              "example": {
                "b01485b0-034a-47c5-8a0a-0eeca08bf994": {
                  "name": "Drinks",
                  "description": "All drink items served up nice and fresh!",
                  "id": "b01485b0-034a-47c5-8a0a-0eeca08bf994",
                  "itemIds": [
                    "fa4f0192-4c4e-4455-9db8-61d428c34969"
                  ]
                }
              }
            },
            "modifierGroups": {
              "title": "All ModifierGroups for the Store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "modifierGroupId",
                "$ref": "#/components/schemas/ModifierGroup"
              },
              "example": {
                "f4c69056-3ae3-4517-9294-5ceec8df5f81": {
                  "id": "f4c69056-3ae3-4517-9294-5ceec8df5f81",
                  "name": "Add Straw",
                  "minimumSelections": 0,
                  "maximumSelections": 1,
                  "itemIds": [
                    "6d53cf04-9d62-40f5-a8b3-706e3377668f"
                  ]
                }
              }
            },
            "menus": {
              "title": "All Menus for the store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "menuId",
                "$ref": "#/components/schemas/Menu_POS"
              },
              "example": {
                "ff6dd693-5e55-4a92-a359-ea61b23ed423": {
                  "id": "ff6dd693-5e55-4a92-a359-ea61b23ed423",
                  "name": "Tasty BBQ",
                  "categoryIds": [
                    "b01485b0-034a-47c5-8a0a-0eeca08bf994"
                  ],
                  "fulfillmentModes": [
                    "DELIVERY"
                  ],
                  "description": "Cooking up BBQ deliciousness from around the globe!",
                  "hours": {
                    "intervals": [
                      {
                        "day": "MONDAY",
                        "fromHour": 7,
                        "fromMinute": 30,
                        "toHour": 22,
                        "toMinute": 0
                      }
                    ]
                  },
                  "additionalCharges": [
                    {
                      "chargeType": "PACKAGING_CHARGE",
                      "flatCharge": {
                        "currencyCode": "USD",
                        "amount": 1.5
                      }
                    }
                  ]
                }
              }
            },
            "items": {
              "title": "All Items for the store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "itemId",
                "$ref": "#/components/schemas/MenuItem_POS"
              },
              "example": {
                "fa4f0192-4c4e-4455-9db8-61d428c34969": {
                  "id": "fa4f0192-4c4e-4455-9db8-61d428c34969",
                  "name": "Canned Coke",
                  "description": "Best soda pop ever made",
                  "price": {
                    "currencyCode": "USD",
                    "amount": 7.65
                  },
                  "status": {
                    "saleStatus": "FOR_SALE"
                  },
                  "modifierGroupIds": [
                    "f4c69056-3ae3-4517-9294-5ceec8df5f81"
                  ],
                  "photoIds": [
                    "c75d9460-5d48-423d-8d01-f825fd5b1672"
                  ],
                  "priceOverrides": [
                    {
                      "rules": [
                        {
                          "type": "FulfillmentModeOverrideRule",
                          "fulfillmentMode": "PICK_UP"
                        }
                      ],
                      "price": {
                        "currencyCode": "USD",
                        "amount": 7
                      }
                    }
                  ],
                  "skuDetails": {
                    "skuSlug": "canned-coke-355ml",
                    "dietaryClassifications": [
                      {
                        "tag": "VEGAN"
                      }
                    ],
                    "allergenClassifications": [
                      {
                        "tag": "GLUTEN",
                        "containsAllergen": false
                      }
                    ],
                    "containsAlcohol": false,
                    "nutritionalInfo": {
                      "energyKcal": {
                        "low": 1,
                        "high": 100
                      }
                    },
                    "servings": {
                      "min": 1,
                      "max": 2
                    }
                  },
                  "additionalCharges": [
                    {
                      "chargeType": "PACKAGING_CHARGE",
                      "percentageCharge": {
                        "decimalValue": 0.015
                      }
                    }
                  ],
                  "tax": {
                    "percentageValue": {
                      "decimalValue": 0.513
                    },
                    "isValueAddedTax": true
                  }
                },
                "6d53cf04-9d62-40f5-a8b3-706e3377668f": {
                  "id": "6d53cf04-9d62-40f5-a8b3-706e3377668f",
                  "name": "Paper straw",
                  "description": "A paper straw",
                  "price": {
                    "currencyCode": "USD",
                    "amount": 0.5
                  },
                  "status": {
                    "saleStatus": "FOR_SALE"
                  }
                }
              }
            }
          },
          "description": "All menus associated with a store."
        },
        "ModifierGroupUpdateRequest": {
          "title": "All ModifierGroups for the Store, indexed by ID",
          "required": [
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier for ModifierGroup.",
              "example": "db5740de-429c-4f06-b264-3d41dce6d8c3"
            },
            "name": {
              "type": "string",
              "description": "Name of ModifierGroup.",
              "example": "Choose your type of bagel"
            },
            "minimumSelections": {
              "minimum": 0,
              "type": "integer",
              "description": "Minimum number of selections customers can make in this ModifierGroup. 0 means no min limits.",
              "format": "int32"
            },
            "maximumSelections": {
              "minimum": 0,
              "type": "integer",
              "description": "Maximum number of selections customers can make in this ModifierGroup. 0 means no max limits.",
              "format": "int32"
            },
            "maxPerModifierSelectionQuantity": {
              "minimum": 0,
              "type": "integer",
              "description": "Maximum number of selections customers can make for each modifier item in this ModifierGroup. 0 means there is no limit to how many times they can select a single modifier item. If not specified, a value of 1 will be used as the default value.",
              "format": "int32"
            },
            "itemIds": {
              "type": "array",
              "default": [],
              "description": "Identifiers of each Item within this ModifierGroup.",
              "items": {
                "type": "string"
              }
            },
            "description": {
              "type": "string",
              "description": "Description for this ModifierGroup.",
              "example": "Choose any of these delicious types of bagels"
            }
          },
          "description": "Items are sold on the menu. Modifiers to items are items themselves and their relationship is defined by ModifierGroup."
        },
        "ItemUpdateRequest": {
          "title": "All Items for the store, indexed by ID",
          "required": [
            "id",
            "name",
            "price",
            "status",
            "description"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of this Item.",
              "example": "faa4c79f-480d-4de1-bc34-5fb74ef082ef"
            },
            "name": {
              "type": "string",
              "description": "Name of this Item",
              "example": "Bagel"
            },
            "price": {
              "$ref": "#/components/schemas/Money"
            },
            "status": {
              "$ref": "#/components/schemas/ItemStatus"
            },
            "description": {
              "type": "string",
              "description": "Description of this Item",
              "example": "Delicious bagel!"
            },
            "modifierGroupIds": {
              "type": "array",
              "default": [],
              "description": "Identifiers of each ModifierGroup within this Item.",
              "items": {
                "type": "string",
                "example": "7152ee6e-e941-45c1-9008-2e306b479114"
              }
            },
            "priceOverrides": {
              "type": "array",
              "nullable": true,
              "description": "Specify price overrides for different service slugs.",
              "items": {
                "$ref": "#/components/schemas/ItemPriceOverride"
              }
            },
            "photoUrls": {
              "type": "array",
              "nullable": true,
              "description": "List of photoUrls to associate with the Item. This is used only for POST/PUT requests.",
              "items": {
                "type": "string"
              }
            },
            "skuDetails": {
              "$ref": "#/components/schemas/SkuDetails"
            }
          },
          "description": "Items are sold on the Menu. Modifiers to items are items themselves and their relationship is defined by ModifierGroup."
        },
        "MenusUpsertRequest": {
          "required": [
            "categories",
            "menus",
            "modifierGroups"
          ],
          "type": "object",
          "properties": {
            "categories": {
              "title": "All Categories for the store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "categoryId",
                "$ref": "#/components/schemas/Category"
              },
              "example": {
                "b01485b0-034a-47c5-8a0a-0eeca08bf994": {
                  "name": "Drinks",
                  "description": "All drink items served up nice and fresh!",
                  "id": "b01485b0-034a-47c5-8a0a-0eeca08bf994",
                  "itemIds": [
                    "fa4f0192-4c4e-4455-9db8-61d428c34969"
                  ]
                }
              }
            },
            "modifierGroups": {
              "title": "All ModifierGroups for the Store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "modifierGroupId",
                "$ref": "#/components/schemas/ModifierGroupUpdateRequest"
              },
              "example": {
                "f4c69056-3ae3-4517-9294-5ceec8df5f81": {
                  "id": "f4c69056-3ae3-4517-9294-5ceec8df5f81",
                  "name": "Add Straw",
                  "minimumSelections": 0,
                  "maximumSelections": 1,
                  "itemIds": [
                    "6d53cf04-9d62-40f5-a8b3-706e3377668f"
                  ]
                }
              }
            },
            "menus": {
              "title": "All Menus for the store, indexed by ID",
              "type": "object",
              "minProperties": 1,
              "additionalProperties": {
                "x-additionalPropertiesName": "menuId",
                "$ref": "#/components/schemas/Menu_POS"
              },
              "example": {
                "ff6dd693-5e55-4a92-a359-ea61b23ed423": {
                  "id": "ff6dd693-5e55-4a92-a359-ea61b23ed423",
                  "name": "Tasty BBQ",
                  "categoryIds": [
                    "b01485b0-034a-47c5-8a0a-0eeca08bf994"
                  ],
                  "fulfillmentModes": [
                    "DELIVERY"
                  ],
                  "description": "Cooking up BBQ deliciousness from around the globe!",
                  "hours": {
                    "intervals": [
                      {
                        "day": "MONDAY",
                        "fromHour": 7,
                        "fromMinute": 30,
                        "toHour": 22,
                        "toMinute": 0
                      }
                    ]
                  },
                  "additionalCharges": [
                    {
                      "chargeType": "PACKAGING_CHARGE",
                      "flatCharge": {
                        "currencyCode": "USD",
                        "amount": 1.5
                      }
                    }
                  ]
                }
              }
            },
            "items": {
              "title": "All Items for the store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "itemId",
                "$ref": "#/components/schemas/ItemUpdateRequest"
              },
              "example": {
                "fa4f0192-4c4e-4455-9db8-61d428c34969": {
                  "id": "fa4f0192-4c4e-4455-9db8-61d428c34969",
                  "name": "Canned Coke",
                  "description": "Best soda pop ever made",
                  "price": {
                    "currencyCode": "USD",
                    "amount": 7.65
                  },
                  "status": {
                    "saleStatus": "FOR_SALE"
                  },
                  "modifierGroupIds": [
                    "f4c69056-3ae3-4517-9294-5ceec8df5f81"
                  ],
                  "photoUrls": [
                    "https://example.com/photos/c75d9460-5d48-423d-8d01-f825fd5b1672.jpeg"
                  ],
                  "priceOverrides": [
                    {
                      "rules": [
                        {
                          "externalServiceSlug": "ubereats"
                        }
                      ],
                      "currencyCode": "USD",
                      "amount": 7
                    }
                  ],
                  "skuDetails": {
                    "skuSlug": "canned-coke-355ml",
                    "dietaryClassifications": [
                      {
                        "tag": "VEGAN"
                      }
                    ],
                    "allergenClassifications": [
                      {
                        "tag": "GLUTEN",
                        "containsAllergen": false
                      }
                    ]
                  }
                },
                "6d53cf04-9d62-40f5-a8b3-706e3377668f": {
                  "id": "6d53cf04-9d62-40f5-a8b3-706e3377668f",
                  "name": "Paper straw",
                  "description": "A paper straw",
                  "price": {
                    "currencyCode": "USD",
                    "amount": 0.5
                  },
                  "status": {
                    "saleStatus": "FOR_SALE"
                  }
                }
              }
            }
          },
          "description": "All menus associated with a store."
        },
        "JobReference": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the job.",
              "format": "uuid"
            },
            "status": {
              "type": "string",
              "description": "The status of the job.",
              "enum": [
                "PENDING",
                "FAILED",
                "SUCCESS",
                "UNKNOWN"
              ]
            }
          },
          "description": "The job reference."
        },
        "MenuPublishJobState": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the menu publish.",
              "enum": [
                "PENDING",
                "FAILED",
                "SUCCESS",
                "UNKNOWN"
              ]
            },
            "message": {
              "type": "string",
              "nullable": true,
              "description": "Only present if status is FAILED. Contains the error message returned by our menu systems."
            }
          },
          "description": "Information about the menu publish target."
        },
        "MenuAsynchronousJob": {
          "type": "object",
          "properties": {
            "jobReference": {
              "$ref": "#/components/schemas/JobReference"
            },
            "jobType": {
              "type": "string",
              "description": "Type of job.",
              "enum": [
                "UPSERT",
                "PUBLISH",
                "UNKNOWN"
              ],
              "example": "PUBLISH"
            },
            "publishJobState": {
              "type": "object",
              "nullable": true,
              "additionalProperties": {
                "x-additionalPropertiesName": "menuPublishTarget",
                "$ref": "#/components/schemas/MenuPublishJobState"
              },
              "description": "Only present if the MenuJobType is PUBLISH. Contains a map of MenuPublishTarget services to their corresponding statuses.",
              "example": {
                "rappi": {
                  "status": "FAILED",
                  "message": "Failed to publish menu due to error ..."
                }
              }
            }
          },
          "description": "The job created to process the menu request."
        },
        "UpsertFullMenuEventCallback": {
          "required": [
            "requestedToCreatedEntityIds"
          ],
          "type": "object",
          "properties": {
            "requestedToCreatedEntityIds": {
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "menuId",
                "type": "string"
              },
              "example": {
                "1ecd8573-c033-4a55-9d69-4e99bb0397b4": "ABCDEFGHIJK1234"
              },
              "description": "A map for entities created by the Upsert containing the IDs of the requested entities mapped to the IDs of entities created by the request. Our system will use the IDs returned in this map to send updates to these entities in future requests. **NOTE -** A empty map can be used on requestedToCreatedEntityIds to use the same menu IDs that were previously defined."
            }
          }
        },
        "TimeRange": {
          "required": [
            "end",
            "start"
          ],
          "type": "object",
          "properties": {
            "start": {
              "type": "string",
              "description": "Start time of the range in 24 hour format.",
              "example": "08:00"
            },
            "end": {
              "type": "string",
              "description": "End time of the range in 24 hour format.",
              "example": "22:00"
            }
          },
          "description": "Time range in a given date."
        },
        "RegularHours": {
          "required": [
            "days",
            "timeRanges"
          ],
          "type": "object",
          "properties": {
            "days": {
              "type": "array",
              "description": "The day of the week this configuration applies.",
              "items": {
                "type": "string",
                "description": "Day of the week.",
                "enum": [
                  "MONDAY",
                  "TUESDAY",
                  "WEDNESDAY",
                  "THURSDAY",
                  "FRIDAY",
                  "SATURDAY",
                  "SUNDAY"
                ]
              }
            },
            "timeRanges": {
              "type": "array",
              "description": "Hours range applied to the provided day of the week",
              "items": {
                "$ref": "#/components/schemas/TimeRange"
              }
            }
          },
          "description": "Describes the configuration of regular hours."
        },
        "SpecialHours": {
          "required": [
            "date",
            "timeRanges",
            "type"
          ],
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "description": "Date the special hour configuration applies.",
              "format": "date",
              "example": "2021-10-01"
            },
            "timeRanges": {
              "type": "array",
              "minItems": 1,
              "description": "Hours range applied to configured date.",
              "items": {
                "$ref": "#/components/schemas/TimeRange"
              }
            },
            "type": {
              "type": "string",
              "description": "Store state that should be applied during the configured special hour.",
              "enum": [
                "OPEN",
                "CLOSED"
              ]
            }
          },
          "description": "Describes the configuration of special store hours."
        },
        "HoursData": {
          "required": [
            "regularHours",
            "specialHours",
            "timeZone"
          ],
          "type": "object",
          "properties": {
            "timeZone": {
              "type": "string",
              "description": "TimeZone of all times under it. (https://www.joda.org/joda-time/timezones.html)",
              "format": "timezone-id",
              "example": "America/Los_Angeles"
            },
            "regularHours": {
              "type": "array",
              "description": "List of regular hours configuration.",
              "items": {
                "$ref": "#/components/schemas/RegularHours"
              }
            },
            "specialHours": {
              "type": "array",
              "description": "List of special hours configuration, for occasions like Christmas, Thanksgiving, or any other holidays.",
              "items": {
                "$ref": "#/components/schemas/SpecialHours"
              }
            }
          },
          "description": "Represents hours configuration with regular hours and special hours."
        },
        "Menu_3PD": {
          "title": "All Menus for the store, indexed by ID",
          "required": [
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier that exists in the third party system. During a menu publish event, uuidV4 ids will be generated for new entities that do not yet exist in the internal menu.",
              "example": "da0e4e94-5670-4175-897a-3b7dde45bed5"
            },
            "name": {
              "type": "string",
              "description": "Name of the Menu.",
              "example": "Tasty BBQ"
            },
            "categoryIds": {
              "type": "array",
              "default": [],
              "description": "Identifiers of the categories within this Menu.",
              "items": {
                "type": "string"
              }
            },
            "fulfillmentModes": {
              "type": "array",
              "default": [],
              "description": "The ways in which this menu may be fulfilled. If no values are specified, it is assumed that all fulfillment types are allowed.",
              "items": {
                "type": "string",
                "description": "How an item from a menu is allowed to be fulfilled when ordered by a user.",
                "enum": [
                  "DELIVERY",
                  "PICK_UP",
                  "DINE_IN"
                ]
              }
            },
            "hoursData": {
              "$ref": "#/components/schemas/HoursData"
            },
            "additionalCharges": {
              "type": "array",
              "nullable": true,
              "description": "Additional charges to apply for this menu. All additional charges specified on a menu will only be applied once per order.",
              "items": {
                "$ref": "#/components/schemas/AdditionalCharge"
              }
            }
          },
          "description": "A Menu for a store."
        },
        "OverrideRule_3PD": {
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "description": "Specification for rules to apply overrides (e.g. PriceOverride).",
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "PATH": "#/components/schemas/EntityPathOverrideRule",
              "FULFILLMENT_MODE": "#/components/schemas/FulfillmentModeOverrideRule",
              "SERVICE": "#/components/schemas/ServiceOverrideRule"
            }
          }
        },
        "EntityPathOverrideRule": {
          "required": [
            "entityIds"
          ],
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/OverrideRule_3PD"
            },
            {
              "type": "object",
              "properties": {
                "entityIds": {
                  "type": "array",
                  "description": "EntityPath for this rule.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        },
        "FulfillmentModeOverrideRule": {
          "required": [
            "fulfillmentMode"
          ],
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/OverrideRule_3PD"
            },
            {
              "type": "object",
              "properties": {
                "fulfillmentMode": {
                  "type": "string",
                  "description": "The fulfillment mode for which the override rule should apply."
                }
              }
            }
          ]
        },
        "ServiceOverrideRule": {
          "required": [
            "serviceSlug"
          ],
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/OverrideRule_3PD"
            },
            {
              "type": "object",
              "properties": {
                "serviceSlug": {
                  "type": "string",
                  "description": "The service for which the override rule should apply. The list of relevant service slugs can be provided by your integration partner. This feature is only available to  point-of-sale system providers."
                }
              }
            }
          ]
        },
        "PriceOverride": {
          "required": [
            "price",
            "rules"
          ],
          "type": "object",
          "properties": {
            "price": {
              "$ref": "#/components/schemas/Money"
            },
            "rules": {
              "type": "array",
              "minItems": 1,
              "description": "Override rules for when this price override should be applied.",
              "items": {
                "$ref": "#/components/schemas/OverrideRule_3PD"
              }
            }
          },
          "description": "Price override for an item"
        },
        "MenuItem_3PD": {
          "title": "All Items for the store, indexed by ID",
          "required": [
            "id",
            "name",
            "photoIds",
            "price",
            "priceOverrides",
            "status"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "minLength": 1,
              "description": "The identifier that exists in the third party system. During a menu publish event, uuidV4 ids will be generated for new entities that do not yet exist in the internal menu.",
              "example": "da0e4e94-5670-4175-897a-3b7dde45bed5"
            },
            "name": {
              "type": "string",
              "description": "Name of this Item",
              "example": "Bagel"
            },
            "photoIds": {
              "type": "array",
              "description": "A list of Photo references associated with the Item.",
              "items": {
                "type": "string"
              }
            },
            "price": {
              "$ref": "#/components/schemas/Money"
            },
            "priceOverrides": {
              "type": "array",
              "description": "Specify price overrides.",
              "items": {
                "$ref": "#/components/schemas/PriceOverride"
              }
            },
            "status": {
              "$ref": "#/components/schemas/ItemStatus"
            },
            "description": {
              "type": "string",
              "description": "Description of this Item",
              "example": "Delicious bagel!"
            },
            "modifierGroupIds": {
              "type": "array",
              "default": [],
              "description": "Identifiers of each ModifierGroup within this Item.",
              "items": {
                "type": "string",
                "example": "7152ee6e-e941-45c1-9008-2e306b479114"
              }
            },
            "skuDetails": {
              "$ref": "#/components/schemas/SkuDetails"
            },
            "additionalCharges": {
              "type": "array",
              "nullable": true,
              "description": "Additional charges to apply for this item. Additional charges will be applied for every instance of this item within an order.",
              "items": {
                "$ref": "#/components/schemas/AdditionalCharge"
              }
            },
            "tax": {
              "$ref": "#/components/schemas/ItemTax",
              "description": "The tax configuration for the menu item."
            }
          },
          "description": "Items are sold on the Menu. Modifiers to items are items themselves and their relationship is defined by ModifierGroup."
        },
        "MenuData": {
          "required": [
            "categories",
            "items",
            "menus",
            "modifierGroups",
            "photos"
          ],
          "type": "object",
          "properties": {
            "menus": {
              "title": "All Menus for the store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "menuId",
                "$ref": "#/components/schemas/Menu_3PD"
              },
              "example": {
                "ff6dd693-5e55-4a92-a359-ea61b23ed423": {
                  "id": "ff6dd693-5e55-4a92-a359-ea61b23ed423",
                  "name": "Tasty BBQ",
                  "categoryIds": [
                    "b01485b0-034a-47c5-8a0a-0eeca08bf994"
                  ],
                  "fulfillmentModes": [
                    "DELIVERY"
                  ],
                  "description": "Cooking up BBQ deliciousness from around the globe!",
                  "hoursData": {
                    "timeZone": "America/Los_Angeles",
                    "regularHours": [
                      {
                        "days": [
                          "MONDAY",
                          "TUESDAY",
                          "WEDNESDAY",
                          "THURSDAY",
                          "FRIDAY"
                        ],
                        "timeRanges": [
                          {
                            "start": "08:00",
                            "end": "22:00"
                          }
                        ]
                      }
                    ],
                    "specialHours": [
                      {
                        "date": "2021-12-31",
                        "timeRanges": [
                          {
                            "start": "08:00",
                            "end": "22:00"
                          }
                        ],
                        "type": "CLOSED"
                      }
                    ]
                  },
                  "additionalCharges": [
                    {
                      "chargeType": "PACKAGING_CHARGE",
                      "percentageCharge": {
                        "decimalValue": 0.03
                      }
                    }
                  ]
                }
              }
            },
            "categories": {
              "title": "All Categories for the store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "categoryId",
                "$ref": "#/components/schemas/Category"
              },
              "example": {
                "b01485b0-034a-47c5-8a0a-0eeca08bf994": {
                  "name": "Drinks",
                  "description": "All drink items served up nice and fresh!",
                  "id": "b01485b0-034a-47c5-8a0a-0eeca08bf994",
                  "itemIds": [
                    "fa4f0192-4c4e-4455-9db8-61d428c34969"
                  ]
                }
              }
            },
            "items": {
              "title": "All Items for the store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "itemId",
                "$ref": "#/components/schemas/MenuItem_3PD"
              },
              "example": {
                "fa4f0192-4c4e-4455-9db8-61d428c34969": {
                  "id": "fa4f0192-4c4e-4455-9db8-61d428c34969",
                  "name": "Canned Coke",
                  "description": "Best soda pop ever made",
                  "price": {
                    "currencyCode": "USD",
                    "amount": 7.65
                  },
                  "status": {
                    "saleStatus": "FOR_SALE"
                  },
                  "modifierGroupIds": [
                    "f4c69056-3ae3-4517-9294-5ceec8df5f81"
                  ],
                  "photoIds": [
                    "c75d9460-5d48-423d-8d01-f825fd5b1672"
                  ],
                  "priceOverrides": [
                    {
                      "rules": [
                        {
                          "type": "FulfillmentModeOverrideRule",
                          "fulfillmentMode": "PICK_UP"
                        }
                      ],
                      "price": {
                        "currencyCode": "USD",
                        "amount": 7
                      }
                    }
                  ],
                  "skuDetails": {
                    "skuSlug": "canned-coke-355ml",
                    "dietaryClassifications": [
                      {
                        "tag": "VEGAN"
                      }
                    ],
                    "allergenClassifications": [
                      {
                        "tag": "GLUTEN",
                        "containsAllergen": false
                      }
                    ],
                    "containsAlcohol": false,
                    "nutritionalInfo": {
                      "energyKcal": {
                        "low": 1,
                        "high": 100
                      }
                    },
                    "servings": {
                      "min": 1,
                      "max": 2
                    }
                  },
                  "additionalCharges": [
                    {
                      "chargeType": "PACKAGING_CHARGE",
                      "flatCharge": {
                        "currencyCode": "USD",
                        "amount": 1.5
                      }
                    }
                  ],
                  "tax": {
                    "percentageValue": {
                      "decimalValue": 0.513
                    },
                    "isValueAddedTax": true
                  }
                },
                "6d53cf04-9d62-40f5-a8b3-706e3377668f": {
                  "id": "6d53cf04-9d62-40f5-a8b3-706e3377668f",
                  "name": "Paper straw",
                  "description": "A paper straw",
                  "price": {
                    "currencyCode": "USD",
                    "amount": 0.5
                  },
                  "status": {
                    "saleStatus": "FOR_SALE"
                  }
                }
              }
            },
            "modifierGroups": {
              "title": "All ModifierGroups for the Store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "modifierGroupId",
                "$ref": "#/components/schemas/ModifierGroup"
              },
              "example": {
                "f4c69056-3ae3-4517-9294-5ceec8df5f81": {
                  "id": "f4c69056-3ae3-4517-9294-5ceec8df5f81",
                  "name": "Add Straw",
                  "minimumSelections": 0,
                  "maximumSelections": 1,
                  "itemIds": [
                    "6d53cf04-9d62-40f5-a8b3-706e3377668f"
                  ]
                }
              }
            },
            "photos": {
              "title": "All photos for the store, indexed by ID",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "photoId",
                "$ref": "#/components/schemas/Photo"
              },
              "example": {
                "c75d9460-5d48-423d-8d01-f825fd5b1672": {
                  "id": "c75d9460-5d48-423d-8d01-f825fd5b1672",
                  "fileName": "c75d9460-5d48-423d-8d01-f825fd5b1672.jpeg",
                  "contentType": "image/jpeg",
                  "url": "https://example.com/photos/c75d9460-5d48-423d-8d01-f825fd5b1672.jpeg"
                }
              }
            }
          },
          "description": "MenuData contains all menu entities, and their relations."
        },
        "SendMenuEventCallback": {
          "required": [
            "menuData"
          ],
          "type": "object",
          "properties": {
            "menuData": {
              "$ref": "#/components/schemas/MenuData"
            }
          }
        },
        "MenuPublishRequest": {
          "type": "object",
          "properties": {
            "menuPublishTargets": {
              "type": "array",
              "description": "MenuPublishTargets to publish to.",
              "example": [
                "doordash",
                "ubereats"
              ],
              "items": {
                "type": "string",
                "description": "MenuPublishTargets to publish to.",
                "example": "[\"doordash\",\"ubereats\"]"
              }
            }
          }
        },
        "MenuPublishTarget": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "The status of a menu publish target.",
              "enum": [
                "READY",
                "PUBLISH_IN_PROGRESS",
                "ERROR"
              ]
            }
          },
          "description": "Information about the target."
        },
        "MenuPublishResponseMenuPublishTargets": {
          "type": "object",
          "nullable": true,
          "properties": {
            "menuPublishTargets": {
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "menuPublishTargetName",
                "$ref": "#/components/schemas/MenuPublishTarget"
              },
              "description": "Map of MenuPublishTarget names to their targets. The target can only be published to if the status is READY.",
              "example": {
                "rappi": {
                  "status": "PUBLISH_IN_PROGRESS"
                }
              }
            }
          },
          "description": "Only present if the request fails. Meant to help debugging why the request failed."
        },
        "MenuPublishResponse": {
          "type": "object",
          "properties": {
            "requestSubmitted": {
              "type": "boolean",
              "description": "Whether the request was submitted or not."
            },
            "jobId": {
              "type": "string",
              "nullable": true,
              "description": "Only present if the request succeeds. Job ID to check on the status with the MenuAsyncJob endpoint.",
              "format": "uuid"
            },
            "menuPublishTargets": {
              "$ref": "#/components/schemas/MenuPublishResponseMenuPublishTargets"
            }
          }
        },
        "SuspensionStatus": {
          "required": [
            "isIndefinite"
          ],
          "type": "object",
          "properties": {
            "isIndefinite": {
              "type": "boolean",
              "description": "True if the suspension is indefinite"
            },
            "suspendedUntil": {
              "type": "string",
              "nullable": true,
              "description": "ISO-8601 timestamp representing the time the saleStatus value is supposed to change to FOR_SALE. Set only when current saleStatus value is TEMPORARILY_NOT_FOR_SALE. E.g.: 2020-11-23T21:33:51Z, 2007-12-03T10:15:30+01:00",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            }
          },
          "description": "The type of suspension this will be."
        },
        "SuspendItemsRequest": {
          "required": [
            "entityIds",
            "note",
            "status"
          ],
          "type": "object",
          "properties": {
            "entityIds": {
              "type": "array",
              "description": "Entity IDs to suspend. These should be the IDs as you represent them in your system.",
              "example": [
                "9cc4bb5e-bc97-40d9-af28-c02ef1483610"
              ],
              "items": {
                "type": "string",
                "description": "Entity IDs to suspend.",
                "example": "[\"9cc4bb5e-bc97-40d9-af28-c02ef1483610\",\"9929290d-31eb-425d-8732-17c4074ac75e\"]"
              }
            },
            "note": {
              "type": "string",
              "description": "The reason you are suspending the items.",
              "example": "Out of item"
            },
            "status": {
              "$ref": "#/components/schemas/SuspensionStatus"
            }
          }
        },
        "UnsuspendItemsRequest": {
          "type": "object",
          "properties": {
            "entityIds": {
              "type": "array",
              "description": "Entity IDs to unsuspend. These should be the IDs as you represent them in your system.",
              "example": [
                "9cc4bb5e-bc97-40d9-af28-c02ef1483610"
              ],
              "items": {
                "type": "string",
                "description": "Entity IDs to unsuspend.",
                "example": "[\"9cc4bb5e-bc97-40d9-af28-c02ef1483610\",\"9929290d-31eb-425d-8732-17c4074ac75e\"]"
              }
            },
            "note": {
              "type": "string",
              "description": "The reason you are unsuspending the items.",
              "example": "Item back in stock"
            }
          }
        },
        "MenuPublishTargets": {
          "type": "object",
          "properties": {
            "menuPublishTargets": {
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "menuPublishTargetName",
                "$ref": "#/components/schemas/MenuPublishTarget"
              },
              "example": {
                "rappi": {
                  "status": "PUBLISH_IN_PROGRESS"
                }
              },
              "description": "Map of MenuPublishTarget names to their targets. The target can only be published to if the status is READY."
            }
          }
        },
        "EventResultMetadata": {
          "type": "object",
          "nullable": true,
          "properties": {
            "operationStatus": {
              "type": "string",
              "description": "Status of the operation requested by an event.",
              "enum": [
                "SUCCEEDED",
                "INTERNAL_ERROR",
                "AUTHENTICATION_FAILURE",
                "AUTHORIZATION_FAILURE",
                "UNKNOWN_FAILURE",
                "INVALID_STORE_STATE",
                "INVALID_STORE_CONFIGURATION",
                "OPERATION_NOT_SUPPORTED",
                "IGNORED_ALREADY_IN_REQUESTED_STATE",
                "INVALID_REQUEST"
              ]
            },
            "additionalInformation": {
              "type": "string",
              "nullable": true,
              "description": "Additional details about the event result, if available.",
              "example": "Completed without problems."
            },
            "operationFinishedAt": {
              "type": "string",
              "description": "Time when the processing of the event finished.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            }
          },
          "description": "Information about the result of a storefront event."
        },
        "StoreAvailabilityEventResult": {
          "type": "object",
          "properties": {
            "storeState": {
              "type": "string",
              "nullable": true,
              "description": "Represents the current state of a store.",
              "enum": [
                "OPEN",
                "OFF_HOUR",
                "SERVICE_PROVIDER_PAUSED",
                "OPERATOR_PAUSED",
                "SERVICE_PROVIDER_PAUSED_COURIERS_UNAVAILABLE",
                "STORE_UNAVAILABLE",
                "HOLIDAY_HOUR",
                "MENU_UNAVAILABLE",
                "SERVICE_PROVIDER_PAUSED_MISCONFIGURED",
                "OPEN_FOR_PICKUP_ONLY",
                "OPEN_FOR_DELIVERY_ONLY",
                "CLOSED_FOR_UNDETERMINED_REASON"
              ]
            },
            "statusChangedAt": {
              "type": "string",
              "nullable": true,
              "description": "The time when the store changed to the current state.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "eventResultMetadata": {
              "$ref": "#/components/schemas/EventResultMetadata"
            }
          },
          "description": "The current state of a store."
        },
        "Storefront_TimeRange": {
          "type": "object",
          "properties": {
            "startTime": {
              "type": "string",
              "description": "Start time of the range in 24 hour format.",
              "example": "08:00"
            },
            "endTime": {
              "type": "string",
              "description": "End time of the range in 24 hour format.",
              "example": "08:00"
            }
          },
          "description": "Time range in a given date."
        },
        "Storefront_RegularHours": {
          "required": [
            "dayOfWeek",
            "timeRanges"
          ],
          "type": "object",
          "properties": {
            "dayOfWeek": {
              "type": "string",
              "description": "Day of the week.",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            },
            "timeRanges": {
              "type": "array",
              "minItems": 1,
              "description": "Hours range applied to the provided day of the week",
              "items": {
                "$ref": "#/components/schemas/Storefront_TimeRange"
              }
            }
          },
          "description": "Describes the configuration of regular hours."
        },
        "Storefront_SpecialHours": {
          "required": [
            "date",
            "timeRanges",
            "specialHourType"
          ],
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "description": "Date the special hour configuration applies.",
              "format": "date",
              "example": "2021-10-01"
            },
            "timeRanges": {
              "type": "array",
              "minItems": 1,
              "description": "Hours range applied to configured date.",
              "items": {
                "$ref": "#/components/schemas/Storefront_TimeRange"
              }
            },
            "specialHourType": {
              "type": "string",
              "description": "Store state that should be applied during the configured special hour.",
              "enum": [
                "OPEN",
                "CLOSED"
              ]
            }
          },
          "description": "Describes the configuration of special store hours."
        },
        "StoreHours": {
          "type": "object",
          "nullable": true,
          "properties": {
            "regularHours": {
              "type": "array",
              "description": "List of regular hours configuration.",
              "items": {
                "$ref": "#/components/schemas/Storefront_RegularHours"
              }
            },
            "specialHours": {
              "type": "array",
              "nullable": true,
              "description": "List of special hours configuration.",
              "items": {
                "$ref": "#/components/schemas/Storefront_SpecialHours"
              }
            }
          },
          "description": "Represents store hours configuration with regular hours and special hours."
        },
        "StoreHoursConfiguration": {
          "required": [
            "timezone"
          ],
          "type": "object",
          "properties": {
            "deliveryHours": {
              "$ref": "#/components/schemas/StoreHours"
            },
            "pickupHours": {
              "$ref": "#/components/schemas/StoreHours"
            },
            "timezone": {
              "type": "string",
              "description": "The store time zone identifier. (e.g. America/New_York)",
              "example": "America/Los_Angeles"
            }
          },
          "description": "The current store hours configuration of a store."
        },
        "StoreHoursConfigurationEventResult": {
          "type": "object",
          "properties": {
            "storeHoursConfiguration": {
              "$ref": "#/components/schemas/StoreHoursConfiguration"
            },
            "statusChangedAt": {
              "type": "string",
              "description": "The time when the store hours configuration changed.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "eventResultMetadata": {
              "$ref": "#/components/schemas/EventResultMetadata"
            }
          },
          "description": "The current store hours configuration."
        },
        "RequiredEventResultMetadata": {
          "type": "object",
          "properties": {
            "operationStatus": {
              "type": "string",
              "description": "Status of the operation requested by an event.",
              "enum": [
                "SUCCEEDED",
                "INTERNAL_ERROR",
                "AUTHENTICATION_FAILURE",
                "AUTHORIZATION_FAILURE",
                "UNKNOWN_FAILURE",
                "INVALID_STORE_STATE",
                "INVALID_STORE_CONFIGURATION",
                "OPERATION_NOT_SUPPORTED",
                "IGNORED_ALREADY_IN_REQUESTED_STATE",
                "INVALID_REQUEST"
              ]
            },
            "additionalInformation": {
              "type": "string",
              "nullable": true,
              "description": "Additional details about the event result, if available.",
              "example": "Completed without problems."
            },
            "operationFinishedAt": {
              "type": "string",
              "description": "Time when the processing of the event finished.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            }
          },
          "description": "Information about the result of a storefront event."
        },
        "PauseStoreEventResult": {
          "type": "object",
          "properties": {
            "closureId": {
              "type": "string",
              "description": "ID required to unpause a store, if available",
              "example": "4109d2c9-8bc5-413c-af3e-1c92aa381e41"
            },
            "eventResultMetadata": {
              "$ref": "#/components/schemas/RequiredEventResultMetadata"
            }
          },
          "description": "Result of an event that requested to pause a store."
        },
        "UnpauseStoreEventResult": {
          "type": "object",
          "properties": {
            "eventResultMetadata": {
              "$ref": "#/components/schemas/RequiredEventResultMetadata"
            }
          },
          "description": "Result of an event that requested to unpause a store."
        },
        "DeliveryStatus": {
          "type": "string",
          "description": "The status of the delivery.",
          "enum": [
            "REQUESTED",
            "ALLOCATED",
            "PICKED_UP",
            "COMPLETED",
            "CANCELED",
            "ARRIVED_AT_PICKUP"
          ]
        },
        "VehicleInformation": {
          "type": "object",
          "nullable": true,
          "properties": {
            "vehicleType": {
              "type": "string",
              "description": "The type of vehicle used to fulfill the delivery.",
              "enum": [
                "WALKER",
                "MOTORCYCLE",
                "BICYCLE",
                "CAR",
                "VAN"
              ]
            },
            "licensePlate": {
              "type": "string",
              "nullable": true,
              "description": "The license plate of the vehicle used to fulfill the delivery.",
              "example": "ABCD 123"
            },
            "makeModel": {
              "type": "string",
              "nullable": true,
              "description": "The make and model of the vehicle used to fulfill the delivery.",
              "example": "Honda Civic"
            }
          }
        },
        "DeliveryCost": {
          "type": "object",
          "properties": {
            "baseCost": {
              "type": "number",
              "format": "double",
              "description": "Base delivery cost value.",
              "example": 4.99
            },
            "extraCost": {
              "type": "number",
              "format": "double",
              "description": "Extra delivery cost value.",
              "example": 0.99
            }
          },
          "description": "Delivery cost details."
        },
        "DeliveryStatusUpdateRequest": {
          "type": "object",
          "properties": {
            "deliveryStatus": {
              "$ref": "#/components/schemas/DeliveryStatus"
            },
            "estimatedDeliveryTime": {
              "type": "string",
              "nullable": true,
              "description": "The expected delivery time.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "estimatedPickupTime": {
              "type": "string",
              "nullable": true,
              "description": "The expected pickup time.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "courier": {
              "$ref": "#/components/schemas/Person"
            },
            "location": {
              "$ref": "#/components/schemas/Location"
            },
            "createdAt": {
              "type": "string",
              "description": "The time that the update was created.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "vehicleInformation": {
              "$ref": "#/components/schemas/VehicleInformation"
            },
            "currencyCode": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3,
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "EUR"
            },
            "cost": {
              "$ref": "#/components/schemas/DeliveryCost"
            },
            "providerDeliveryId": {
              "type": "string",
              "nullable": true,
              "description": "The provider's internal identifier for the delivery used for tracking purposes."
            }
          },
          "description": "Update delivery status request."
        },
        "Distance": {
          "type": "object",
          "nullable": true,
          "properties": {
            "unit": {
              "type": "string",
              "description": "Distance unit value.",
              "enum": [
                "KILOMETERS",
                "MILES"
              ]
            },
            "value": {
              "type": "number",
              "description": "Distance value."
            }
          },
          "description": "Delivery distance."
        },
        "FulfillmentPathEntity": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "description": "Describes the entity name.",
              "example": "rappi"
            },
            "type": {
              "type": "string",
              "description": "Type of entities in the fulfillment path.",
              "enum": [
                "FULFILLMENT_PROCESSOR",
                "INTERMEDIARY"
              ]
            }
          },
          "description": "Delivery distance."
        },
        "RequestDeliveryQuoteCallbackRequest": {
          "type": "object",
          "properties": {
            "minPickupDuration": {
              "type": "integer",
              "minimum": 0,
              "format": "int32",
              "description": "Minimum time required for courier to arrive at pickup location in minutes It is an estimation.",
              "example": 5
            },
            "maxPickupDuration": {
              "type": "integer",
              "nullable": true,
              "description": "Maximum time that the courier's arrival at pick up location can be delayed. If not provided, it will default to 60 minutes or minPickUpDuration, whichever is greater. This value is an estimation and expressed in minutes.",
              "format": "int32",
              "example": 10
            },
            "deliveryDistance": {
              "$ref": "#/components/schemas/Distance"
            },
            "currencyCode": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3,
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "EUR"
            },
            "cost": {
              "$ref": "#/components/schemas/DeliveryCost"
            },
            "provider": {
              "type": "string",
              "nullable": true,
              "description": "Delivery Service Provider Slug.",
              "example": "doordash"
            },
            "fulfillmentPath": {
              "type": "array",
              "nullable": true,
              "description": "List of entities involved in the fulfillment processing path.",
              "items": {
                "$ref": "#/components/schemas/FulfillmentPathEntity"
              }
            },
            "createdAt": {
              "type": "string",
              "description": "The time that the quote was created.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "accountBalance": {
              "type": "number",
              "nullable": true,
              "description": "The remaining account balance of the requester for the delivery provider.",
              "example": 1068.32
            }
          },
          "description": "Delivery quote information."
        },
        "AcceptDeliveryCallbackRequest": {
          "type": "object",
          "properties": {
            "deliveryDistance": {
              "$ref": "#/components/schemas/Distance"
            },
            "currencyCode": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3,
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "EUR"
            },
            "cost": {
              "$ref": "#/components/schemas/DeliveryCost"
            },
            "fulfillmentPath": {
              "type": "array",
              "nullable": true,
              "description": "List of entities involved in the fulfillment processing path.",
              "items": {
                "$ref": "#/components/schemas/FulfillmentPathEntity"
              }
            },
            "estimatedDeliveryTime": {
              "type": "string",
              "nullable": true,
              "description": "The expected delivery time.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "estimatedPickupTime": {
              "type": "string",
              "nullable": true,
              "description": "The expected pickup time.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "confirmedAt": {
              "type": "string",
              "description": "The time that the request was accepted.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "deliveryTrackingUrl": {
              "type": "string",
              "nullable": true,
              "description": "URL to a web page that tracks the delivery.",
              "example": "www.example.com"
            },
            "providerDeliveryId": {
              "type": "string",
              "nullable": true,
              "description": "The provider's internal identifier for the delivery used for tracking purposes."
            }
          },
          "description": "Delivery information."
        },
        "CancelDeliveryCallbackRequest": {
          "type": "object",
          "properties": {
            "canceledAt": {
              "type": "string",
              "description": "The time that the request was cancelled.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            }
          },
          "description": "Cancellation result callback request."
        },
        "EventCallbackError": {
          "type": "object",
          "properties": {
            "errorCode": {
              "type": "string",
              "description": "Errors that occur processing the webhook, modeled after Google's gRPC error codes.",
              "enum": [
                "CANCELLED",
                "UNKNOWN",
                "INVALID_ARGUMENT",
                "FAILED_PRECONDITION",
                "DEADLINE_EXCEEDED",
                "NOT_FOUND",
                "PERMISSION_DENIED",
                "ALREADY_EXISTS",
                "RESOURCE_EXHAUSTED",
                "ABORTED",
                "OUT_OF_RANGE",
                "UNIMPLEMENTED",
                "INTERNAL",
                "UNAVAILABLE",
                "DATA_LOSS",
                "UNAUTHENTICATED"
              ],
              "example": "NOT_FOUND"
            },
            "errorMessage": {
              "type": "string",
              "nullable": true,
              "description": "Additional information about the error.",
              "example": "The store was not found."
            }
          },
          "description": "The error container for a processed callback."
        },
        "DeliveryQuote": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "minLength": 1,
              "description": "Delivery request ID.",
              "example": "11aab22c-6z3d-111e-b2e2-111cafa22b11"
            },
            "status": {
              "type": "string",
              "description": "Quote status.",
              "enum": [
                "AVAILABLE",
                "UNAVAILABLE"
              ]
            },
            "waitTimeOptions": {
              "type": "array",
              "nullable": true,
              "description": "Possible wait time durations in minutes",
              "items": {
                "type": "integer",
                "format": "int32",
                "example": 10
              }
            },
            "distance": {
              "$ref": "#/components/schemas/Distance"
            },
            "currencyCode": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "USD"
            },
            "baseFee": {
              "type": "number",
              "nullable": true,
              "format": "double",
              "deprecated": true,
              "description": "Use the cost field instead."
            },
            "extraFee": {
              "type": "number",
              "nullable": true,
              "format": "double",
              "deprecated": true,
              "description": "Use the cost field instead."
            },
            "totalFee": {
              "type": "number",
              "nullable": true,
              "format": "double",
              "deprecated": true,
              "description": "Use the cost field instead."
            },
            "cost": {
              "$ref": "#/components/schemas/DeliveryCost"
            },
            "provider": {
              "type": "string",
              "nullable": true,
              "description": "Delivery Service Provider Slug.",
              "example": "doordash"
            },
            "fulfillmentPath": {
              "type": "array",
              "nullable": true,
              "description": "List of entities involved in the fulfillment processing path.",
              "items": {
                "$ref": "#/components/schemas/FulfillmentPathEntity"
              }
            }
          },
          "description": "Delivery quote information."
        },
        "DeliveryQuoteOptions": {
          "type": "object",
          "properties": {
            "quotes": {
              "type": "array",
              "description": "List of currently available delivery quotes.",
              "items": {
                "$ref": "#/components/schemas/DeliveryQuote"
              }
            }
          },
          "description": "Available delivery quotes."
        },
        "AcceptDeliveryRequest": {
          "type": "object",
          "properties": {
            "quoteId": {
              "type": "string",
              "description": "Quote id from the requestQuote response.",
              "example": "11aab22c-6z3d-111e-b2e2-111cafa22b11"
            },
            "waitTime": {
              "type": "integer",
              "minimum": 0,
              "format": "int32",
              "description": "Wait time chosen for the delivery.",
              "example": 5
            }
          },
          "description": "Delivery acceptance details."
        },
        "POSFeedDelivery": {
          "type": "object",
          "properties": {
            "provider": {
              "type": "string",
              "nullable": true,
              "description": "Delivery Service Provider Slug.",
              "example": "doordash"
            },
            "courier": {
              "$ref": "#/components/schemas/Courier"
            },
            "estimatedDeliveryTime": {
              "type": "string",
              "nullable": true,
              "description": "Estimated delivery time",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "estimatedPickupTime": {
              "type": "string",
              "nullable": true,
              "description": "Estimated pickup time",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "status": {
              "$ref": "#/components/schemas/DeliveryStatus"
            },
            "deliveryStatus": {
              "type": "string",
              "enum": [
                "REQUESTED",
                "ALLOCATED",
                "PICKED_UP",
                "COMPLETED",
                "CANCELED"
              ],
              "deprecated": true,
              "description": "Use the status field instead."
            },
            "currencyCode": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3,
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "EUR"
            },
            "baseFee": {
              "type": "number",
              "format": "double",
              "nullable": true,
              "description": "Base delivery cost value."
            },
            "extraFee": {
              "type": "number",
              "format": "double",
              "nullable": true,
              "description": "Extra delivery cost value."
            },
            "totalFee": {
              "type": "number",
              "format": "double",
              "nullable": true,
              "description": "Total delivery cost value."
            },
            "distance": {
              "$ref": "#/components/schemas/Distance"
            },
            "processedTime": {
              "type": "string",
              "nullable": true,
              "description": "Time that the delivery was accepted and confirmed.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            }
          },
          "description": "Delivery information."
        },
        "CancelDeliveryResponse": {
          "type": "object",
          "properties": {
            "processedTime": {
              "type": "string",
              "nullable": true,
              "description": "Time that the delivery was canceled.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            }
          },
          "description": "Details about a cancellation delivery request."
        },
        "PongObject": {
          "type": "object",
          "properties": {
            "response": {
              "type": "string",
              "description": "A text response.",
              "example": "pong"
            },
            "currentTime": {
              "type": "string",
              "format": "date-time",
              "description": "The current timestamp.",
              "example": "2007-12-03T10:15:30+01:00"
            }
          }
        },
        "GenerateReportRequest": {
          "type": "object",
          "properties": {
            "reportType": {
              "type": "string",
              "description": "Type of report to generate",
              "example": "ORDER",
              "enum": [
                "ORDER"
              ]
            },
            "start": {
              "type": "string",
              "description": "Report start date",
              "format": "date",
              "example": "2021-10-01"
            },
            "end": {
              "type": "string",
              "description": "Report end date",
              "format": "date",
              "example": "2021-10-01"
            },
            "externalServiceSlugs": {
              "type": "array",
              "nullable": true,
              "description": "List of external service slugs to fetch orders from. Default to all services",
              "example": [
                "ubereats",
                "postmates"
              ],
              "items": {
                "type": "string",
                "description": "List of external service slugs to fetch orders from. Default to all services",
                "example": "[\"ubereats\",\"postmates\"]"
              }
            }
          },
          "description": "The request to generate a report."
        },
        "JobId": {
          "type": "string",
          "description": "ID used to track the job created for generating report.",
          "example": "38ab397f-b142-4b06-b70c-40c68a408bea"
        },
        "GenerateReportResponse": {
          "type": "object",
          "properties": {
            "jobId": {
              "$ref": "#/components/schemas/JobId"
            }
          },
          "description": "The response to a generate report request"
        },
        "GetReportStatusResponse": {
          "type": "object",
          "properties": {
            "status": {
              "description": "Report export status",
              "type": "string",
              "enum": [
                "IN_PROGRESS",
                "READY",
                "ERROR",
                "EXPIRED"
              ]
            },
            "payload": {
              "type": "object",
              "properties": {
                "reportUrl": {
                  "type": "string",
                  "nullable": true,
                  "description": "Url to download the report. It will be available only if status is \"READY\"",
                  "example": "https://example.com/path/to/report.csv.gz"
                },
                "errorMessage": {
                  "type": "string",
                  "nullable": true,
                  "description": "Error message. It will be available only if status is \"ERROR\"",
                  "example": "Report generation error. Please reach out to support and provide jobId"
                }
              }
            }
          }
        },
        "GenerateReportMultiRequest": {
          "type": "object",
          "properties": {
            "reportType": {
              "type": "string",
              "description": "Type of report to generate",
              "example": "ORDER_STORES",
              "enum": [
                "ORDER_STORES"
              ]
            },
            "start": {
              "type": "string",
              "description": "Report start date",
              "format": "date",
              "example": "2021-10-01"
            },
            "end": {
              "type": "string",
              "description": "Report end date",
              "format": "date",
              "example": "2021-10-01"
            },
            "externalStoreIds": {
              "type": "array",
              "nullable": false,
              "description": "List of external store IDs to filter the orders with. At least one value is required. Max is 5000. Fails the requests if one or more invalid external store ID is passed",
              "example": [
                "brand1-acbdef",
                "brand1-fghjkl",
                "brand2-qwerty"
              ],
              "items": {
                "type": "string",
                "description": "List of external store IDs to filter the orders with. At least one value is required. Fails the requests if one or more invalid external store ID is passed",
                "example": "[\"brand1-acbdef\", \"brand1-fghjkl\", \"brand2-qwerty\"]"
              }
            },
            "externalServiceSlugs": {
              "type": "array",
              "nullable": true,
              "description": "List of external service slugs to fetch orders from. Default to all services",
              "example": [
                "ubereats",
                "postmates"
              ],
              "items": {
                "type": "string",
                "description": "List of external service slugs to fetch orders from. Default to all services",
                "example": "[\"ubereats\",\"postmates\"]"
              }
            }
          },
          "description": "The request to generate a report for multiple stores."
        },
        "OAuthTokenGenerationRequest": {
          "required": [
            "grant_type",
            "scope"
          ],
          "type": "object",
          "properties": {
            "client_id": {
              "type": "string",
              "description": "The ID of the client (also known as the Application ID).",
              "format": "uuid"
            },
            "client_secret": {
              "type": "string",
              "description": "The secret of the client."
            },
            "grant_type": {
              "type": "string",
              "description": "The OAuth2.0 grant types supported.",
              "enum": [
                "client_credentials"
              ]
            },
            "scope": {
              "type": "string",
              "description": "The scope to request, multiple scopes are passed delimited by a space character.",
              "example": "scope1 scope2"
            }
          },
          "description": "The entity to request a token, following the OAuth2.0 protocol."
        },
        "HydraToken": {
          "type": "object",
          "properties": {
            "access_token": {
              "type": "string",
              "description": "The auth token used when consuming the API endpoints.",
              "example": "oMahtBwBbnZeh4Q66mSuLFmk2V0_CLCKVt0aYcNJlcg.yditzjwCP7yp0PgR6AzQR3wQ1rTdCjkcPeAMuyfK-NU"
            },
            "expires_in": {
              "type": "integer",
              "format": "int64",
              "description": "The token expiration time in seconds.",
              "example": 2627999
            },
            "scope": {
              "type": "string",
              "description": "The scopes available for the token.",
              "example": "ping orders.create"
            },
            "token_type": {
              "type": "string",
              "description": "The token type is always \"bearer\".",
              "example": "bearer"
            }
          }
        },
        "ApplicationId": {
          "type": "string",
          "description": "The plain-text Application ID, provided at partner onboarding, also available on Developer Portal.",
          "example": "5045c1c3-694f-4392-b43b-e765cd89c8b8"
        },
        "UpsertStorelinkEventResultRequest": {
          "required": [
            "success"
          ],
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the partner application successfully created and validated the credential provided through the `Upsert Store Webhook`."
            },
            "storeId": {
              "nullable": true,
              "type": "string",
              "description": "The unique identifier of the store in the partner application. This ID, along with the `Application ID`, will be used to match the correct store when performing operations. It cannot be longer than 255 characters and must only contain printable ASCII characters.",
              "example": "partner-store-unique-identifier"
            },
            "errorMessage": {
              "nullable": true,
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "The error description.",
                  "example": "The request body is invalid."
                },
                "details": {
                  "type": "array",
                  "description": "The error details.",
                  "items": {
                    "$ref": "#/components/schemas/ErrorDetail"
                  }
                }
              },
              "description": "The error response object."
            }
          }
        },
        "UpdateStorelinkStatusRequest": {
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "The new status of the store. ACTIVE: store ready to perform operations again; SUSPENDED: temporarily disables the store; INVALID: current credentials will no longer work, new credentials needed.",
              "enum": [
                "ACTIVE",
                "SUSPENDED",
                "INVALID"
              ],
              "example": "SUSPENDED"
            },
            "message": {
              "nullable": true,
              "type": "string",
              "description": "Optional message to explain the reason of the status update.",
              "example": "Authentication is failing with current credentials.  Suspending store while the retry process is in progress."
            }
          }
        },
        "OrderIdentifierFinance": {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique ID for the order that was placed.",
              "example": "69f60a06-c335-46d9-b5a1-97f1a211c514"
            },
            "source": {
              "type": "string",
              "nullable": true,
              "description": "Describes the source of the order, typically from a food ordering marketplace.",
              "example": "ubereats"
            }
          },
          "description": "The external identifiers of the order."
        },
        "PayoutInfo": {
          "required": [
            "id",
            "date"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Payout identifier."
            },
            "date": {
              "type": "string",
              "description": "The payout date.",
              "format": "date",
              "example": "2021-10-01"
            }
          }
        },
        "OrderIssue": {
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Order issue type.",
              "enum": [
                "MISSING_ITEM",
                "INCOMPLETE",
                "WRONG_INGREDIENTS",
                "WRONG_SIZE",
                "WRONG_INSTRUCTIONS",
                "TEMPERATURE_COLD",
                "WRONG_ORDER",
                "POOR_QUALITY",
                "HANDLED_POORLY",
                "WRONG_ITEM",
                "WRONG_QUANTITY",
                "LATE_TO_COURIER"
              ]
            }
          }
        },
        "OrderItemInformation": {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Regular item identifier."
            },
            "name": {
              "type": "string",
              "nullable": true,
              "description": "Item name"
            },
            "issues": {
              "type": "array",
              "nullable": true,
              "description": "Order issues that relate to this item.",
              "items": {
                "$ref": "#/components/schemas/OrderIssue"
              }
            }
          }
        },
        "FinancialTransaction": {
          "required": [
            "id",
            "orderIdentifiers",
            "pending",
            "currencyCode",
            "createdAt",
            "type",
            "data"
          ],
          "type": "object",
          "properties": {
            "orderIdentifiers": {
              "$ref": "#/components/schemas/OrderIdentifierFinance"
            },
            "id": {
              "type": "string",
              "description": "External financial transaction identifier."
            },
            "pending": {
              "type": "boolean",
              "description": "Whether the transaction can be updated in the future."
            },
            "currencyCode": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values in this order.",
              "example": "EUR"
            },
            "createdAt": {
              "type": "string",
              "description": "The date (in UTC) when the financial transaction was created.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "customerId": {
              "type": "string",
              "nullable": true,
              "description": "Customer identifier."
            },
            "notes": {
              "type": "string",
              "nullable": true,
              "description": "General notes about the financial transaction."
            },
            "type": {
              "type": "string",
              "description": "Financial transaction operation type.",
              "enum": [
                "PAYMENT",
                "ADJUSTMENT",
                "CANCELLATION",
                "MISC"
              ]
            },
            "payout": {
              "nullable": true,
              "$ref": "#/components/schemas/PayoutInfo"
            },
            "orderItems": {
              "type": "array",
              "nullable": true,
              "description": "Detailed financial per order item.",
              "items": {
                "$ref": "#/components/schemas/OrderItemInformation"
              }
            },
            "issues": {
              "type": "array",
              "nullable": true,
              "description": "List of issues that might have happened with the order.",
              "items": {
                "$ref": "#/components/schemas/OrderIssue"
              }
            },
            "data": {
              "$ref": "#/components/schemas/FinancialData"
            }
          }
        },
        "InvoicePayoutInfo": {
          "required": [
            "id",
            "date"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Payout identifier."
            },
            "date": {
              "type": "string",
              "description": "The payout date.",
              "format": "date",
              "example": "2021-10-01"
            },
            "summary": {
              "$ref": "#/components/schemas/FinancialData"
            },
            "total": {
              "type": "number",
              "nullable": true,
              "description": "Total payout value. Should only be used if summary is not provided.",
              "example": 19.07
            }
          }
        },
        "SimpleOrderIdentifierFinance": {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique ID for the order that was placed.",
              "example": "69f60a06-c335-46d9-b5a1-97f1a211c514"
            }
          },
          "description": "The external identifiers of the order."
        },
        "SimpleFinancialTransaction": {
          "required": [
            "id",
            "orderIdentifiers",
            "createdAt",
            "type",
            "data"
          ],
          "type": "object",
          "properties": {
            "orderIdentifiers": {
              "$ref": "#/components/schemas/SimpleOrderIdentifierFinance"
            },
            "id": {
              "type": "string",
              "description": "External financial transaction identifier."
            },
            "createdAt": {
              "type": "string",
              "description": "The date (in UTC) when the financial transaction was created.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "customerId": {
              "type": "string",
              "nullable": true,
              "description": "Customer identifier."
            },
            "notes": {
              "type": "string",
              "nullable": true,
              "description": "General notes about the financial transaction."
            },
            "type": {
              "type": "string",
              "description": "Financial transaction operation type.",
              "enum": [
                "PAYMENT",
                "ADJUSTMENT",
                "CANCELLATION",
                "MISC"
              ]
            },
            "orderItems": {
              "type": "array",
              "nullable": true,
              "description": "Detailed financial per order item.",
              "items": {
                "$ref": "#/components/schemas/OrderItemInformation"
              }
            },
            "issues": {
              "type": "array",
              "nullable": true,
              "description": "List of issues that might have happened with the order.",
              "items": {
                "$ref": "#/components/schemas/OrderIssue"
              }
            },
            "data": {
              "$ref": "#/components/schemas/FinancialData"
            }
          }
        },
        "FinancialInvoice": {
          "required": [
            "payout",
            "financialTransactions"
          ],
          "type": "object",
          "properties": {
            "sourceService": {
              "type": "string",
              "nullable": true,
              "description": "Describes the source of the order, typically from a food ordering marketplace.",
              "example": "ubereats"
            },
            "payout": {
              "$ref": "#/components/schemas/InvoicePayoutInfo"
            },
            "financialTransactions": {
              "type": "array",
              "description": "List of financial transactions related to this invoice.",
              "items": {
                "$ref": "#/components/schemas/SimpleFinancialTransaction"
              }
            },
            "currencyCode": {
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values in this order.",
              "example": "EUR"
            }
          }
        },
        "CaptchaRequest": {
          "type": "object",
          "properties": {
            "websiteUrl": {
              "type": "string",
              "description": "The URL that generated the captcha site key",
              "example": "https://2captcha.com/demo/recaptcha-v2"
            },
            "recaptchaSiteKey": {
              "type": "string",
              "description": "The captcha key",
              "example": "6LeIxboZAAAAAFQy7d8GPzgRZu2bV0GwKS8ue_cH"
            },
            "serviceSlug": {
              "type": "string",
              "description": "The slug of the service which is requesting the captcha",
              "example": "ubereats"
            },
            "action": {
              "type": "string",
              "nullable": true,
              "description": "The captcha action available when solving a reCaptcha V3 captcha",
              "example": "login"
            }
          },
          "description": "The request to solve a captcha."
        },
        "CaptchaSolution": {
          "type": "object",
          "properties": {
            "solution": {
              "type": "string",
              "description": "The captcha solution token",
              "example": "03AGdBq27lvCYmKkaqDdxWLfMe3ovADGfGlSyiR-fN_EJrZGniTAmdH1XSjK8ralsctfjOLX2K0T7dJfxPqqga8dtSG2Lmns8Gk2ckcU6PQzUFieBqrtpkr5PPwnngew0Rnot2ik1y8m202u6pHTIquExlEYSlzS8vfoyPPt8fCf-Zrbu8vWkiY8Ogj17ommHMgkguZbmEyOdfLTXzhRko-a655_jJdCMjEtMxva-b78DnGlXu9d0o6vEmrw9n8ABu4lLsWnIbYPH0beXRRIkUE3si64Xhwkh1aO3L1HaIR3sfR0vOs3GV1OBzry_tFsZM0ZhSQovKJwjLlotrYajyTSRv3hgvXtLlLxXzbAwgeI91-wM7AFEte0uO_DhcNajxZr7E50wU9vuAe_drGWe4q-hNx4PQPenjaw"
            }
          },
          "description": "The solution to a captcha."
        },
        "MetadataObject": {
          "type": "object",
          "properties": {
            "storeId": {
              "$ref": "#/components/schemas/StoreId"
            },
            "applicationId": {
              "type": "string",
              "description": "The plain-text Application ID, provided at partner onboarding, also available on Developer Portal.",
              "example": "ad4ff59d-04c0-4c7d-8ca3-e3a673f8443d"
            },
            "resourceId": {
              "type": "string",
              "description": "Identifier of the resource that this event refers to, if needed.",
              "example": "resource-id-if-needed"
            },
            "payload": {
              "type": "object",
              "description": "Object containing details of the given event, if needed."
            },
            "resourceHref": {
              "type": "string",
              "description": "The full endpoint to fetch the details of the resource, if needed.",
              "example": "resource-href-id-if-needed"
            }
          },
          "description": "Information about the event."
        },
        "EventNotification": {
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string",
              "description": "Unique identifier of the event.",
              "format": "uuid"
            },
            "eventTime": {
              "type": "string",
              "description": "Date of event occurrence.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "eventType": {
              "type": "string",
              "description": "The type of the event."
            },
            "metadata": {
              "$ref": "#/components/schemas/MetadataObject"
            }
          },
          "description": "Notification message sent on relevant events."
        },
        "IntentToCancelEvent": {
          "type": "object",
          "properties": {
            "externalIdentifiers": {
              "$ref": "#/components/schemas/OrderExternalIdentifiers"
            },
            "cancellationReason": {
              "type": "string",
              "description": "The reason for a cancellation.",
              "enum": [
                "REASON_UNKNOWN",
                "DUPLICATE_ORDER",
                "UNAVAILABLE_ITEM",
                "FRAUDULENT_EATER",
                "RESTAURANT_INTERNAL_ISSUE",
                "KITCHEN_CLOSED",
                "CUSTOMER_CALLED_TO_CANCEL",
                "CANNOT_COMPLETE_CUSTOMER_REQUEST",
                "RESTAURANT_TOO_BUSY",
                "UNACCEPTED_ORDER",
                "RESTAURANT_CANCELED",
                "AUTOMATICALLY_CANCELED",
                "LATE_DELIVERY",
                "COURIER_NOT_FOUND",
                "CUSTOMER_NOT_FOUND",
                "UNABLE_TO_DELIVER"
              ]
            }
          },
          "description": "Event that request the intent to cancel an order."
        },
        "OrderStatusEvent": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Events that represent updates on order status.",
              "enum": [
                "ORDER_ACCEPTED",
                "ORDER_HANDED_OFF",
                "ORDER_READY_TO_PICKUP",
                "ORDER_FULFILLED"
              ]
            },
            "eventTime": {
              "type": "string",
              "description": "The time when this OrderStatusUpdateEvent occurred",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            }
          }
        },
        "OrderStatusHistory": {
          "type": "object",
          "description": "The Order Status Update History and extra data.",
          "properties": {
            "orderStatusHistory": {
              "type": "array",
              "description": "Array of OrderStatusEvent",
              "items": {
                "$ref": "#/components/schemas/OrderStatusEvent"
              }
            },
            "orderAcceptedInfo": {
              "type": "object",
              "nullable": true,
              "description": "[NEW] Extra information added once the order was accepted by the restaurant. This field is nullable.",
              "properties": {
                "preparationTimeInMinutes": {
                  "type": "integer",
                  "description": "[NEW] The time in minutes the restaurant says it will take to prepare the order."
                }
              },
              "required": [
                "preparationTimeInMinutes"
              ]
            }
          }
        },
        "OrderReadyEvent": {
          "type": "object",
          "properties": {
            "orderId": {
              "type": "string",
              "description": "Unique ID for the order that was placed.",
              "example": "69f60a06-c335-46d9-b5a1-97f1a211c514"
            }
          },
          "description": "Event notifiying that the order has acquired status READY."
        },
        "OrderHandedOffEvent": {
          "type": "object",
          "properties": {
            "orderId": {
              "type": "string",
              "description": "Unique ID for the order that was placed.",
              "example": "69f60a06-c335-46d9-b5a1-97f1a211c514"
            },
            "courierPhone": {
              "nullable": true,
              "type": "string",
              "description": "The phone number of the courier.",
              "example": "415-234-3212"
            },
            "courierBodyTempFahrenheit": {
              "nullable": true,
              "type": "number",
              "description": "The temperature of the courier in fahrenheit.",
              "example": 36.6
            },
            "isCourierWearingMask": {
              "nullable": true,
              "type": "boolean",
              "description": "Whether or not the courier is wearing a mask.",
              "example": true
            }
          },
          "description": "Event notifiying that the order has acquired status HANDED OFF."
        },
        "OrderFulfilledEvent": {
          "type": "object",
          "properties": {
            "orderId": {
              "type": "string",
              "description": "Unique ID for the order that was placed.",
              "example": "69f60a06-c335-46d9-b5a1-97f1a211c514"
            }
          },
          "description": "Event notifiying that the order has acquired status FULFILLED."
        },
        "MenuPublishEvent": {
          "required": [
            "menuData"
          ],
          "type": "object",
          "properties": {
            "menuData": {
              "$ref": "#/components/schemas/MenuData"
            }
          },
          "description": "Event data containing the upserted MenuData."
        },
        "NullEvent": {
          "type": "object",
          "nullable": true,
          "description": "Empty event payload."
        },
        "ItemSelector": {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the item.",
              "example": "06ef2722-cbf2-11ec-9d64-0242ac120002"
            },
            "isModifier": {
              "type": "boolean",
              "description": "True, if the item is used as a modifier."
            }
          },
          "description": "Used to select a specific item."
        },
        "UpdateItemStatusEntry": {
          "required": [
            "selector",
            "status"
          ],
          "type": "object",
          "properties": {
            "selector": {
              "$ref": "#/components/schemas/ItemSelector"
            },
            "status": {
              "$ref": "#/components/schemas/ItemStatus"
            }
          },
          "description": "Update the status of an Item to the provided value."
        },
        "BulkUpdateItemStatus": {
          "required": [
            "updates"
          ],
          "type": "object",
          "properties": {
            "updates": {
              "type": "array",
              "minItems": 1,
              "description": "List of item status updates.",
              "items": {
                "$ref": "#/components/schemas/UpdateItemStatusEntry"
              }
            }
          },
          "description": "Event data containing list of item status updates."
        },
        "UpsertHoursEvent": {
          "required": [
            "menuHoursData"
          ],
          "type": "object",
          "properties": {
            "menuHoursData": {
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "menuId",
                "$ref": "#/components/schemas/HoursData"
              },
              "description": "Menu IDs to Hours",
              "example": {
                "da0e4e94-5670-4175-897a-3b7dde45bed5": {
                  "timeZone": "America/Los_Angeles",
                  "regularHours": [
                    {
                      "days": [
                        "MONDAY",
                        "TUESDAY",
                        "WEDNESDAY",
                        "THURSDAY",
                        "FRIDAY"
                      ],
                      "timeRanges": [
                        {
                          "start": "08:00",
                          "end": "22:00"
                        }
                      ]
                    }
                  ],
                  "specialHours": [
                    {
                      "date": "2021-12-31",
                      "timeRanges": [
                        {
                          "start": "08:00",
                          "end": "22:00"
                        }
                      ],
                      "type": "CLOSED"
                    }
                  ]
                }
              }
            }
          },
          "description": "Event data containing all Menu Hours."
        },
        "UnpauseStoreEvent": {
          "type": "string",
          "description": "Closure ID. Required to unpause a store, if available.",
          "example": "4109d2c9-8bc5-413c-af3e-1c92aa381e41"
        },
        "DeliveryStatusUpdateEvent": {
          "type": "object",
          "properties": {
            "provider": {
              "type": "string",
              "description": "Describes the provider of the delivery.",
              "example": "doordash"
            },
            "courier": {
              "$ref": "#/components/schemas/Courier"
            },
            "estimatedDeliveryTime": {
              "type": "string",
              "nullable": true,
              "description": "The expected delivery time.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "estimatedPickupTime": {
              "type": "string",
              "nullable": true,
              "description": "The expected pickup time.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "status": {
              "$ref": "#/components/schemas/DeliveryStatus"
            },
            "deliveryStatus": {
              "$ref": "#/components/schemas/DeliveryStatus"
            },
            "currencyCode": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3,
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "EUR"
            },
            "baseFee": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "extraFee": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "totalFee": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "distance": {
              "$ref": "#/components/schemas/Distance"
            },
            "updatedTime": {
              "type": "string",
              "nullable": true,
              "description": "The time that the delivery status was updated.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            }
          },
          "description": "Event that represent a status update for a delivery."
        },
        "RequiredAddress": {
          "type": "object",
          "properties": {
            "fullAddress": {
              "type": "string",
              "nullable": true,
              "description": "Full, human comprehensible address. It is usually formatted in the order appropriate for your locale. Currently only populated for cases in which only single-line address is available.",
              "example": "123 Sample Street Ste 100, San Francisco, CA 94103"
            },
            "postalCode": {
              "type": "string",
              "description": "Postal code of the address.",
              "example": "20500"
            },
            "city": {
              "type": "string",
              "description": "The city/town portion of the address.",
              "example": "Washington"
            },
            "state": {
              "type": "string",
              "description": "Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, or a prefecture.",
              "example": "DC"
            },
            "countryCode": {
              "type": "string",
              "description": "CLDR country code. See http://cldr.unicode.org/",
              "example": "US"
            },
            "addressLines": {
              "type": "array",
              "nullable": true,
              "description": "Address lines (e.g. street, PO Box, or company name) or the full single line address (e.g. street, city, state, country, zip).",
              "example": [
                "1600 Pennsylvania Avenue NW",
                "123 Sample Street Ste 100, San Francisco, CA 94103"
              ],
              "items": {
                "type": "string"
              }
            },
            "linesOfAddress": {
              "type": "array",
              "nullable": true,
              "deprecated": true,
              "description": "Deprecated: use addressLines. Address lines (e.g. street, PO Box, or company name) or the full single line address (e.g. street, city, state, country, zip).",
              "example": [
                "1600 Pennsylvania Avenue NW",
                "123 Sample Street Ste 100, San Francisco, CA 94103"
              ],
              "items": {
                "type": "string"
              }
            },
            "location": {
              "$ref": "#/components/schemas/Location"
            }
          },
          "description": "Address."
        },
        "RequestDeliveryQuoteEvent": {
          "type": "object",
          "properties": {
            "deliveryReferenceId": {
              "type": "string",
              "description": "Generated delivery reference id.",
              "example": "d1a5e7c6-a79a-49bc-83bf-4169cd9c9dda"
            },
            "provider": {
              "type": "string",
              "description": "the pre-configured fulfillment provider slug in the onboarding process.",
              "example": "doordash"
            },
            "preferredPickupDuration": {
              "type": "integer",
              "description": "Preferred time for courier to arrive to pick up order. Value expressed in minutes and is relative to time delivery request is made. If not provided, or if the value is 0, please treat it as an ASAP request.",
              "format": "int32"
            },
            "pickupAddress": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequiredAddress"
                }
              ],
              "description": "Order pickup address."
            },
            "dropoffAddress": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequiredAddress"
                }
              ],
              "description": "Order drop-off address."
            },
            "destinationAddress": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequiredAddress"
                }
              ],
              "description": "Order destination address. Deprecated in favor of dropoffAddress.",
              "deprecated": true
            },
            "pickUpLocationId": {
              "type": "string",
              "nullable": true,
              "description": "An identifier for the pick up location",
              "example": "d197bd64-a037-4b6e-aad7-06918e7e2d75"
            },
            "orderSubTotal": {
              "type": "number",
              "nullable": true,
              "description": "The sum of all item and modifier pricing",
              "example": 15
            },
            "currencyCode": {
              "type": "string",
              "nullable": true,
              "minLength": 3,
              "maxLength": 3,
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "KRW"
            },
            "containsAlcoholicItem": {
              "type": "boolean",
              "nullable": true,
              "description": "Whether or not the order contains an alcoholic item."
            },
            "customerPayments": {
              "type": "array",
              "nullable": true,
              "description": "Processed and collectible payments from the customer.",
              "items": {
                "$ref": "#/components/schemas/CustomerPayment"
              }
            }
          }
        },
        "RequiredPerson": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "nullable": true,
              "description": "The person's name as it should be displayed.",
              "example": "Jane Doe"
            },
            "phone": {
              "type": "string",
              "nullable": true,
              "description": "The person's phone number.",
              "example": "+1-555-555-5555"
            },
            "phoneCode": {
              "type": "string",
              "nullable": true,
              "description": "A code or extension of the phone number.",
              "example": "111 11 111"
            },
            "email": {
              "type": "string",
              "nullable": true,
              "description": "The person's email address.",
              "example": "email@email.com"
            },
            "personalIdentifiers": {
              "$ref": "#/components/schemas/PersonalIdentifiers"
            }
          },
          "description": "Details about the customer who placed the order."
        },
        "CustomerTip": {
          "type": "object",
          "nullable": true,
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "number",
              "description": "The amount that the customer tipped.",
              "example": 2
            }
          }
        },
        "Store": {
          "type": "object",
          "nullable": true,
          "properties": {
            "name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the store.",
              "example": "Chipotle"
            },
            "phone": {
              "type": "string",
              "nullable": true,
              "description": "The phone number to contact the store.",
              "example": "+1-555-555-5555"
            }
          }
        },
        "ModifierItem": {
          "type": "object",
          "nullable": true,
          "properties": {
            "modifierId": {
              "type": "string",
              "nullable": true,
              "description": "ID for this modifier."
            },
            "name": {
              "type": "string",
              "nullable": true,
              "description": "Human-readable name for this modifier."
            },
            "price": {
              "type": "number",
              "nullable": true,
              "description": "Per-unit price of this modifier."
            },
            "quantity": {
              "type": "number",
              "nullable": true,
              "description": "Number of units of this modifier being added to the item."
            },
            "modifiers": {
              "type": "array",
              "nullable": true,
              "description": "Nested modifier items.",
              "items": {
                "$ref": "#/components/schemas/ModifierItem"
              }
            }
          }
        },
        "Item-2": {
          "type": "object",
          "nullable": true,
          "properties": {
            "name": {
              "type": "string",
              "nullable": true,
              "description": "Human-readable name for this item."
            },
            "price": {
              "type": "number",
              "nullable": true,
              "description": "Per-unit price. This value excludes modifier prices."
            },
            "quantity": {
              "type": "number",
              "nullable": true,
              "description": "Number of units of this item being ordered."
            },
            "itemId": {
              "type": "string",
              "nullable": true,
              "description": "ID for this item."
            },
            "modifiers": {
              "type": "array",
              "nullable": true,
              "description": "Any modifiers attached to this item.",
              "items": {
                "$ref": "#/components/schemas/ModifierItem"
              }
            }
          }
        },
        "PickUpInfo": {
          "type": "object",
          "nullable": true,
          "properties": {
            "readyAtTime": {
              "type": "string",
              "description": "The timestamp the order(s) became ready for pick up by a courier. If not provided, the order is not yet ready to be picked up.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            }
          },
          "description": "Pick up information for delivery."
        },
        "AcceptDeliveryEvent": {
          "type": "object",
          "properties": {
            "deliveryReferenceId": {
              "type": "string",
              "description": "Generated delivery reference id.",
              "example": "d1a5e7c6-a79a-49bc-83bf-4169cd9c9dda"
            },
            "provider": {
              "type": "string",
              "description": "the pre-configured fulfillment provider slug in the onboarding process.",
              "example": "doordash"
            },
            "preferredPickupTime": {
              "type": "string",
              "description": "Preferred time for courier to arrive to pick up order. If not provided or if the timestamp is in the past, treat it as an ASAP request.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "pickupOrderId": {
              "type": "string",
              "description": "An identifier used for picking up order from pickup address.",
              "example": "19dc56c8-4497-4392-a612-9f81beb5fe5f"
            },
            "pickupNote": {
              "type": "string",
              "nullable": true,
              "deprecated": true,
              "description": "Additional information to instruct couriers how to pickup the order. Deprecated in favor of pickUpInstructions.",
              "example": "Left side of the restaurant"
            },
            "pickupAddress": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequiredAddress"
                }
              ],
              "description": "Order pickup address."
            },
            "dropoffNote": {
              "type": "string",
              "nullable": true,
              "description": "Additional information to instruct couriers how to dropoff the order.",
              "example": "Please ring the doorbell"
            },
            "dropoffAddress": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequiredAddress"
                }
              ],
              "description": "Order drop-off address."
            },
            "customer": {
              "$ref": "#/components/schemas/RequiredPerson"
            },
            "customerPayments": {
              "type": "array",
              "nullable": true,
              "description": "Processed and collectible payments from the customer.",
              "items": {
                "$ref": "#/components/schemas/CustomerPayment"
              }
            },
            "currencyCode": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3,
              "nullable": true,
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "KRW"
            },
            "customerTip": {
              "$ref": "#/components/schemas/CustomerTip"
            },
            "orderSubTotal": {
              "type": "number",
              "nullable": true,
              "description": "The sum of all item and modifier pricing",
              "example": 15
            },
            "pickUpLocationId": {
              "type": "string",
              "nullable": true,
              "description": "An identifier for the pick up location",
              "example": "d197bd64-a037-4b6e-aad7-06918e7e2d75"
            },
            "containsAlcoholicItem": {
              "type": "boolean",
              "nullable": true,
              "description": "Whether or not the order contains an alcoholic item."
            },
            "pickUpInstructions": {
              "type": "string",
              "nullable": true,
              "description": "Additional information to instruct couriers how to pickup the order."
            },
            "store": {
              "$ref": "#/components/schemas/Store"
            },
            "orderItems": {
              "type": "array",
              "nullable": true,
              "description": "Items and modifiers in the order.",
              "items": {
                "$ref": "#/components/schemas/Item-2"
              }
            },
            "ofoDisplayId": {
              "type": "string",
              "nullable": true,
              "description": "An identifier used to reference the order in the order source.",
              "example": 5989
            },
            "ofoSlug": {
              "type": "string",
              "nullable": true,
              "description": "Slug to identify the OFO that is the source of order.",
              "example": "ifood"
            },
            "pickUpInfo": {
              "$ref": "#/components/schemas/PickUpInfo"
            }
          }
        },
        "CancelDeliveryEvent": {
          "type": "object",
          "properties": {
            "deliveryReferenceId": {
              "type": "string",
              "description": "Generated delivery reference id.",
              "example": "d1a5e7c6-a79a-49bc-83bf-4169cd9c9dda"
            }
          }
        },
        "UpdateDeliveryRequestEvent": {
          "type": "object",
          "properties": {
            "deliveryReferenceId": {
              "type": "string",
              "description": "Generated delivery reference id.",
              "example": "d1a5e7c6-a79a-49bc-83bf-4169cd9c9dda"
            },
            "provider": {
              "type": "string",
              "description": "the pre-configured fulfillment provider slug in the onboarding process.",
              "example": "doordash"
            },
            "currencyCode": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3,
              "nullable": true,
              "description": "The 3-letter currency code (ISO 4217) to use for all monetary values.",
              "example": "USD"
            },
            "customerPayments": {
              "type": "array",
              "nullable": true,
              "description": "Processed and collectible payments from the customer.",
              "items": {
                "$ref": "#/components/schemas/CustomerPayment"
              }
            },
            "customerTip": {
              "$ref": "#/components/schemas/CustomerTip"
            },
            "pickUpInfo": {
              "$ref": "#/components/schemas/PickUpInfo"
            }
          }
        },
        "ReportGeneratedEvent": {
          "type": "object",
          "properties": {
            "reportUrl": {
              "type": "string",
              "description": "Public URL to download generated report",
              "example": "https://example.com/"
            },
            "jobId": {
              "type": "string",
              "description": "Job id as returned by /v1/reports call",
              "example": "38ab397f-b142-4b06-b70c-40c68a408bea"
            }
          },
          "description": "Event data containing metadata of the generated report"
        },
        "PingEvent": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "example": "Hello World"
            }
          }
        },
        "FulfilledCredential": {
          "required": [
            "key",
            "value"
          ],
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The key of the credential.",
              "example": "userEmail"
            },
            "value": {
              "type": "string",
              "description": "The value of the credential.",
              "example": "test-user@gmail.com"
            }
          }
        },
        "StoreInfo": {
          "required": [
            "name",
            "address",
            "currencyCode",
            "timezone",
            "internalStoreId"
          ],
          "type": "object",
          "description": "Useful information about the store.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The store name."
            },
            "address": {
              "type": "string",
              "description": "The store address."
            },
            "currencyCode": {
              "type": "string",
              "description": "The currency code for the store."
            },
            "timezone": {
              "type": "string",
              "description": "The store timezone."
            },
            "internalStoreId": {
              "type": "string",
              "description": "Our internal store identifier, also known as \"SkuSku ID\"."
            }
          },
          "example": {
            "name": "Store Public Name",
            "address": "Some Street, 1234",
            "currencyCode": "USD",
            "timezone": "America/Los_Angeles",
            "internalStoreId": "51608e41-5d9e-477f-ae02-8c0c68036d5d"
          }
        },
        "UpsertStorelinkEvent": {
          "required": [
            "credentialsSchemaVersion",
            "credentials",
            "storeInfo"
          ],
          "type": "object",
          "properties": {
            "credentialsSchemaVersion": {
              "type": "string",
              "description": "The version of the credentials schema.",
              "example": "1.0"
            },
            "credentials": {
              "type": "array",
              "description": "Array of fulfilled credentials containing its keys and values.",
              "items": {
                "$ref": "#/components/schemas/FulfilledCredential"
              },
              "example": [
                {
                  "key": "email",
                  "value": "test@email.com"
                },
                {
                  "key": "password",
                  "value": "test-pwd-1234"
                }
              ]
            },
            "storeInfo": {
              "$ref": "#/components/schemas/StoreInfo"
            }
          }
        },
        "EventNotificationBase": {
          "required": [
            "eventId",
            "eventTime",
            "eventType",
            "metadata"
          ],
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string",
              "description": "Unique identifier of the event.",
              "format": "uuid"
            },
            "eventTime": {
              "type": "string",
              "description": "Date of event occurrence.",
              "format": "date-time",
              "example": "2007-12-03T10:15:30+01:00"
            },
            "eventType": {
              "type": "string",
              "description": "The type of event."
            }
          },
          "description": "Notification message sent on relevant events."
        },
        "MetadataObjectNoPayload": {
          "required": [
            "applicationId"
          ],
          "type": "object",
          "properties": {
            "applicationId": {
              "$ref": "#/components/schemas/ApplicationId"
            }
          },
          "description": "Information about the event."
        },
        "EventNotificationNoPayload": {
          "allOf": [
            {
              "$ref": "#/components/schemas/EventNotificationBase"
            },
            {
              "type": "object",
              "properties": {
                "metadata": {
                  "$ref": "#/components/schemas/MetadataObjectNoPayload"
                }
              }
            }
          ]
        },
        "OptionalStoreIdInMetadata": {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "object",
              "properties": {
                "storeId": {
                  "$ref": "#/components/schemas/StoreId"
                }
              }
            }
          }
        },
        "CredentialsSchemaVersion": {
          "type": "string",
          "description": "The version of the credentials schema.",
          "example": "1.0"
        },
        "ViewCredential": {
          "required": [
            "key",
            "label"
          ],
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The key of the credential.",
              "example": "userEmail"
            },
            "label": {
              "type": "string",
              "description": "The friendly name of the credential.",
              "example": "User Email"
            },
            "value": {
              "type": "string",
              "description": "The value of the credential. Only returned if the Store ID was provided in the request.",
              "example": "test-user@gmail.com"
            },
            "inputType": {
              "type": "string",
              "description": "The type of input",
              "enum": [
                "TEXT",
                "SELECT",
                "MULTI_SELECT"
              ],
              "default": "TEXT"
            },
            "selectOptions": {
              "type": "array",
              "description": "options to select when type is `SELECT` or `MULTI_SELECT`",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ViewCredentialsArray": {
          "type": "object",
          "properties": {
            "credentialsSchemaVersion": {
              "$ref": "#/components/schemas/CredentialsSchemaVersion"
            },
            "credentials": {
              "type": "array",
              "description": "Array of credentials containing its keys, labels and values.",
              "items": {
                "$ref": "#/components/schemas/ViewCredential"
              },
              "example": [
                {
                  "key": "email",
                  "label": "Email",
                  "value": "foodstore@email.com"
                },
                {
                  "key": "password",
                  "label": "Password",
                  "value": "test-pwd-1234"
                },
                {
                  "key": "language",
                  "label": "Choose the language",
                  "inputType": "SELECT",
                  "selectOptions": [
                    "English",
                    "Portuguese"
                  ]
                },
                {
                  "key": "supported_sizes",
                  "label": "Choose all supported sizes",
                  "inputType": "SELECT",
                  "selectOptions": [
                    "SMALL",
                    "MEDIUM",
                    "LARGE"
                  ]
                }
              ]
            }
          }
        }
      },
      "parameters": {
        "storeIdHeader": {
          "name": "X-Store-Id",
          "in": "header",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/StoreId"
          }
        },
        "orderId": {
          "name": "orderId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A unique identifier of the order in a UUID format.",
            "example": "295f76b4-5725-4bf5-a8ab-97943dbdc3b4"
          }
        },
        "eventIdOptionalHeader": {
          "name": "X-Event-Id",
          "in": "header",
          "required": false,
          "schema": {
            "type": "string",
            "description": "Optional unique identifier of the event that this callback refers to.",
            "example": "cf0ce51b-d74e-40d3-b177-1925ab4edc0c"
          }
        },
        "limit": {
          "name": "limit",
          "in": "query",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Max number of orders to retrieve",
            "example": 5
          }
        },
        "token": {
          "name": "token",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string",
            "description": "Opaque token used for paging.",
            "example": "CgwI09+kjQYQwOvF2AM=/(urlencoded:CgwI09%2BkjQYQwOvF2AM%3D)"
          }
        },
        "minDateTime": {
          "name": "minDateTime",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string",
            "description": "Minimum date/time filter in ISO 8601 format with time zone",
            "example": "2011-12-03T10:15:30-05:00"
          }
        },
        "maxDateTime": {
          "name": "maxDateTime",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string",
            "description": "Maximum date/time filter in ISO 8601 format with time zone",
            "example": "2011-12-03T10:15:30-05:00"
          }
        },
        "source": {
          "name": "source",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Describes the source of the order, typically from a food ordering marketplace.",
            "example": "ubereats"
          }
        },
        "eventIdHeader": {
          "name": "X-Event-Id",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string",
            "description": "Unique identifier of the event that this callback refers to.",
            "example": "cf0ce51b-d74e-40d3-b177-1925ab4edc0c"
          }
        },
        "deliveryReferenceId": {
          "name": "deliveryReferenceId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A unique identifier of the delivery in a UUID format.",
            "example": "295f76b4-5725-4bf5-a8ab-97943dbdc3b4"
          }
        },
        "posFeedOrderId": {
          "name": "orderId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "description": "A unique identifier of the order."
          }
        },
        "jobId": {
          "name": "jobId",
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/JobId"
          }
        },
        "applicationIdHeader": {
          "name": "X-Application-Id",
          "in": "header",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ApplicationId"
          }
        }
      },
      "responses": {
        "400": {
          "description": "The request is malformed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorMessage"
              }
            }
          }
        },
        "401": {
          "description": "Invalid authorization.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorMessage"
              }
            }
          }
        },
        "403": {
          "description": "Authorization not valid for the requested resource.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorMessage"
              }
            }
          }
        },
        "404": {
          "description": "Resource not found.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorMessage"
              }
            }
          }
        },
        "422": {
          "description": "The request body is not valid.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorMessage"
              }
            }
          }
        },
        "2XX": {
          "description": "Return any 2XX status to indicate that the data was received successfully"
        }
      }
    },
    "x-tagGroups": [
      {
        "name": "Endpoints",
        "tags": [
          "account_pairing_endpoints",
          "auth_endpoints",
          "callback_endpoints",
          "delivery_endpoints",
          "finance_endpoints",
          "manager_menu_endpoints",
          "manager_order_endpoints",
          "menus_endpoints",
          "orders_endpoints",
          "ping_endpoints",
          "reports_endpoints",
          "storefront_endpoints"
        ]
      },
      {
        "name": "Webhooks",
        "tags": [
          "delivery_webhooks",
          "menus_webhooks",
          "orders_webhooks",
          "manager_orders_webhooks",
          "reports_webhooks",
          "storefront_webhooks",
          "ping_webhooks",
          "stores_webhooks"
        ]
      }
    ]
  }